
Drone_7-1_AT24C08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08009e28  08009e28  00019e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3a4  0800a3a4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3ac  0800a3ac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a3b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000408  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016416  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003af4  00000000  00000000  0003665d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001620  00000000  00000000  0003a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001129  00000000  00000000  0003b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002474a  00000000  00000000  0003c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b5d9  00000000  00000000  00060feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d26c1  00000000  00000000  0007c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c60  00000000  00000000  0014ec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001558e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e10 	.word	0x08009e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009e10 	.word	0x08009e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <AT24C08_Page_Read>:
			1);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
}

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
	//비트 연산을 잘계산 해보면
	unsigned char devAddress = ((page*16)>>8)<<1|0xA0;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	121b      	asrs	r3, r3, #8
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16)&0xff;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16,
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2310      	movs	r3, #16
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <AT24C08_Page_Read+0x4c>)
 8000ee4:	f002 fef8 	bl	8003cd8 <HAL_I2C_Mem_Read>
			1);
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000027c 	.word	0x2000027c

08000ef4 <EP_PIDGain_Read>:
	}
}

//콜 바이 레퍼런스로 주소를 받아와서 해당 주소의 데이터를 저장해야한다. 그러므로 포인터로 선언
//그리고 잘 저장 됬는지 확인하기 위해 반환값을 주자
unsigned char EP_PIDGain_Read(unsigned char id,float* PGain, float* IGain, float* DGain){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	//먼저 역순으로 받아온다.
	switch(id)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d83e      	bhi.n	8000f88 <EP_PIDGain_Read+0x94>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <EP_PIDGain_Read+0x1c>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f59 	.word	0x08000f59
 8000f20:	08000f69 	.word	0x08000f69
 8000f24:	08000f79 	.word	0x08000f79
	{
	case 0:
		AT24C08_Page_Read(0,&buf_read[0], 16);
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ffb7 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f36:	e027      	b.n	8000f88 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1,&buf_read[0], 16);
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ffaf 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f46:	e01f      	b.n	8000f88 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2,&buf_read[0], 16);
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff ffa7 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f56:	e017      	b.n	8000f88 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3,&buf_read[0], 16);
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2003      	movs	r0, #3
 8000f62:	f7ff ff9f 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f66:	e00f      	b.n	8000f88 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4,&buf_read[0], 16);
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2004      	movs	r0, #4
 8000f72:	f7ff ff97 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f76:	e007      	b.n	8000f88 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5,&buf_read[0], 16);
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2005      	movs	r0, #5
 8000f82:	f7ff ff8f 	bl	8000ea4 <AT24C08_Page_Read>
		break;
 8000f86:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++) chksum -= buf_read[i];
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f92:	e00c      	b.n	8000fae <EP_PIDGain_Read+0xba>
 8000f94:	f107 0218 	add.w	r2, r7, #24
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	3301      	adds	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	2b0e      	cmp	r3, #14
 8000fb2:	ddef      	ble.n	8000f94 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8000fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d12f      	bne.n	8001020 <EP_PIDGain_Read+0x12c>
 8000fc0:	7e3b      	ldrb	r3, [r7, #24]
 8000fc2:	2b45      	cmp	r3, #69	; 0x45
 8000fc4:	d12c      	bne.n	8001020 <EP_PIDGain_Read+0x12c>
 8000fc6:	7e7b      	ldrb	r3, [r7, #25]
 8000fc8:	2b50      	cmp	r3, #80	; 0x50
 8000fca:	d129      	bne.n	8001020 <EP_PIDGain_Read+0x12c>
	{
		//공용체 멤버변수 f에 든값을 gain의 주소에 넣어주자.
		//Pgain
		parser.byte[0] = buf_read[3];
 8000fcc:	7efb      	ldrb	r3, [r7, #27]
 8000fce:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8000fd0:	7f3b      	ldrb	r3, [r7, #28]
 8000fd2:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8000fd4:	7f7b      	ldrb	r3, [r7, #29]
 8000fd6:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8000fd8:	7fbb      	ldrb	r3, [r7, #30]
 8000fda:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[7];
 8000fe2:	7ffb      	ldrb	r3, [r7, #31]
 8000fe4:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 8000fe6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fea:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8000fec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ff0:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8000ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ff6:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[11];
 8000ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001002:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001008:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800100a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800100e:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 8001010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001014:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]

		//제대로 데이터가 읽힘
		return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e000      	b.n	8001022 <EP_PIDGain_Read+0x12e>
	}
	//데이터가 제대로 안 읽혔을때
	return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	3730      	adds	r7, #48	; 0x30
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop

0800102c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f023 0210 	bic.w	r2, r3, #16
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d101      	bne.n	80010b0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	330c      	adds	r3, #12
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	330c      	adds	r3, #12
 80010ea:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800110a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800

08001130 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_APB1_GRP1_EnableClock+0x2c>)
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <LL_APB1_GRP1_EnableClock+0x2c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800

08001160 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	4013      	ands	r3, r2
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b090      	sub	sp, #64	; 0x40
 80011c8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	2228      	movs	r2, #40	; 0x28
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 ff5e 	bl	8008094 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80011e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011ec:	f7ff ffa0 	bl	8001130 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff ff85 	bl	8001100 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011f6:	2004      	movs	r0, #4
 80011f8:	f7ff ff82 	bl	8001100 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ff7f 	bl	8001100 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001202:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001206:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001208:	2302      	movs	r3, #2
 800120a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001218:	2305      	movs	r3, #5
 800121a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4841      	ldr	r0, [pc, #260]	; (8001328 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001222:	f005 ffd2 	bl	80071ca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800122a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800122e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001234:	2302      	movs	r3, #2
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001238:	2301      	movs	r3, #1
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001242:	2318      	movs	r3, #24
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800124e:	230a      	movs	r3, #10
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	4619      	mov	r1, r3
 8001258:	4834      	ldr	r0, [pc, #208]	; (800132c <BNO080_GPIO_SPI_Initialization+0x168>)
 800125a:	f006 f85a 	bl	8007312 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800125e:	2100      	movs	r1, #0
 8001260:	4832      	ldr	r0, [pc, #200]	; (800132c <BNO080_GPIO_SPI_Initialization+0x168>)
 8001262:	f7ff fef3 	bl	800104c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126a:	4831      	ldr	r0, [pc, #196]	; (8001330 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800126c:	f7ff ff9b 	bl	80011a6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001274:	482c      	ldr	r0, [pc, #176]	; (8001328 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001276:	f7ff ff96 	bl	80011a6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001280:	f7ff ff91 	bl	80011a6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4822      	ldr	r0, [pc, #136]	; (8001328 <BNO080_GPIO_SPI_Initialization+0x164>)
 80012a0:	f005 ff93 	bl	80071ca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012aa:	2301      	movs	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012c0:	f005 ff83 	bl	80071ca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ca:	2301      	movs	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4815      	ldr	r0, [pc, #84]	; (8001334 <BNO080_GPIO_SPI_Initialization+0x170>)
 80012e0:	f005 ff73 	bl	80071ca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012f8:	f005 ff67 	bl	80071ca <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <BNO080_GPIO_SPI_Initialization+0x168>)
 80012fe:	f7ff fe95 	bl	800102c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001308:	f7ff ff3f 	bl	800118a <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001312:	f7ff ff3a 	bl	800118a <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800131c:	f7ff ff35 	bl	800118a <LL_GPIO_SetOutputPin>
}
 8001320:	bf00      	nop
 8001322:	3740      	adds	r7, #64	; 0x40
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020400 	.word	0x40020400
 800132c:	40003800 	.word	0x40003800
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000

08001338 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800133e:	f7ff ff41 	bl	80011c4 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <BNO080_Initialization+0xc4>)
 8001344:	f006 fd60 	bl	8007e08 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	482c      	ldr	r0, [pc, #176]	; (8001400 <BNO080_Initialization+0xc8>)
 800134e:	f7ff ff1c 	bl	800118a <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	482b      	ldr	r0, [pc, #172]	; (8001404 <BNO080_Initialization+0xcc>)
 8001358:	f7ff ff17 	bl	800118a <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800135c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <BNO080_Initialization+0xd0>)
 8001362:	f7ff ff20 	bl	80011a6 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001366:	20c8      	movs	r0, #200	; 0xc8
 8001368:	f001 fff4 	bl	8003354 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	4825      	ldr	r0, [pc, #148]	; (8001408 <BNO080_Initialization+0xd0>)
 8001372:	f7ff ff0a 	bl	800118a <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001376:	f000 f8d7 	bl	8001528 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800137a:	f000 f8d5 	bl	8001528 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800137e:	f000 f8f7 	bl	8001570 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001382:	f000 f8d1 	bl	8001528 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001386:	f000 f8f3 	bl	8001570 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <BNO080_Initialization+0xd4>)
 800138c:	22f9      	movs	r2, #249	; 0xf9
 800138e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <BNO080_Initialization+0xd4>)
 8001392:	2200      	movs	r2, #0
 8001394:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001396:	2102      	movs	r1, #2
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f959 	bl	8001650 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800139e:	f000 f8c3 	bl	8001528 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80013a2:	f000 f8e5 	bl	8001570 <BNO080_receivePacket>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d11b      	bne.n	80013e4 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <BNO080_Initialization+0xd8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <BNO080_Initialization+0xd8>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <BNO080_Initialization+0xd8>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	4618      	mov	r0, r3
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <BNO080_Initialization+0xd8>)
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BNO080_Initialization+0xdc>)
 80013c8:	f006 fd1e 	bl	8007e08 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <BNO080_Initialization+0xd4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2bf8      	cmp	r3, #248	; 0xf8
 80013d2:	d107      	bne.n	80013e4 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <BNO080_Initialization+0xd4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <BNO080_Initialization+0xe0>)
 80013dc:	f006 fd14 	bl	8007e08 <iprintf>
			return (0);
 80013e0:	2300      	movs	r3, #0
 80013e2:	e007      	b.n	80013f4 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <BNO080_Initialization+0xd4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	22f8      	movs	r2, #248	; 0xf8
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <BNO080_Initialization+0xe4>)
 80013ee:	f006 fd0b 	bl	8007e08 <iprintf>
	return (1); //Something went wrong
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08009e28 	.word	0x08009e28
 8001400:	40020400 	.word	0x40020400
 8001404:	40020000 	.word	0x40020000
 8001408:	40020800 	.word	0x40020800
 800140c:	200001f4 	.word	0x200001f4
 8001410:	200001f0 	.word	0x200001f0
 8001414:	08009e3c 	.word	0x08009e3c
 8001418:	08009e54 	.word	0x08009e54
 800141c:	08009e74 	.word	0x08009e74

08001420 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800142a:	bf00      	nop
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <SPI2_SendByte+0x40>)
 800142e:	f7ff fe33 	bl	8001098 <LL_SPI_IsActiveFlag_TXE>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f9      	beq.n	800142c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4619      	mov	r1, r3
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <SPI2_SendByte+0x40>)
 800143e:	f7ff fe4c 	bl	80010da <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001442:	bf00      	nop
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <SPI2_SendByte+0x40>)
 8001446:	f7ff fe14 	bl	8001072 <LL_SPI_IsActiveFlag_RXNE>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f9      	beq.n	8001444 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <SPI2_SendByte+0x40>)
 8001452:	f7ff fe34 	bl	80010be <LL_SPI_ReceiveData8>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003800 	.word	0x40003800

08001464 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	2005      	movs	r0, #5
 8001476:	f000 f805 	bl	8001484 <BNO080_setFeatureCommand>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 8001494:	22fd      	movs	r2, #253	; 0xfd
 8001496:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014b6:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014c0:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014ca:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	0e1b      	lsrs	r3, r3, #24
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014d4:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014f4:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 80014fe:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 8001508:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0e1b      	lsrs	r3, r3, #24
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <BNO080_setFeatureCommand+0xa0>)
 8001512:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001514:	2111      	movs	r1, #17
 8001516:	2002      	movs	r0, #2
 8001518:	f000 f89a 	bl	8001650 <BNO080_sendPacket>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200001f4 	.word	0x200001f4

08001528 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	e00c      	b.n	800154e <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <BNO080_waitForSPI+0x40>)
 800153a:	f7ff fe11 	bl	8001160 <LL_GPIO_IsInputPinSet>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001544:	2301      	movs	r3, #1
 8001546:	e00a      	b.n	800155e <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d1ee      	bne.n	8001534 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <BNO080_waitForSPI+0x44>)
 8001558:	f006 fcbc 	bl	8007ed4 <puts>
	return (0);
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020800 	.word	0x40020800
 800156c:	08009ec0 	.word	0x08009ec0

08001570 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	4831      	ldr	r0, [pc, #196]	; (8001640 <BNO080_receivePacket+0xd0>)
 800157c:	f7ff fdf0 	bl	8001160 <LL_GPIO_IsInputPinSet>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001586:	2300      	movs	r3, #0
 8001588:	e056      	b.n	8001638 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158e:	482d      	ldr	r0, [pc, #180]	; (8001644 <BNO080_receivePacket+0xd4>)
 8001590:	f7ff fe09 	bl	80011a6 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ff43 	bl	8001420 <SPI2_SendByte>
 800159a:	4603      	mov	r3, r0
 800159c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ff3e 	bl	8001420 <SPI2_SendByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ff39 	bl	8001420 <SPI2_SendByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff ff34 	bl	8001420 <SPI2_SendByte>
 80015b8:	4603      	mov	r3, r0
 80015ba:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <BNO080_receivePacket+0xd8>)
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <BNO080_receivePacket+0xd8>)
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80015c8:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <BNO080_receivePacket+0xd8>)
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <BNO080_receivePacket+0xd8>)
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80015d4:	7b3b      	ldrb	r3, [r7, #12]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015e8:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80015ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80015f2:	2300      	movs	r3, #0
 80015f4:	e020      	b.n	8001638 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80015f6:	893b      	ldrh	r3, [r7, #8]
 80015f8:	3b04      	subs	r3, #4
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80015fe:	2300      	movs	r3, #0
 8001600:	81fb      	strh	r3, [r7, #14]
 8001602:	e00e      	b.n	8001622 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001604:	20ff      	movs	r0, #255	; 0xff
 8001606:	f7ff ff0b 	bl	8001420 <SPI2_SendByte>
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	2b7f      	cmp	r3, #127	; 0x7f
 8001612:	d803      	bhi.n	800161c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <BNO080_receivePacket+0xdc>)
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	3301      	adds	r3, #1
 8001620:	81fb      	strh	r3, [r7, #14]
 8001622:	89fa      	ldrh	r2, [r7, #14]
 8001624:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbeb      	blt.n	8001604 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 800162c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <BNO080_receivePacket+0xd4>)
 8001632:	f7ff fdaa 	bl	800118a <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020800 	.word	0x40020800
 8001644:	40020400 	.word	0x40020400
 8001648:	200001f0 	.word	0x200001f0
 800164c:	200001f4 	.word	0x200001f4

08001650 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	3304      	adds	r3, #4
 8001664:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001666:	f7ff ff5f 	bl	8001528 <BNO080_waitForSPI>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001670:	2300      	movs	r3, #0
 8001672:	e032      	b.n	80016da <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001678:	481a      	ldr	r0, [pc, #104]	; (80016e4 <BNO080_sendPacket+0x94>)
 800167a:	f7ff fd94 	bl	80011a6 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fecd 	bl	8001420 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	121b      	asrs	r3, r3, #8
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fec7 	bl	8001420 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fec3 	bl	8001420 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <BNO080_sendPacket+0x98>)
 800169e:	5cd2      	ldrb	r2, [r2, r3]
 80016a0:	1c51      	adds	r1, r2, #1
 80016a2:	b2c8      	uxtb	r0, r1
 80016a4:	4910      	ldr	r1, [pc, #64]	; (80016e8 <BNO080_sendPacket+0x98>)
 80016a6:	54c8      	strb	r0, [r1, r3]
 80016a8:	4610      	mov	r0, r2
 80016aa:	f7ff feb9 	bl	8001420 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e008      	b.n	80016c6 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <BNO080_sendPacket+0x9c>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff feb0 	bl	8001420 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3301      	adds	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3f2      	bcc.n	80016b4 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <BNO080_sendPacket+0x94>)
 80016d4:	f7ff fd59 	bl	800118a <LL_GPIO_SetOutputPin>

	return (1);
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020400 	.word	0x40020400
 80016e8:	20000274 	.word	0x20000274
 80016ec:	200001f4 	.word	0x200001f4

080016f0 <LL_SPI_Enable>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_SPI_SetStandard>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f023 0210 	bic.w	r2, r3, #16
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	605a      	str	r2, [r3, #4]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_SPI_IsActiveFlag_TXE>:
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	d101      	bne.n	8001774 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_SPI_ReceiveData8>:
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	330c      	adds	r3, #12
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_SPI_TransmitData8>:
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	330c      	adds	r3, #12
 80017ae:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	701a      	strb	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <LL_AHB1_GRP1_EnableClock>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800

080017f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4313      	orrs	r3, r2
 8001806:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_APB2_GRP1_EnableClock+0x2c>)
 800180a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <LL_GPIO_SetOutputPin>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_GPIO_ResetOutputPin>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	2228      	movs	r2, #40	; 0x28
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f006 fc10 	bl	8008094 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001884:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001888:	f7ff ffb4 	bl	80017f4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff ff99 	bl	80017c4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001892:	2004      	movs	r0, #4
 8001894:	f7ff ff96 	bl	80017c4 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001898:	23e0      	movs	r3, #224	; 0xe0
 800189a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800189c:	2302      	movs	r3, #2
 800189e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018ac:	2305      	movs	r3, #5
 80018ae:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4825      	ldr	r0, [pc, #148]	; (800194c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80018b6:	f005 fc88 	bl	80071ca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018c2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80018c8:	2302      	movs	r3, #2
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80018d6:	2310      	movs	r3, #16
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018da:	2300      	movs	r3, #0
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80018e2:	230a      	movs	r3, #10
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4818      	ldr	r0, [pc, #96]	; (8001950 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018ee:	f005 fd10 	bl	8007312 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80018f2:	2100      	movs	r1, #0
 80018f4:	4816      	ldr	r0, [pc, #88]	; (8001950 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018f6:	f7ff ff0b 	bl	8001710 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80018fa:	2110      	movs	r1, #16
 80018fc:	4815      	ldr	r0, [pc, #84]	; (8001954 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018fe:	f7ff ff9f 	bl	8001840 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001902:	2310      	movs	r3, #16
 8001904:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001906:	2301      	movs	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800191c:	f005 fc55 	bl	80071ca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001920:	2320      	movs	r3, #32
 8001922:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001928:	2301      	movs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001932:	f005 fc4a 	bl	80071ca <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001938:	f7ff feda 	bl	80016f0 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800193c:	2110      	movs	r1, #16
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001940:	f7ff ff70 	bl	8001824 <LL_GPIO_SetOutputPin>
}
 8001944:	bf00      	nop
 8001946:	3740      	adds	r7, #64	; 0x40
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40020000 	.word	0x40020000
 8001950:	40013000 	.word	0x40013000
 8001954:	40020800 	.word	0x40020800

08001958 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001962:	bf00      	nop
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <SPI1_SendByte+0x40>)
 8001966:	f7ff fef9 	bl	800175c <LL_SPI_IsActiveFlag_TXE>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f9      	beq.n	8001964 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4619      	mov	r1, r3
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <SPI1_SendByte+0x40>)
 8001976:	f7ff ff12 	bl	800179e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800197a:	bf00      	nop
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <SPI1_SendByte+0x40>)
 800197e:	f7ff feda 	bl	8001736 <LL_SPI_IsActiveFlag_RXNE>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f9      	beq.n	800197c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <SPI1_SendByte+0x40>)
 800198a:	f7ff fefa 	bl	8001782 <LL_SPI_ReceiveData8>
 800198e:	4603      	mov	r3, r0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013000 	.word	0x40013000

0800199c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80019a6:	2110      	movs	r1, #16
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <ICM20602_Readbyte+0x3c>)
 80019aa:	f7ff ff49 	bl	8001840 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ffce 	bl	8001958 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff ffcb 	bl	8001958 <SPI1_SendByte>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80019c6:	2110      	movs	r1, #16
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <ICM20602_Readbyte+0x3c>)
 80019ca:	f7ff ff2b 	bl	8001824 <LL_GPIO_SetOutputPin>
	
	return val;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020800 	.word	0x40020800

080019dc <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80019ec:	2110      	movs	r1, #16
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <ICM20602_Writebyte+0x40>)
 80019f0:	f7ff ff26 	bl	8001840 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffab 	bl	8001958 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ffa7 	bl	8001958 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <ICM20602_Writebyte+0x40>)
 8001a0e:	f7ff ff09 	bl	8001824 <LL_GPIO_SetOutputPin>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40020800 	.word	0x40020800

08001a20 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001a3c:	f7ff ff10 	bl	8001860 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001a40:	4833      	ldr	r0, [pc, #204]	; (8001b10 <ICM20602_Initialization+0xf0>)
 8001a42:	f006 f9e1 	bl	8007e08 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001a46:	2075      	movs	r0, #117	; 0x75
 8001a48:	f7ff ffa8 	bl	800199c <ICM20602_Readbyte>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d105      	bne.n	8001a62 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	482e      	ldr	r0, [pc, #184]	; (8001b14 <ICM20602_Initialization+0xf4>)
 8001a5c:	f006 f9d4 	bl	8007e08 <iprintf>
 8001a60:	e012      	b.n	8001a88 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d00f      	beq.n	8001a88 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001a68:	2075      	movs	r0, #117	; 0x75
 8001a6a:	f7ff ff97 	bl	800199c <ICM20602_Readbyte>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d007      	beq.n	8001a88 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	2212      	movs	r2, #18
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <ICM20602_Initialization+0xf8>)
 8001a80:	f006 f9c2 	bl	8007e08 <iprintf>
			return 1; //ERROR
 8001a84:	2301      	movs	r3, #1
 8001a86:	e03f      	b.n	8001b08 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	206b      	movs	r0, #107	; 0x6b
 8001a8c:	f7ff ffa6 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f001 fc5f 	bl	8003354 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001a96:	2101      	movs	r1, #1
 8001a98:	206b      	movs	r0, #107	; 0x6b
 8001a9a:	f7ff ff9f 	bl	80019dc <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001a9e:	2032      	movs	r0, #50	; 0x32
 8001aa0:	f001 fc58 	bl	8003354 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001aa4:	2138      	movs	r1, #56	; 0x38
 8001aa6:	206c      	movs	r0, #108	; 0x6c
 8001aa8:	f7ff ff98 	bl	80019dc <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001aac:	2032      	movs	r0, #50	; 0x32
 8001aae:	f001 fc51 	bl	8003354 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f7ff ff91 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001aba:	2032      	movs	r0, #50	; 0x32
 8001abc:	f001 fc4a 	bl	8003354 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	201a      	movs	r0, #26
 8001ac4:	f7ff ff8a 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ac8:	2032      	movs	r0, #50	; 0x32
 8001aca:	f001 fc43 	bl	8003354 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001ace:	2118      	movs	r1, #24
 8001ad0:	201b      	movs	r0, #27
 8001ad2:	f7ff ff83 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ad6:	2032      	movs	r0, #50	; 0x32
 8001ad8:	f001 fc3c 	bl	8003354 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001adc:	2118      	movs	r1, #24
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f7ff ff7c 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ae4:	2032      	movs	r0, #50	; 0x32
 8001ae6:	f001 fc35 	bl	8003354 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001aea:	2103      	movs	r1, #3
 8001aec:	201d      	movs	r0, #29
 8001aee:	f7ff ff75 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f001 fc2e 	bl	8003354 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001af8:	2101      	movs	r1, #1
 8001afa:	2038      	movs	r0, #56	; 0x38
 8001afc:	f7ff ff6e 	bl	80019dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b00:	2032      	movs	r0, #50	; 0x32
 8001b02:	f001 fc27 	bl	8003354 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08009ed4 	.word	0x08009ed4
 8001b14:	08009eec 	.word	0x08009eec
 8001b18:	08009f10 	.word	0x08009f10

08001b1c <LL_SPI_Enable>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_SPI_SetStandard>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f023 0210 	bic.w	r2, r3, #16
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	605a      	str	r2, [r3, #4]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_SPI_IsActiveFlag_TXE>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d101      	bne.n	8001ba0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_SPI_ReceiveData8>:
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	330c      	adds	r3, #12
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_SPI_TransmitData8>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <LL_AHB1_GRP1_EnableClock>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40023800 	.word	0x40023800

08001c20 <LL_APB1_GRP1_EnableClock>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40023800 	.word	0x40023800

08001c50 <LL_GPIO_SetOutputPin>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	619a      	str	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_GPIO_ResetOutputPin>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	041a      	lsls	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	619a      	str	r2, [r3, #24]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	2228      	movs	r2, #40	; 0x28
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 f9fa 	bl	8008094 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cb4:	f7ff ffb4 	bl	8001c20 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f7ff ff99 	bl	8001bf0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001cbe:	2338      	movs	r3, #56	; 0x38
 8001cc0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4826      	ldr	r0, [pc, #152]	; (8001d74 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cdc:	f005 fa75 	bl	80071ca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ce4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ce8:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d00:	2300      	movs	r3, #0
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001d08:	230a      	movs	r3, #10
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	4619      	mov	r1, r3
 8001d12:	4819      	ldr	r0, [pc, #100]	; (8001d78 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d14:	f005 fafd 	bl	8007312 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4817      	ldr	r0, [pc, #92]	; (8001d78 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d1c:	f7ff ff0e 	bl	8001b3c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	4814      	ldr	r0, [pc, #80]	; (8001d74 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d24:	f7ff ffa2 	bl	8001c6c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001d28:	2340      	movs	r3, #64	; 0x40
 8001d2a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d42:	f005 fa42 	bl	80071ca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001d52:	463b      	mov	r3, r7
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d58:	f005 fa37 	bl	80071ca <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d5e:	f7ff fedd 	bl	8001b1c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d66:	f7ff ff73 	bl	8001c50 <LL_GPIO_SetOutputPin>
}
 8001d6a:	bf00      	nop
 8001d6c:	3740      	adds	r7, #64	; 0x40
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40003c00 	.word	0x40003c00

08001d7c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d86:	bf00      	nop
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <SPI3_SendByte+0x40>)
 8001d8a:	f7ff fefd 	bl	8001b88 <LL_SPI_IsActiveFlag_TXE>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f9      	beq.n	8001d88 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4808      	ldr	r0, [pc, #32]	; (8001dbc <SPI3_SendByte+0x40>)
 8001d9a:	f7ff ff16 	bl	8001bca <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d9e:	bf00      	nop
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <SPI3_SendByte+0x40>)
 8001da2:	f7ff fede 	bl	8001b62 <LL_SPI_IsActiveFlag_RXNE>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f9      	beq.n	8001da0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <SPI3_SendByte+0x40>)
 8001dae:	f7ff fefe 	bl	8001bae <LL_SPI_ReceiveData8>
 8001db2:	4603      	mov	r3, r0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40003c00 	.word	0x40003c00

08001dc0 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <LPS22HH_Readbyte+0x3c>)
 8001dce:	f7ff ff4d 	bl	8001c6c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ffce 	bl	8001d7c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffcb 	bl	8001d7c <SPI3_SendByte>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <LPS22HH_Readbyte+0x3c>)
 8001dee:	f7ff ff2f 	bl	8001c50 <LL_GPIO_SetOutputPin>
	
	return val;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40020400 	.word	0x40020400

08001e00 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001e10:	2140      	movs	r1, #64	; 0x40
 8001e12:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LPS22HH_Writebyte+0x40>)
 8001e14:	f7ff ff2a 	bl	8001c6c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ffab 	bl	8001d7c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffa7 	bl	8001d7c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <LPS22HH_Writebyte+0x40>)
 8001e32:	f7ff ff0d 	bl	8001c50 <LL_GPIO_SetOutputPin>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020400 	.word	0x40020400

08001e44 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001e4e:	f7ff ff1d 	bl	8001c8c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001e52:	4841      	ldr	r0, [pc, #260]	; (8001f58 <LPS22HH_Initialization+0x114>)
 8001e54:	f005 ffd8 	bl	8007e08 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f7ff ffb1 	bl	8001dc0 <LPS22HH_Readbyte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2bb3      	cmp	r3, #179	; 0xb3
 8001e66:	d105      	bne.n	8001e74 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	483b      	ldr	r0, [pc, #236]	; (8001f5c <LPS22HH_Initialization+0x118>)
 8001e6e:	f005 ffcb 	bl	8007e08 <iprintf>
 8001e72:	e012      	b.n	8001e9a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2bb3      	cmp	r3, #179	; 0xb3
 8001e78:	d00f      	beq.n	8001e9a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f7ff ffa0 	bl	8001dc0 <LPS22HH_Readbyte>
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2bb3      	cmp	r3, #179	; 0xb3
 8001e88:	d007      	beq.n	8001e9a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	22b3      	movs	r2, #179	; 0xb3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4833      	ldr	r0, [pc, #204]	; (8001f60 <LPS22HH_Initialization+0x11c>)
 8001e92:	f005 ffb9 	bl	8007e08 <iprintf>
			return 1; //ERROR
 8001e96:	2301      	movs	r3, #1
 8001e98:	e059      	b.n	8001f4e <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	2011      	movs	r0, #17
 8001e9e:	f7ff ffaf 	bl	8001e00 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001ea2:	2011      	movs	r0, #17
 8001ea4:	f7ff ff8c 	bl	8001dc0 <LPS22HH_Readbyte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f7      	bne.n	8001ea2 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001eb2:	2010      	movs	r0, #16
 8001eb4:	f7ff ff84 	bl	8001dc0 <LPS22HH_Readbyte>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec2:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2010      	movs	r0, #16
 8001eca:	f7ff ff99 	bl	8001e00 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ed2:	2010      	movs	r0, #16
 8001ed4:	f7ff ff74 	bl	8001dc0 <LPS22HH_Readbyte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001edc:	2010      	movs	r0, #16
 8001ede:	f7ff ff6f 	bl	8001dc0 <LPS22HH_Readbyte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	f043 030c 	orr.w	r3, r3, #12
 8001eec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2010      	movs	r0, #16
 8001ef4:	f7ff ff84 	bl	8001e00 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ef8:	2010      	movs	r0, #16
 8001efa:	f7ff ff61 	bl	8001dc0 <LPS22HH_Readbyte>
 8001efe:	4603      	mov	r3, r0
 8001f00:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	2010      	movs	r0, #16
 8001f10:	f7ff ff76 	bl	8001e00 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001f14:	2011      	movs	r0, #17
 8001f16:	f7ff ff53 	bl	8001dc0 <LPS22HH_Readbyte>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	2011      	movs	r0, #17
 8001f2c:	f7ff ff68 	bl	8001e00 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001f30:	2012      	movs	r0, #18
 8001f32:	f7ff ff45 	bl	8001dc0 <LPS22HH_Readbyte>
 8001f36:	4603      	mov	r3, r0
 8001f38:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	4619      	mov	r1, r3
 8001f46:	2012      	movs	r0, #18
 8001f48:	f7ff ff5a 	bl	8001e00 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08009f3c 	.word	0x08009f3c
 8001f5c:	08009f50 	.word	0x08009f50
 8001f60:	08009f74 	.word	0x08009f74

08001f64 <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <M8N_UART4_initialization+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <M8N_UART4_initialization+0x4c>)
 8001f9c:	f003 ff3e 	bl	8005e1c <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8001fa6:	f000 fba1 	bl	80026ec <Error_Handler>
	  }
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200003b4 	.word	0x200003b4
 8001fb4:	40004c00 	.word	0x40004c00

08001fb8 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e00c      	b.n	8001fe4 <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <M8N_TransmitData+0x40>)
 8001fda:	f003 ff6f 	bl	8005ebc <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbee      	blt.n	8001fca <M8N_TransmitData+0x12>
	}
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200003b4 	.word	0x200003b4

08001ffc <M8N_initialization>:

void M8N_initialization(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8002000:	f7ff ffb0 	bl	8001f64 <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002004:	211c      	movs	r1, #28
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <M8N_initialization+0x40>)
 8002008:	f7ff ffd6 	bl	8001fb8 <M8N_TransmitData>
	HAL_Delay(100);
 800200c:	2064      	movs	r0, #100	; 0x64
 800200e:	f001 f9a1 	bl	8003354 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002012:	2110      	movs	r1, #16
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <M8N_initialization+0x44>)
 8002016:	f7ff ffcf 	bl	8001fb8 <M8N_TransmitData>
	HAL_Delay(100);
 800201a:	2064      	movs	r0, #100	; 0x64
 800201c:	f001 f99a 	bl	8003354 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002020:	210e      	movs	r1, #14
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <M8N_initialization+0x48>)
 8002024:	f7ff ffc8 	bl	8001fb8 <M8N_TransmitData>
	HAL_Delay(100);
 8002028:	2064      	movs	r0, #100	; 0x64
 800202a:	f001 f993 	bl	8003354 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 800202e:	2115      	movs	r1, #21
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <M8N_initialization+0x4c>)
 8002032:	f7ff ffc1 	bl	8001fb8 <M8N_TransmitData>
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	08009fc4 	.word	0x08009fc4
 8002040:	08009fe0 	.word	0x08009fe0
 8002044:	08009ff0 	.word	0x08009ff0
 8002048:	0800a000 	.word	0x0800a000

0800204c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <MX_GPIO_Init+0x168>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <MX_GPIO_Init+0x168>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <MX_GPIO_Init+0x168>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <MX_GPIO_Init+0x168>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <MX_GPIO_Init+0x168>)
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <MX_GPIO_Init+0x168>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a44      	ldr	r2, [pc, #272]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <MX_GPIO_Init+0x168>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f4:	4830      	ldr	r0, [pc, #192]	; (80021b8 <MX_GPIO_Init+0x16c>)
 80020f6:	f001 fc91 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 80020fa:	2200      	movs	r2, #0
 80020fc:	f240 2117 	movw	r1, #535	; 0x217
 8002100:	482d      	ldr	r0, [pc, #180]	; (80021b8 <MX_GPIO_Init+0x16c>)
 8002102:	f001 fc8b 	bl	8003a1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800210c:	482b      	ldr	r0, [pc, #172]	; (80021bc <MX_GPIO_Init+0x170>)
 800210e:	f001 fc85 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002118:	4829      	ldr	r0, [pc, #164]	; (80021c0 <MX_GPIO_Init+0x174>)
 800211a:	f001 fc7f 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 800211e:	f242 2317 	movw	r3, #8727	; 0x2217
 8002122:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4820      	ldr	r0, [pc, #128]	; (80021b8 <MX_GPIO_Init+0x16c>)
 8002138:	f001 fad4 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 800213c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4819      	ldr	r0, [pc, #100]	; (80021b8 <MX_GPIO_Init+0x16c>)
 8002152:	f001 fac7 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002156:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800215a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215c:	2301      	movs	r3, #1
 800215e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4813      	ldr	r0, [pc, #76]	; (80021bc <MX_GPIO_Init+0x170>)
 8002170:	f001 fab8 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <MX_GPIO_Init+0x174>)
 800218e:	f001 faa9 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_GPIO_Init+0x170>)
 80021a6:	f001 fa9d 	bl	80036e4 <HAL_GPIO_Init>

}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020000 	.word	0x40020000

080021c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_I2C1_Init+0x50>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <MX_I2C1_Init+0x54>)
 80021cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_I2C1_Init+0x50>)
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <MX_I2C1_Init+0x58>)
 80021d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_I2C1_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_I2C1_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_I2C1_Init+0x50>)
 80021e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_I2C1_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_I2C1_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_I2C1_Init+0x50>)
 8002202:	f001 fc25 	bl	8003a50 <HAL_I2C_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800220c:	f000 fa6e 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000027c 	.word	0x2000027c
 8002218:	40005400 	.word	0x40005400
 800221c:	00061a80 	.word	0x00061a80

08002220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_I2C_MspInit+0x84>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d12c      	bne.n	800229c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800225e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002264:	2312      	movs	r3, #18
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002270:	2304      	movs	r3, #4
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <HAL_I2C_MspInit+0x8c>)
 800227c:	f001 fa32 	bl	80036e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 800228a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_I2C_MspInit+0x88>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40005400 	.word	0x40005400
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020400 	.word	0x40020400

080022b0 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�???? 방식?��?��?�� ?��?��?���???? ?��번에 많�? ?��?�� 보내질때 ??�???? 방식?? ???��?��?��?���???? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�???? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <_write+0x24>)
 80022c6:	f003 fe84 	bl	8005fd2 <HAL_UART_Transmit_IT>
	return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000444 	.word	0x20000444

080022d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022dc:	b094      	sub	sp, #80	; 0x50
 80022de:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <main+0x14c>)
 80022f2:	f107 0410 	add.w	r4, r7, #16
 80022f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022fc:	f000 ffb8 	bl	8003270 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002300:	f000 f8a6 	bl	8002450 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002304:	f7ff fea2 	bl	800204c <MX_GPIO_Init>
	MX_TIM3_Init();
 8002308:	f000 fc74 	bl	8002bf4 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 800230c:	f000 fe72 	bl	8002ff4 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8002310:	f000 fa9e 	bl	8002850 <MX_SPI2_Init>
	MX_SPI1_Init();
 8002314:	f000 fa4a 	bl	80027ac <MX_SPI1_Init>
	MX_SPI3_Init();
 8002318:	f000 faee 	bl	80028f8 <MX_SPI3_Init>
	MX_UART4_Init();
 800231c:	f000 fe16 	bl	8002f4c <MX_UART4_Init>
	MX_UART5_Init();
 8002320:	f000 fe3e 	bl	8002fa0 <MX_UART5_Init>
	MX_TIM5_Init();
 8002324:	f000 fcdc 	bl	8002ce0 <MX_TIM5_Init>
	MX_I2C1_Init();
 8002328:	f7ff ff4c 	bl	80021c4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	M8N_initialization();
 800232c:	f7ff fe66 	bl	8001ffc <M8N_initialization>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8002330:	2201      	movs	r2, #1
 8002332:	493d      	ldr	r1, [pc, #244]	; (8002428 <main+0x150>)
 8002334:	483d      	ldr	r0, [pc, #244]	; (800242c <main+0x154>)
 8002336:	f003 fe82 	bl	800603e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 800233a:	2201      	movs	r2, #1
 800233c:	493c      	ldr	r1, [pc, #240]	; (8002430 <main+0x158>)
 800233e:	483d      	ldr	r0, [pc, #244]	; (8002434 <main+0x15c>)
 8002340:	f003 fe7d 	bl	800603e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	493c      	ldr	r1, [pc, #240]	; (8002438 <main+0x160>)
 8002348:	483c      	ldr	r0, [pc, #240]	; (800243c <main+0x164>)
 800234a:	f003 fe78 	bl	800603e <HAL_UART_Receive_IT>

	BNO080_Initialization();
 800234e:	f7fe fff3 	bl	8001338 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 8002352:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002356:	f7ff f885 	bl	8001464 <BNO080_enableRotationVector>

	ICM20602_Initialization();
 800235a:	f7ff fb61 	bl	8001a20 <ICM20602_Initialization>
	LPS22HH_Initialization();
 800235e:	f7ff fd71 	bl	8001e44 <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002362:	2100      	movs	r1, #0
 8002364:	4836      	ldr	r0, [pc, #216]	; (8002440 <main+0x168>)
 8002366:	f002 feff 	bl	8005168 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800236a:	2104      	movs	r1, #4
 800236c:	4834      	ldr	r0, [pc, #208]	; (8002440 <main+0x168>)
 800236e:	f002 fefb 	bl	8005168 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002372:	2108      	movs	r1, #8
 8002374:	4832      	ldr	r0, [pc, #200]	; (8002440 <main+0x168>)
 8002376:	f002 fef7 	bl	8005168 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800237a:	210c      	movs	r1, #12
 800237c:	4830      	ldr	r0, [pc, #192]	; (8002440 <main+0x168>)
 800237e:	f002 fef3 	bl	8005168 <HAL_TIM_PWM_Start>
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(70);
//	}

	//EP_PIDGain_Write(0, 1.1, 2.2, 3.3);
	float p = 0.0, i=0.0, d=0.0;
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
	EP_PIDGain_Read(0, &p, &i, &d);
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	f107 0208 	add.w	r2, r7, #8
 800239a:	f107 010c 	add.w	r1, r7, #12
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fda8 	bl	8000ef4 <EP_PIDGain_Read>

	printf("\n%f %f %f", p, i, d);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8ce 	bl	8000548 <__aeabi_f2d>
 80023ac:	4680      	mov	r8, r0
 80023ae:	4689      	mov	r9, r1
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8c8 	bl	8000548 <__aeabi_f2d>
 80023b8:	4604      	mov	r4, r0
 80023ba:	460d      	mov	r5, r1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8c2 	bl	8000548 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023cc:	e9cd 4500 	strd	r4, r5, [sp]
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	481b      	ldr	r0, [pc, #108]	; (8002444 <main+0x16c>)
 80023d6:	f005 fd17 	bl	8007e08 <iprintf>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80023da:	210c      	movs	r1, #12
 80023dc:	481a      	ldr	r0, [pc, #104]	; (8002448 <main+0x170>)
 80023de:	f002 fec3 	bl	8005168 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <main+0x170>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f000 ffb1 	bl	8003354 <HAL_Delay>
	htim3.Instance->PSC = 1500;
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <main+0x170>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	f000 ffa9 	bl	8003354 <HAL_Delay>
	htim3.Instance->PSC = 1000;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <main+0x170>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f000 ffa1 	bl	8003354 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002412:	210c      	movs	r1, #12
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <main+0x170>)
 8002416:	f002 ff6f 	bl	80052f8 <HAL_TIM_PWM_Stop>

	printf("start\n");
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <main+0x174>)
 800241c:	f005 fd5a 	bl	8007ed4 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002420:	e7fe      	b.n	8002420 <main+0x148>
 8002422:	bf00      	nop
 8002424:	08009fb4 	.word	0x08009fb4
 8002428:	200002d0 	.word	0x200002d0
 800242c:	20000444 	.word	0x20000444
 8002430:	200002d2 	.word	0x200002d2
 8002434:	200003b4 	.word	0x200003b4
 8002438:	200002d1 	.word	0x200002d1
 800243c:	200003fc 	.word	0x200003fc
 8002440:	2000036c 	.word	0x2000036c
 8002444:	08009fa0 	.word	0x08009fa0
 8002448:	20000324 	.word	0x20000324
 800244c:	08009fac 	.word	0x08009fac

08002450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b094      	sub	sp, #80	; 0x50
 8002454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	2230      	movs	r2, #48	; 0x30
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f005 fe18 	bl	8008094 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <SystemClock_Config+0xcc>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <SystemClock_Config+0xcc>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6413      	str	r3, [r2, #64]	; 0x40
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <SystemClock_Config+0xcc>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <SystemClock_Config+0xd0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <SystemClock_Config+0xd0>)
 800249a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <SystemClock_Config+0xd0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b6:	2302      	movs	r3, #2
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80024c0:	2304      	movs	r3, #4
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80024c4:	23a8      	movs	r3, #168	; 0xa8
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80024cc:	2304      	movs	r3, #4
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 f907 	bl	80046e8 <HAL_RCC_OscConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0x94>
		Error_Handler();
 80024e0:	f000 f904 	bl	80026ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
 80024e6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2105      	movs	r1, #5
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fb68 	bl	8004bd8 <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0xc2>
		Error_Handler();
 800250e:	f000 f8ed 	bl	80026ec <Error_Handler>
	}
}
 8002512:	bf00      	nop
 8002514:	3750      	adds	r7, #80	; 0x50
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_UART_RxCpltCallback>:
		}
	}
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if (huart->Instance == UART5) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5f      	ldr	r2, [pc, #380]	; (80026b0 <HAL_UART_RxCpltCallback+0x18c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d154      	bne.n	80025e0 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8002536:	2201      	movs	r2, #1
 8002538:	495e      	ldr	r1, [pc, #376]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 800253a:	485f      	ldr	r0, [pc, #380]	; (80026b8 <HAL_UART_RxCpltCallback+0x194>)
 800253c:	f003 fd7f 	bl	800603e <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b1f      	cmp	r3, #31
 8002546:	d02e      	beq.n	80025a6 <HAL_UART_RxCpltCallback+0x82>
 8002548:	2b1f      	cmp	r3, #31
 800254a:	dc3a      	bgt.n	80025c2 <HAL_UART_RxCpltCallback+0x9e>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_UART_RxCpltCallback+0x32>
 8002550:	2b01      	cmp	r3, #1
 8002552:	d012      	beq.n	800257a <HAL_UART_RxCpltCallback+0x56>
 8002554:	e035      	b.n	80025c2 <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			if (uart5_rxData == 0x20) {
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b20      	cmp	r3, #32
 800255c:	d13f      	bne.n	80025de <HAL_UART_RxCpltCallback+0xba>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800255e:	4b57      	ldr	r3, [pc, #348]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 8002566:	7819      	ldrb	r1, [r3, #0]
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_UART_RxCpltCallback+0x19c>)
 800256a:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 8002576:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002578:	e031      	b.n	80025de <HAL_UART_RxCpltCallback+0xba>

		case 1:
			if (uart5_rxData == 0x40) {
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d10d      	bne.n	800259e <HAL_UART_RxCpltCallback+0x7a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8002582:	4b4e      	ldr	r3, [pc, #312]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 800258a:	7819      	ldrb	r1, [r3, #0]
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_UART_RxCpltCallback+0x19c>)
 800258e:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8002590:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b48      	ldr	r3, [pc, #288]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 800259a:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 800259c:	e020      	b.n	80025e0 <HAL_UART_RxCpltCallback+0xbc>
				cnt_ibus = 0;
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			break;
 80025a4:	e01c      	b.n	80025e0 <HAL_UART_RxCpltCallback+0xbc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 80025ae:	7819      	ldrb	r1, [r3, #0]
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_UART_RxCpltCallback+0x19c>)
 80025b2:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80025ba:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <HAL_UART_RxCpltCallback+0x1a0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
			break;
 80025c0:	e00e      	b.n	80025e0 <HAL_UART_RxCpltCallback+0xbc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_UART_RxCpltCallback+0x190>)
 80025ca:	7819      	ldrb	r1, [r3, #0]
 80025cc:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <HAL_UART_RxCpltCallback+0x19c>)
 80025ce:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_UART_RxCpltCallback+0x198>)
 80025da:	701a      	strb	r2, [r3, #0]
			break;
 80025dc:	e000      	b.n	80025e0 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80025de:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_UART_RxCpltCallback+0x1a4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d153      	bne.n	8002692 <HAL_UART_RxCpltCallback+0x16e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 80025ea:	2201      	movs	r2, #1
 80025ec:	4937      	ldr	r1, [pc, #220]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 80025ee:	4838      	ldr	r0, [pc, #224]	; (80026d0 <HAL_UART_RxCpltCallback+0x1ac>)
 80025f0:	f003 fd25 	bl	800603e <HAL_UART_Receive_IT>

		//GPS�???? ?��?�� ?��?��받�? ?��?��?���???? 바로 com?���???? 보내�????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b23      	cmp	r3, #35	; 0x23
 80025fa:	d02e      	beq.n	800265a <HAL_UART_RxCpltCallback+0x136>
 80025fc:	2b23      	cmp	r3, #35	; 0x23
 80025fe:	dc39      	bgt.n	8002674 <HAL_UART_RxCpltCallback+0x150>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_UART_RxCpltCallback+0xe6>
 8002604:	2b01      	cmp	r3, #1
 8002606:	d012      	beq.n	800262e <HAL_UART_RxCpltCallback+0x10a>
 8002608:	e034      	b.n	8002674 <HAL_UART_RxCpltCallback+0x150>
		case 0:
			if (uart4_rxData == 0xb5) {
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2bb5      	cmp	r3, #181	; 0xb5
 8002610:	d13e      	bne.n	8002690 <HAL_UART_RxCpltCallback+0x16c>
				m8n_rx_buf[cnt] = uart4_rxData;
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 800261a:	7819      	ldrb	r1, [r3, #0]
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_UART_RxCpltCallback+0x1b4>)
 800261e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800262a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800262c:	e030      	b.n	8002690 <HAL_UART_RxCpltCallback+0x16c>
		case 1:
			if (uart4_rxData == 0x62) {
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b62      	cmp	r3, #98	; 0x62
 8002634:	d10d      	bne.n	8002652 <HAL_UART_RxCpltCallback+0x12e>
				m8n_rx_buf[cnt] = uart4_rxData;
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 800263e:	7819      	ldrb	r1, [r3, #0]
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8002642:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800264e:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8002650:	e01f      	b.n	8002692 <HAL_UART_RxCpltCallback+0x16e>
				cnt = 0;
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
			break;
 8002658:	e01b      	b.n	8002692 <HAL_UART_RxCpltCallback+0x16e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 8002662:	7819      	ldrb	r1, [r3, #0]
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8002666:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_UART_RxCpltCallback+0x1b8>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���???? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_UART_RxCpltCallback+0x1a8>)
 800267c:	7819      	ldrb	r1, [r3, #0]
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8002680:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800268c:	701a      	strb	r2, [r3, #0]
			break;
 800268e:	e000      	b.n	8002692 <HAL_UART_RxCpltCallback+0x16e>
			break;
 8002690:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_UART_RxCpltCallback+0x1bc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d104      	bne.n	80026a6 <HAL_UART_RxCpltCallback+0x182>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 800269c:	2201      	movs	r2, #1
 800269e:	4911      	ldr	r1, [pc, #68]	; (80026e4 <HAL_UART_RxCpltCallback+0x1c0>)
 80026a0:	4811      	ldr	r0, [pc, #68]	; (80026e8 <HAL_UART_RxCpltCallback+0x1c4>)
 80026a2:	f003 fccc 	bl	800603e <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40005000 	.word	0x40005000
 80026b4:	200002d1 	.word	0x200002d1
 80026b8:	200003fc 	.word	0x200003fc
 80026bc:	2000031d 	.word	0x2000031d
 80026c0:	200002fc 	.word	0x200002fc
 80026c4:	2000031c 	.word	0x2000031c
 80026c8:	40004c00 	.word	0x40004c00
 80026cc:	200002d2 	.word	0x200002d2
 80026d0:	200003b4 	.word	0x200003b4
 80026d4:	2000031e 	.word	0x2000031e
 80026d8:	200002d4 	.word	0x200002d4
 80026dc:	200002f8 	.word	0x200002f8
 80026e0:	40011400 	.word	0x40011400
 80026e4:	200002d0 	.word	0x200002d0
 80026e8:	20000444 	.word	0x20000444

080026ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f0:	b672      	cpsid	i
}
 80026f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026f4:	e7fe      	b.n	80026f4 <Error_Handler+0x8>

080026f6 <LL_SPI_SetStandard>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 0210 	bic.w	r2, r3, #16
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_AHB1_GRP1_EnableClock>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4313      	orrs	r3, r2
 800272e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40023800 	.word	0x40023800

0800274c <LL_APB1_GRP1_EnableClock>:
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40023800 	.word	0x40023800

0800277c <LL_APB2_GRP1_EnableClock>:
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40023800 	.word	0x40023800

080027ac <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b090      	sub	sp, #64	; 0x40
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027b2:	f107 0318 	add.w	r3, r7, #24
 80027b6:	2228      	movs	r2, #40	; 0x28
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fc6a 	bl	8008094 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	463b      	mov	r3, r7
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80027d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027d4:	f7ff ffd2 	bl	800277c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff ff9f 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80027de:	23e0      	movs	r3, #224	; 0xe0
 80027e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027e2:	2302      	movs	r3, #2
 80027e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80027f2:	2305      	movs	r3, #5
 80027f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	463b      	mov	r3, r7
 80027f8:	4619      	mov	r1, r3
 80027fa:	4813      	ldr	r0, [pc, #76]	; (8002848 <MX_SPI1_Init+0x9c>)
 80027fc:	f004 fce5 	bl	80071ca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002804:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002808:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800280e:	2302      	movs	r3, #2
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002812:	2301      	movs	r3, #1
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800281c:	2310      	movs	r3, #16
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002828:	230a      	movs	r3, #10
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800282c:	f107 0318 	add.w	r3, r7, #24
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	; (800284c <MX_SPI1_Init+0xa0>)
 8002834:	f004 fd6d 	bl	8007312 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002838:	2100      	movs	r1, #0
 800283a:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_SPI1_Init+0xa0>)
 800283c:	f7ff ff5b 	bl	80026f6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	3740      	adds	r7, #64	; 0x40
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40020000 	.word	0x40020000
 800284c:	40013000 	.word	0x40013000

08002850 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b090      	sub	sp, #64	; 0x40
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	2228      	movs	r2, #40	; 0x28
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fc18 	bl	8008094 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	463b      	mov	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]
 8002872:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002874:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002878:	f7ff ff68 	bl	800274c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800287c:	2002      	movs	r0, #2
 800287e:	f7ff ff4d 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002882:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002886:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002888:	2302      	movs	r3, #2
 800288a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002898:	2305      	movs	r3, #5
 800289a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	463b      	mov	r3, r7
 800289e:	4619      	mov	r1, r3
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <MX_SPI2_Init+0xa0>)
 80028a2:	f004 fc92 	bl	80071ca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028ae:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80028b4:	2302      	movs	r3, #2
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80028c2:	2318      	movs	r3, #24
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80028ce:	230a      	movs	r3, #10
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	4619      	mov	r1, r3
 80028d8:	4806      	ldr	r0, [pc, #24]	; (80028f4 <MX_SPI2_Init+0xa4>)
 80028da:	f004 fd1a 	bl	8007312 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80028de:	2100      	movs	r1, #0
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <MX_SPI2_Init+0xa4>)
 80028e2:	f7ff ff08 	bl	80026f6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	3740      	adds	r7, #64	; 0x40
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40003800 	.word	0x40003800

080028f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b090      	sub	sp, #64	; 0x40
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	2228      	movs	r2, #40	; 0x28
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f005 fbc4 	bl	8008094 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	463b      	mov	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800291c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002920:	f7ff ff14 	bl	800274c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002924:	2002      	movs	r0, #2
 8002926:	f7ff fef9 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800292a:	2338      	movs	r3, #56	; 0x38
 800292c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800292e:	2302      	movs	r3, #2
 8002930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800293e:	2306      	movs	r3, #6
 8002940:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	463b      	mov	r3, r7
 8002944:	4619      	mov	r1, r3
 8002946:	4813      	ldr	r0, [pc, #76]	; (8002994 <MX_SPI3_Init+0x9c>)
 8002948:	f004 fc3f 	bl	80071ca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002950:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002954:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800295a:	2302      	movs	r3, #2
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800295e:	2301      	movs	r3, #1
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002968:	2308      	movs	r3, #8
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800296c:	2300      	movs	r3, #0
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002974:	230a      	movs	r3, #10
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002978:	f107 0318 	add.w	r3, r7, #24
 800297c:	4619      	mov	r1, r3
 800297e:	4806      	ldr	r0, [pc, #24]	; (8002998 <MX_SPI3_Init+0xa0>)
 8002980:	f004 fcc7 	bl	8007312 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002984:	2100      	movs	r1, #0
 8002986:	4804      	ldr	r0, [pc, #16]	; (8002998 <MX_SPI3_Init+0xa0>)
 8002988:	f7ff feb5 	bl	80026f6 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	3740      	adds	r7, #64	; 0x40
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020400 	.word	0x40020400
 8002998:	40003c00 	.word	0x40003c00

0800299c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <HAL_MspInit+0x4c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_MspInit+0x4c>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_MspInit+0x4c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f0:	e7fe      	b.n	80029f0 <NMI_Handler+0x4>

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <HardFault_Handler+0x4>

080029f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <MemManage_Handler+0x4>

080029fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler+0x4>

08002a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <UsageFault_Handler+0x4>

08002a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a38:	f000 fc6c 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <UART4_IRQHandler+0x10>)
 8002a46:	f003 fb1f 	bl	8006088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200003b4 	.word	0x200003b4

08002a54 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <UART5_IRQHandler+0x10>)
 8002a5a:	f003 fb15 	bl	8006088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200003fc 	.word	0x200003fc

08002a68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <USART6_IRQHandler+0x10>)
 8002a6e:	f003 fb0b 	bl	8006088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000444 	.word	0x20000444

08002a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_kill>:

int _kill(int pid, int sig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a96:	f005 fb4f 	bl	8008138 <__errno>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2216      	movs	r2, #22
 8002a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_exit>:

void _exit (int status)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffe7 	bl	8002a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002abe:	e7fe      	b.n	8002abe <_exit+0x12>

08002ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e00a      	b.n	8002ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ad2:	f3af 8000 	nop.w
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	b2ca      	uxtb	r2, r1
 8002ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	dbf0      	blt.n	8002ad2 <_read+0x12>
  }

  return len;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b22:	605a      	str	r2, [r3, #4]
  return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_isatty>:

int _isatty(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <_sbrk+0x5c>)
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <_sbrk+0x60>)
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <_sbrk+0x64>)
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <_sbrk+0x68>)
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d207      	bcs.n	8002ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b94:	f005 fad0 	bl	8008138 <__errno>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e009      	b.n	8002bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <_sbrk+0x64>)
 8002bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20020000 	.word	0x20020000
 8002bc4:	00000400 	.word	0x00000400
 8002bc8:	20000320 	.word	0x20000320
 8002bcc:	200005e0 	.word	0x200005e0

08002bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <SystemInit+0x20>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <SystemInit+0x20>)
 8002bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	f107 0320 	add.w	r3, r7, #32
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c26:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <MX_TIM3_Init+0xe8>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c3a:	2214      	movs	r2, #20
 8002c3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c4a:	4823      	ldr	r0, [pc, #140]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c4c:	f002 f9e4 	bl	8005018 <HAL_TIM_Base_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002c56:	f7ff fd49 	bl	80026ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c64:	4619      	mov	r1, r3
 8002c66:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c68:	f002 fc78 	bl	800555c <HAL_TIM_ConfigClockSource>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002c72:	f7ff fd3b 	bl	80026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c76:	4818      	ldr	r0, [pc, #96]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c78:	f002 fa1d 	bl	80050b6 <HAL_TIM_PWM_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c82:	f7ff fd33 	bl	80026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c8e:	f107 0320 	add.w	r3, r7, #32
 8002c92:	4619      	mov	r1, r3
 8002c94:	4810      	ldr	r0, [pc, #64]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c96:	f003 f845 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ca0:	f7ff fd24 	bl	80026ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ca4:	2360      	movs	r3, #96	; 0x60
 8002ca6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8002ca8:	230a      	movs	r3, #10
 8002caa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002cbc:	f002 fb8c 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002cc6:	f7ff fd11 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cca:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002ccc:	f000 f8dc 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002cd0:	bf00      	nop
 8002cd2:	3738      	adds	r7, #56	; 0x38
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000324 	.word	0x20000324
 8002cdc:	40000400 	.word	0x40000400

08002ce0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	f107 0320 	add.w	r3, r7, #32
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d12:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <MX_TIM5_Init+0x134>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d24:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d36:	4836      	ldr	r0, [pc, #216]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d38:	f002 f96e 	bl	8005018 <HAL_TIM_Base_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002d42:	f7ff fcd3 	bl	80026ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d50:	4619      	mov	r1, r3
 8002d52:	482f      	ldr	r0, [pc, #188]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d54:	f002 fc02 	bl	800555c <HAL_TIM_ConfigClockSource>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002d5e:	f7ff fcc5 	bl	80026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002d62:	482b      	ldr	r0, [pc, #172]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d64:	f002 f9a7 	bl	80050b6 <HAL_TIM_PWM_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002d6e:	f7ff fcbd 	bl	80026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d7a:	f107 0320 	add.w	r3, r7, #32
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4823      	ldr	r0, [pc, #140]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002d82:	f002 ffcf 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002d8c:	f7ff fcae 	bl	80026ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d90:	2360      	movs	r3, #96	; 0x60
 8002d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	4619      	mov	r1, r3
 8002da6:	481a      	ldr	r0, [pc, #104]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002da8:	f002 fb16 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002db2:	f7ff fc9b 	bl	80026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2204      	movs	r2, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4814      	ldr	r0, [pc, #80]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002dbe:	f002 fb0b 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002dc8:	f7ff fc90 	bl	80026ec <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8002dcc:	f647 330b 	movw	r3, #31499	; 0x7b0b
 8002dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002dda:	f002 fafd 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8002de4:	f7ff fc82 	bl	80026ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	220c      	movs	r2, #12
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002df4:	f002 faf0 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8002dfe:	f7ff fc75 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e02:	4803      	ldr	r0, [pc, #12]	; (8002e10 <MX_TIM5_Init+0x130>)
 8002e04:	f000 f840 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000036c 	.word	0x2000036c
 8002e14:	40000c00 	.word	0x40000c00

08002e18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_TIM_Base_MspInit+0x64>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e46:	e012      	b.n	8002e6e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_TIM_Base_MspInit+0x6c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10d      	bne.n	8002e6e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_TIM_Base_MspInit+0x68>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40000c00 	.word	0x40000c00

08002e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_TIM_MspPostInit+0xb0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d11e      	bne.n	8002ee8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4817      	ldr	r0, [pc, #92]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002ee2:	f000 fbff 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ee6:	e022      	b.n	8002f2e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d11d      	bne.n	8002f2e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4807      	ldr	r0, [pc, #28]	; (8002f48 <HAL_TIM_MspPostInit+0xc0>)
 8002f2a:	f000 fbdb 	bl	80036e4 <HAL_GPIO_Init>
}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	; 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40020000 	.word	0x40020000

08002f4c <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <MX_UART4_Init+0x50>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_UART4_Init+0x4c>)
 8002f84:	f002 ff4a 	bl	8005e1c <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f8e:	f7ff fbad 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200003b4 	.word	0x200003b4
 8002f9c:	40004c00 	.word	0x40004c00

08002fa0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <MX_UART5_Init+0x50>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <MX_UART5_Init+0x4c>)
 8002fd8:	f002 ff20 	bl	8005e1c <HAL_UART_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002fe2:	f7ff fb83 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200003fc 	.word	0x200003fc
 8002ff0:	40005000 	.word	0x40005000

08002ff4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8002ffa:	4a12      	ldr	r2, [pc, #72]	; (8003044 <MX_USART6_UART_Init+0x50>)
 8002ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8003000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 800301a:	220c      	movs	r2, #12
 800301c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800302a:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_USART6_UART_Init+0x4c>)
 800302c:	f002 fef6 	bl	8005e1c <HAL_UART_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003036:	f7ff fb59 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000444 	.word	0x20000444
 8003044:	40011400 	.word	0x40011400

08003048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08e      	sub	sp, #56	; 0x38
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_UART_MspInit+0x1bc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d135      	bne.n	80030d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a5e      	ldr	r2, [pc, #376]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80030a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b0:	2303      	movs	r3, #3
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030b4:	2308      	movs	r3, #8
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	4619      	mov	r1, r3
 80030be:	4853      	ldr	r0, [pc, #332]	; (800320c <HAL_UART_MspInit+0x1c4>)
 80030c0:	f000 fb10 	bl	80036e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	2034      	movs	r0, #52	; 0x34
 80030ca:	f000 fa42 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80030ce:	2034      	movs	r0, #52	; 0x34
 80030d0:	f000 fa5b 	bl	800358a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80030d4:	e091      	b.n	80031fa <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==UART5)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4d      	ldr	r2, [pc, #308]	; (8003210 <HAL_UART_MspInit+0x1c8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d153      	bne.n	8003188 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	4b48      	ldr	r3, [pc, #288]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80030ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4a40      	ldr	r2, [pc, #256]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6313      	str	r3, [r2, #48]	; 0x30
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a39      	ldr	r2, [pc, #228]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6313      	str	r3, [r2, #48]	; 0x30
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003146:	2308      	movs	r3, #8
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314e:	4619      	mov	r1, r3
 8003150:	482e      	ldr	r0, [pc, #184]	; (800320c <HAL_UART_MspInit+0x1c4>)
 8003152:	f000 fac7 	bl	80036e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003156:	2304      	movs	r3, #4
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003166:	2308      	movs	r3, #8
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800316a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316e:	4619      	mov	r1, r3
 8003170:	4828      	ldr	r0, [pc, #160]	; (8003214 <HAL_UART_MspInit+0x1cc>)
 8003172:	f000 fab7 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2035      	movs	r0, #53	; 0x35
 800317c:	f000 f9e9 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003180:	2035      	movs	r0, #53	; 0x35
 8003182:	f000 fa02 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 8003186:	e038      	b.n	80031fa <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_UART_MspInit+0x1d0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d133      	bne.n	80031fa <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_UART_MspInit+0x1c0>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031ca:	23c0      	movs	r3, #192	; 0xc0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031da:	2308      	movs	r3, #8
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	4809      	ldr	r0, [pc, #36]	; (800320c <HAL_UART_MspInit+0x1c4>)
 80031e6:	f000 fa7d 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2047      	movs	r0, #71	; 0x47
 80031f0:	f000 f9af 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031f4:	2047      	movs	r0, #71	; 0x47
 80031f6:	f000 f9c8 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3738      	adds	r7, #56	; 0x38
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40004c00 	.word	0x40004c00
 8003208:	40023800 	.word	0x40023800
 800320c:	40020800 	.word	0x40020800
 8003210:	40005000 	.word	0x40005000
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40011400 	.word	0x40011400

0800321c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800321c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003254 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003220:	f7ff fcd6 	bl	8002bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003226:	490d      	ldr	r1, [pc, #52]	; (800325c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800322c:	e002      	b.n	8003234 <LoopCopyDataInit>

0800322e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003232:	3304      	adds	r3, #4

08003234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003238:	d3f9      	bcc.n	800322e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003240:	e001      	b.n	8003246 <LoopFillZerobss>

08003242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003244:	3204      	adds	r2, #4

08003246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003248:	d3fb      	bcc.n	8003242 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800324a:	f004 ff7b 	bl	8008144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324e:	f7ff f843 	bl	80022d8 <main>
  bx  lr    
 8003252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800325c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003260:	0800a3b4 	.word	0x0800a3b4
  ldr r2, =_sbss
 8003264:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003268:	200005dc 	.word	0x200005dc

0800326c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC_IRQHandler>
	...

08003270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_Init+0x40>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_Init+0x40>)
 8003286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x40>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 f94f 	bl	800353c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	200f      	movs	r0, #15
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7ff fb7a 	bl	800299c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f967 	bl	80035a6 <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f000 f92f 	bl	8003552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000000 	.word	0x20000000
 800330c:	20000008 	.word	0x20000008
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x20>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x24>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_IncTick+0x24>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000008 	.word	0x20000008
 8003338:	2000048c 	.word	0x2000048c

0800333c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_GetTick+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2000048c 	.word	0x2000048c

08003354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff ffee 	bl	800333c <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d005      	beq.n	800337a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_Delay+0x44>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337a:	bf00      	nop
 800337c:	f7ff ffde 	bl	800333c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8f7      	bhi.n	800337c <HAL_Delay+0x28>
  {
  }
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008

0800339c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <__NVIC_GetPriorityGrouping+0x18>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0307 	and.w	r3, r3, #7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db0b      	blt.n	800342a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <__NVIC_EnableIRQ+0x38>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	490c      	ldr	r1, [pc, #48]	; (8003488 <__NVIC_SetPriority+0x4c>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	440b      	add	r3, r1
 8003460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003464:	e00a      	b.n	800347c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <__NVIC_SetPriority+0x50>)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3b04      	subs	r3, #4
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	440b      	add	r3, r1
 800347a:	761a      	strb	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f1c3 0307 	rsb	r3, r3, #7
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf28      	it	cs
 80034ae:	2304      	movcs	r3, #4
 80034b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <NVIC_EncodePriority+0x30>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3b03      	subs	r3, #3
 80034be:	e000      	b.n	80034c2 <NVIC_EncodePriority+0x32>
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	4313      	orrs	r3, r2
         );
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003508:	d301      	bcc.n	800350e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350a:	2301      	movs	r3, #1
 800350c:	e00f      	b.n	800352e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <SysTick_Config+0x40>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003516:	210f      	movs	r1, #15
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	f7ff ff8e 	bl	800343c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <SysTick_Config+0x40>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <SysTick_Config+0x40>)
 8003528:	2207      	movs	r2, #7
 800352a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000e010 	.word	0xe000e010

0800353c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff29 	bl	800339c <__NVIC_SetPriorityGrouping>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003564:	f7ff ff3e 	bl	80033e4 <__NVIC_GetPriorityGrouping>
 8003568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	6978      	ldr	r0, [r7, #20]
 8003570:	f7ff ff8e 	bl	8003490 <NVIC_EncodePriority>
 8003574:	4602      	mov	r2, r0
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff5d 	bl	800343c <__NVIC_SetPriority>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff31 	bl	8003400 <__NVIC_EnableIRQ>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ffa2 	bl	80034f8 <SysTick_Config>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff feb6 	bl	800333c <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d008      	beq.n	80035f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e052      	b.n	8003696 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0216 	bic.w	r2, r2, #22
 80035fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800360e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_DMA_Abort+0x62>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0208 	bic.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003640:	e013      	b.n	800366a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003642:	f7ff fe7b 	bl	800333c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b05      	cmp	r3, #5
 800364e:	d90c      	bls.n	800366a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e015      	b.n	8003696 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e4      	bne.n	8003642 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e00c      	b.n	80036d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2205      	movs	r2, #5
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e16b      	b.n	80039d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 815a 	bne.w	80039d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80b4 	beq.w	80039d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b60      	ldr	r3, [pc, #384]	; (80039f0 <HAL_GPIO_Init+0x30c>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a5f      	ldr	r2, [pc, #380]	; (80039f0 <HAL_GPIO_Init+0x30c>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b5d      	ldr	r3, [pc, #372]	; (80039f0 <HAL_GPIO_Init+0x30c>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a5b      	ldr	r2, [pc, #364]	; (80039f4 <HAL_GPIO_Init+0x310>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_GPIO_Init+0x314>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02b      	beq.n	800390a <HAL_GPIO_Init+0x226>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_GPIO_Init+0x318>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d025      	beq.n	8003906 <HAL_GPIO_Init+0x222>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <HAL_GPIO_Init+0x31c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x21e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4f      	ldr	r2, [pc, #316]	; (8003a04 <HAL_GPIO_Init+0x320>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x21a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4e      	ldr	r2, [pc, #312]	; (8003a08 <HAL_GPIO_Init+0x324>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x216>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4d      	ldr	r2, [pc, #308]	; (8003a0c <HAL_GPIO_Init+0x328>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x212>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4c      	ldr	r2, [pc, #304]	; (8003a10 <HAL_GPIO_Init+0x32c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x20e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4b      	ldr	r2, [pc, #300]	; (8003a14 <HAL_GPIO_Init+0x330>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x20a>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e00e      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038ee:	2308      	movs	r3, #8
 80038f0:	e00c      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038f2:	2306      	movs	r3, #6
 80038f4:	e00a      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038f6:	2305      	movs	r3, #5
 80038f8:	e008      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038fe:	2303      	movs	r3, #3
 8003900:	e004      	b.n	800390c <HAL_GPIO_Init+0x228>
 8003902:	2302      	movs	r3, #2
 8003904:	e002      	b.n	800390c <HAL_GPIO_Init+0x228>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_GPIO_Init+0x228>
 800390a:	2300      	movs	r3, #0
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f002 0203 	and.w	r2, r2, #3
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	4093      	lsls	r3, r2
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800391c:	4935      	ldr	r1, [pc, #212]	; (80039f4 <HAL_GPIO_Init+0x310>)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_GPIO_Init+0x334>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800394e:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <HAL_GPIO_Init+0x334>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003954:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_GPIO_Init+0x334>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <HAL_GPIO_Init+0x334>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_GPIO_Init+0x334>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_GPIO_Init+0x334>)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_GPIO_Init+0x334>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039cc:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <HAL_GPIO_Init+0x334>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	f67f ae90 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40013800 	.word	0x40013800
 80039f8:	40020000 	.word	0x40020000
 80039fc:	40020400 	.word	0x40020400
 8003a00:	40020800 	.word	0x40020800
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40021400 	.word	0x40021400
 8003a10:	40021800 	.word	0x40021800
 8003a14:	40021c00 	.word	0x40021c00
 8003a18:	40013c00 	.word	0x40013c00

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e12b      	b.n	8003cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe fbd2 	bl	8002220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f001 fa88 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a81      	ldr	r2, [pc, #516]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d807      	bhi.n	8003ad4 <HAL_I2C_Init+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_I2C_Init+0x278>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e006      	b.n	8003ae2 <HAL_I2C_Init+0x92>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <HAL_I2C_Init+0x27c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e7      	b.n	8003cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a78      	ldr	r2, [pc, #480]	; (8003cd0 <HAL_I2C_Init+0x280>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a6a      	ldr	r2, [pc, #424]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d802      	bhi.n	8003b24 <HAL_I2C_Init+0xd4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3301      	adds	r3, #1
 8003b22:	e009      	b.n	8003b38 <HAL_I2C_Init+0xe8>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_I2C_Init+0x284>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	495c      	ldr	r1, [pc, #368]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d819      	bhi.n	8003b8c <HAL_I2C_Init+0x13c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e59      	subs	r1, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_I2C_Init+0x138>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	e051      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e04f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_I2C_Init+0x168>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e012      	b.n	8003bde <HAL_I2C_Init+0x18e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	0099      	lsls	r1, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x196>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e022      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <HAL_I2C_Init+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e58      	subs	r0, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6809      	ldr	r1, [r1, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6911      	ldr	r1, [r2, #16]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	000186a0 	.word	0x000186a0
 8003cc8:	001e847f 	.word	0x001e847f
 8003ccc:	003d08ff 	.word	0x003d08ff
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	460b      	mov	r3, r1
 8003cec:	813b      	strh	r3, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf2:	f7ff fb23 	bl	800333c <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	f040 8214 	bne.w	800412e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	497b      	ldr	r1, [pc, #492]	; (8003efc <HAL_I2C_Mem_Read+0x224>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fafb 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e207      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x56>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e200      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d007      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2222      	movs	r2, #34	; 0x22
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a5b      	ldr	r2, [pc, #364]	; (8003f00 <HAL_I2C_Mem_Read+0x228>)
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d96:	88f8      	ldrh	r0, [r7, #6]
 8003d98:	893a      	ldrh	r2, [r7, #8]
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9c8 	bl	800413c <I2C_RequestMemoryRead>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1bc      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e190      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11b      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e170      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d11b      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	e150      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e7c:	e144      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	f200 80f1 	bhi.w	800406a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d123      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fb9b 	bl	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e145      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ed6:	e117      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d14e      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4906      	ldr	r1, [pc, #24]	; (8003f04 <HAL_I2C_Mem_Read+0x22c>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa0e 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e11a      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
 8003efa:	bf00      	nop
 8003efc:	00100002 	.word	0x00100002
 8003f00:	ffff0000 	.word	0xffff0000
 8003f04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f7c:	e0c4      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	2200      	movs	r2, #0
 8003f86:	496c      	ldr	r1, [pc, #432]	; (8004138 <HAL_I2C_Mem_Read+0x460>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f9bf 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cb      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4955      	ldr	r1, [pc, #340]	; (8004138 <HAL_I2C_Mem_Read+0x460>)
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f991 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e09d      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004068:	e04e      	b.n	8004108 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 faae 	bl	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e058      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d124      	bne.n	8004108 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f aeb6 	bne.w	8003e7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3728      	adds	r7, #40	; 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	00010004 	.word	0x00010004

0800413c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2200      	movs	r2, #0
 800417e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8c2 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419c:	d103      	bne.n	80041a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0aa      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	4952      	ldr	r1, [pc, #328]	; (8004308 <I2C_RequestMemoryRead+0x1cc>)
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f91d 	bl	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e097      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6a39      	ldr	r1, [r7, #32]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f9a8 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d107      	bne.n	800420e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e076      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	e021      	b.n	8004268 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f982 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b04      	cmp	r3, #4
 8004248:	d107      	bne.n	800425a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e050      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425e:	893b      	ldrh	r3, [r7, #8]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	6a39      	ldr	r1, [r7, #32]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f967 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b04      	cmp	r3, #4
 800427e:	d107      	bne.n	8004290 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e035      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f82b 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ca:	d103      	bne.n	80042d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e013      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	4906      	ldr	r1, [pc, #24]	; (8004308 <I2C_RequestMemoryRead+0x1cc>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f886 	bl	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00010002 	.word	0x00010002

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e048      	b.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d044      	beq.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7ff f809 	bl	800333c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d139      	bne.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10d      	bne.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	43da      	mvns	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4013      	ands	r3, r2
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	e00c      	b.n	800437c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	43da      	mvns	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	429a      	cmp	r2, r3
 8004380:	d116      	bne.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e023      	b.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	e00c      	b.n	80043f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d093      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800440e:	e071      	b.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d123      	bne.n	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e067      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d041      	beq.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fe ff64 	bl	800333c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d136      	bne.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10c      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e00b      	b.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e021      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10c      	bne.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	43da      	mvns	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4013      	ands	r3, r2
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e00b      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	43da      	mvns	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f af6d 	bne.w	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454c:	e034      	b.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f89b 	bl	800468a <I2C_IsAcknowledgeFailed>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e034      	b.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d028      	beq.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fe fee9 	bl	800333c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11d      	bne.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d016      	beq.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d1c3      	bne.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045dc:	e049      	b.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d119      	bne.n	8004620 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e030      	b.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004620:	f7fe fe8c 	bl	800333c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11d      	bne.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d016      	beq.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e007      	b.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d1ae      	bne.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a0:	d11b      	bne.n	80046da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e267      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d075      	beq.n	80047f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004706:	4b88      	ldr	r3, [pc, #544]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00c      	beq.n	800472c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b85      	ldr	r3, [pc, #532]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d112      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472a:	d10b      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	4b7e      	ldr	r3, [pc, #504]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05b      	beq.n	80047f0 <HAL_RCC_OscConfig+0x108>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d157      	bne.n	80047f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e242      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d106      	bne.n	800475c <HAL_RCC_OscConfig+0x74>
 800474e:	4b76      	ldr	r3, [pc, #472]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a75      	ldr	r2, [pc, #468]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x98>
 8004766:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6f      	ldr	r2, [pc, #444]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6c      	ldr	r2, [pc, #432]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 8004780:	4b69      	ldr	r3, [pc, #420]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a68      	ldr	r2, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe fdcc 	bl	800333c <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe fdc8 	bl	800333c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e207      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xc0>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe fdb8 	bl	800333c <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fe fdb4 	bl	800333c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1f3      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b51      	ldr	r3, [pc, #324]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0xe8>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fe:	4b4a      	ldr	r3, [pc, #296]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b44      	ldr	r3, [pc, #272]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1c7      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4937      	ldr	r1, [pc, #220]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e03a      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b34      	ldr	r3, [pc, #208]	; (800492c <HAL_RCC_OscConfig+0x244>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fe fd6d 	bl	800333c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004866:	f7fe fd69 	bl	800333c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1a8      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4925      	ldr	r1, [pc, #148]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_OscConfig+0x244>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fd4c 	bl	800333c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fe fd48 	bl	800333c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e187      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d036      	beq.n	8004940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_RCC_OscConfig+0x248>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fe fd2c 	bl	800333c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fe fd28 	bl	800333c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e167      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x240>)
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x200>
 8004906:	e01b      	b.n	8004940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_OscConfig+0x248>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490e:	f7fe fd15 	bl	800333c <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	e00e      	b.n	8004934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004916:	f7fe fd11 	bl	800333c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d907      	bls.n	8004934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e150      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
 8004928:	40023800 	.word	0x40023800
 800492c:	42470000 	.word	0x42470000
 8004930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ea      	bne.n	8004916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8097 	beq.w	8004a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	4b81      	ldr	r3, [pc, #516]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	4b7d      	ldr	r3, [pc, #500]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4a7c      	ldr	r2, [pc, #496]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	; 0x40
 800496e:	4b7a      	ldr	r3, [pc, #488]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <HAL_RCC_OscConfig+0x474>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498a:	4b74      	ldr	r3, [pc, #464]	; (8004b5c <HAL_RCC_OscConfig+0x474>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a73      	ldr	r2, [pc, #460]	; (8004b5c <HAL_RCC_OscConfig+0x474>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7fe fcd1 	bl	800333c <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fe fccd 	bl	800333c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e10c      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	4b6a      	ldr	r3, [pc, #424]	; (8004b5c <HAL_RCC_OscConfig+0x474>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x2ea>
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a63      	ldr	r2, [pc, #396]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	e01c      	b.n	8004a0c <HAL_RCC_OscConfig+0x324>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x30c>
 80049da:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a5e      	ldr	r2, [pc, #376]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 0304 	orr.w	r3, r3, #4
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70
 80049e6:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a5b      	ldr	r2, [pc, #364]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0x324>
 80049f4:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a57      	ldr	r2, [pc, #348]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	4b55      	ldr	r3, [pc, #340]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a54      	ldr	r2, [pc, #336]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 0304 	bic.w	r3, r3, #4
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe fc92 	bl	800333c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fe fc8e 	bl	800333c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0cb      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	4b49      	ldr	r3, [pc, #292]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ee      	beq.n	8004a1c <HAL_RCC_OscConfig+0x334>
 8004a3e:	e014      	b.n	8004a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a40:	f7fe fc7c 	bl	800333c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fe fc78 	bl	800333c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0b5      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ee      	bne.n	8004a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a70:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	4a38      	ldr	r2, [pc, #224]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a1 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a86:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d05c      	beq.n	8004b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d141      	bne.n	8004b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fe fc4c 	bl	800333c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fe fc48 	bl	800333c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e087      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	491b      	ldr	r1, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fe fc21 	bl	800333c <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fe fc1d 	bl	800333c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e05c      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x416>
 8004b1c:	e054      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe fc0a 	bl	800333c <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe fc06 	bl	800333c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e045      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x444>
 8004b4a:	e03d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e038      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCC_OscConfig+0x4ec>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d028      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d121      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d11a      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d111      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	3b01      	subs	r3, #1
 8004bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0cc      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b68      	ldr	r3, [pc, #416]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d90c      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b65      	ldr	r3, [pc, #404]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a52      	ldr	r2, [pc, #328]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d044      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c96:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e06f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e067      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 0203 	bic.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4934      	ldr	r1, [pc, #208]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc8:	f7fe fb38 	bl	800333c <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fe fb34 	bl	800333c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e04f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 020c 	and.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d1eb      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d20c      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490a      	ldr	r1, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	fa22 f303 	lsr.w	r3, r2, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fa98 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023c00 	.word	0x40023c00
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0800a018 	.word	0x0800a018
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	20000004 	.word	0x20000004

08004da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b094      	sub	sp, #80	; 0x50
 8004daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
 8004db0:	2300      	movs	r3, #0
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db4:	2300      	movs	r3, #0
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dbc:	4b79      	ldr	r3, [pc, #484]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d00d      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	f200 80e1 	bhi.w	8004f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd6:	e0db      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ddc:	e0db      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dde:	4b73      	ldr	r3, [pc, #460]	; (8004fac <HAL_RCC_GetSysClockFreq+0x208>)
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004de2:	e0d8      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de4:	4b6f      	ldr	r3, [pc, #444]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dee:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d063      	beq.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	2200      	movs	r2, #0
 8004e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0e:	2300      	movs	r3, #0
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	f04f 0000 	mov.w	r0, #0
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	0159      	lsls	r1, r3, #5
 8004e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e28:	0150      	lsls	r0, r2, #5
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4621      	mov	r1, r4
 8004e30:	1a51      	subs	r1, r2, r1
 8004e32:	6139      	str	r1, [r7, #16]
 8004e34:	4629      	mov	r1, r5
 8004e36:	eb63 0301 	sbc.w	r3, r3, r1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	018b      	lsls	r3, r1, #6
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e52:	4651      	mov	r1, sl
 8004e54:	018a      	lsls	r2, r1, #6
 8004e56:	4651      	mov	r1, sl
 8004e58:	ebb2 0801 	subs.w	r8, r2, r1
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e76:	4690      	mov	r8, r2
 8004e78:	4699      	mov	r9, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	eb18 0303 	adds.w	r3, r8, r3
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	462b      	mov	r3, r5
 8004e84:	eb49 0303 	adc.w	r3, r9, r3
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e96:	4629      	mov	r1, r5
 8004e98:	024b      	lsls	r3, r1, #9
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	024a      	lsls	r2, r1, #9
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	2200      	movs	r2, #0
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb4:	f7fb fe78 	bl	8000ba8 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	e058      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	4611      	mov	r1, r2
 8004ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	f04f 0000 	mov.w	r0, #0
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	0159      	lsls	r1, r3, #5
 8004eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eee:	0150      	lsls	r0, r2, #5
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004efa:	4649      	mov	r1, r9
 8004efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f14:	ebb2 040a 	subs.w	r4, r2, sl
 8004f18:	eb63 050b 	sbc.w	r5, r3, fp
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	00eb      	lsls	r3, r5, #3
 8004f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f2a:	00e2      	lsls	r2, r4, #3
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	461d      	mov	r5, r3
 8004f30:	4643      	mov	r3, r8
 8004f32:	18e3      	adds	r3, r4, r3
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	464b      	mov	r3, r9
 8004f38:	eb45 0303 	adc.w	r3, r5, r3
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	028b      	lsls	r3, r1, #10
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f54:	4621      	mov	r1, r4
 8004f56:	028a      	lsls	r2, r1, #10
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	61fa      	str	r2, [r7, #28]
 8004f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f68:	f7fb fe1e 	bl	8000ba8 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3750      	adds	r7, #80	; 0x50
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	007a1200 	.word	0x007a1200

08004fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000000 	.word	0x20000000

08004fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fcc:	f7ff fff0 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0a9b      	lsrs	r3, r3, #10
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0800a028 	.word	0x0800a028

08004ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ff4:	f7ff ffdc 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0b5b      	lsrs	r3, r3, #13
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	; (8005014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	0800a028 	.word	0x0800a028

08005018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e041      	b.n	80050ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fd feea 	bl	8002e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 fb48 	bl	80056ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e041      	b.n	800514c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f839 	bl	8005154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f000 faf9 	bl	80056ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <HAL_TIM_PWM_Start+0x24>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e022      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d109      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x3e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e015      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x58>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e008      	b.n	80051d2 <HAL_TIM_PWM_Start+0x6a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07c      	b.n	80052d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0x82>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e8:	e013      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0x92>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f8:	e00b      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xa2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005208:	e003      	b.n	8005212 <HAL_TIM_PWM_Start+0xaa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fd5c 	bl	8005cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_TIM_PWM_Start+0x174>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIM_PWM_Start+0xcc>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <HAL_TIM_PWM_Start+0x178>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_TIM_PWM_Start+0xd0>
 8005234:	2301      	movs	r3, #1
 8005236:	e000      	b.n	800523a <HAL_TIM_PWM_Start+0xd2>
 8005238:	2300      	movs	r3, #0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_TIM_PWM_Start+0x174>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d01d      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <HAL_TIM_PWM_Start+0x17c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_TIM_PWM_Start+0x180>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_TIM_PWM_Start+0x184>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIM_PWM_Start+0x178>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIM_PWM_Start+0x188>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIM_PWM_Start+0x136>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_TIM_PWM_Start+0x18c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d111      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d010      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	e007      	b.n	80052d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40001800 	.word	0x40001800

080052f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fce4 	bl	8005cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <HAL_TIM_PWM_Stop+0xd8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIM_PWM_Stop+0x2c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <HAL_TIM_PWM_Stop+0xdc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_TIM_PWM_Stop+0x30>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_TIM_PWM_Stop+0x32>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1a      	ldr	r2, [r3, #32]
 8005334:	f241 1311 	movw	r3, #4369	; 0x1111
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_TIM_PWM_Stop+0x66>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f240 4344 	movw	r3, #1092	; 0x444
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <HAL_TIM_PWM_Stop+0x66>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	f241 1311 	movw	r3, #4369	; 0x1111
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_TIM_PWM_Stop+0x96>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	f240 4344 	movw	r3, #1092	; 0x444
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_TIM_PWM_Stop+0x96>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Stop+0xa6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	e013      	b.n	80053c6 <HAL_TIM_PWM_Stop+0xce>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Stop+0xb6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	e00b      	b.n	80053c6 <HAL_TIM_PWM_Stop+0xce>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Stop+0xc6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053bc:	e003      	b.n	80053c6 <HAL_TIM_PWM_Stop+0xce>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400

080053d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0ae      	b.n	8005554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b0c      	cmp	r3, #12
 8005402:	f200 809f 	bhi.w	8005544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005441 	.word	0x08005441
 8005410:	08005545 	.word	0x08005545
 8005414:	08005545 	.word	0x08005545
 8005418:	08005545 	.word	0x08005545
 800541c:	08005481 	.word	0x08005481
 8005420:	08005545 	.word	0x08005545
 8005424:	08005545 	.word	0x08005545
 8005428:	08005545 	.word	0x08005545
 800542c:	080054c3 	.word	0x080054c3
 8005430:	08005545 	.word	0x08005545
 8005434:	08005545 	.word	0x08005545
 8005438:	08005545 	.word	0x08005545
 800543c:	08005503 	.word	0x08005503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f9fc 	bl	8005844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0208 	orr.w	r2, r2, #8
 800545a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0204 	bic.w	r2, r2, #4
 800546a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	619a      	str	r2, [r3, #24]
      break;
 800547e:	e064      	b.n	800554a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fa4c 	bl	8005924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	619a      	str	r2, [r3, #24]
      break;
 80054c0:	e043      	b.n	800554a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 faa1 	bl	8005a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0208 	orr.w	r2, r2, #8
 80054dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0204 	bic.w	r2, r2, #4
 80054ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	61da      	str	r2, [r3, #28]
      break;
 8005500:	e023      	b.n	800554a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 faf5 	bl	8005af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69d9      	ldr	r1, [r3, #28]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	021a      	lsls	r2, r3, #8
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	61da      	str	r2, [r3, #28]
      break;
 8005542:	e002      	b.n	800554a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_TIM_ConfigClockSource+0x1c>
 8005574:	2302      	movs	r3, #2
 8005576:	e0b4      	b.n	80056e2 <HAL_TIM_ConfigClockSource+0x186>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b0:	d03e      	beq.n	8005630 <HAL_TIM_ConfigClockSource+0xd4>
 80055b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b6:	f200 8087 	bhi.w	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	f000 8086 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x172>
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c6:	d87f      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b70      	cmp	r3, #112	; 0x70
 80055ca:	d01a      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xa6>
 80055cc:	2b70      	cmp	r3, #112	; 0x70
 80055ce:	d87b      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b60      	cmp	r3, #96	; 0x60
 80055d2:	d050      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x11a>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d877      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b50      	cmp	r3, #80	; 0x50
 80055da:	d03c      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0xfa>
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d873      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d058      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x13a>
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d86f      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b30      	cmp	r3, #48	; 0x30
 80055ea:	d064      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x15a>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d86b      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d060      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x15a>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d867      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d05c      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x15a>
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d05a      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	e062      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005612:	f000 fb41 	bl	8005c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	609a      	str	r2, [r3, #8]
      break;
 800562e:	e04f      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005640:	f000 fb2a 	bl	8005c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005652:	609a      	str	r2, [r3, #8]
      break;
 8005654:	e03c      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fa9e 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2150      	movs	r1, #80	; 0x50
 800566e:	4618      	mov	r0, r3
 8005670:	f000 faf7 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005674:	e02c      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fabd 	bl	8005c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2160      	movs	r1, #96	; 0x60
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fae7 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005694:	e01c      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fa7e 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2140      	movs	r1, #64	; 0x40
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fad7 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 80056b4:	e00c      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f000 face 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 80056c6:	e003      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
      break;
 80056cc:	e000      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a46      	ldr	r2, [pc, #280]	; (8005818 <TIM_Base_SetConfig+0x12c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570a:	d00f      	beq.n	800572c <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a43      	ldr	r2, [pc, #268]	; (800581c <TIM_Base_SetConfig+0x130>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a42      	ldr	r2, [pc, #264]	; (8005820 <TIM_Base_SetConfig+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a41      	ldr	r2, [pc, #260]	; (8005824 <TIM_Base_SetConfig+0x138>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a40      	ldr	r2, [pc, #256]	; (8005828 <TIM_Base_SetConfig+0x13c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a35      	ldr	r2, [pc, #212]	; (8005818 <TIM_Base_SetConfig+0x12c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d02b      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d027      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a32      	ldr	r2, [pc, #200]	; (800581c <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d023      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a31      	ldr	r2, [pc, #196]	; (8005820 <TIM_Base_SetConfig+0x134>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01f      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a30      	ldr	r2, [pc, #192]	; (8005824 <TIM_Base_SetConfig+0x138>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01b      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <TIM_Base_SetConfig+0x13c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d017      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <TIM_Base_SetConfig+0x140>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2d      	ldr	r2, [pc, #180]	; (8005830 <TIM_Base_SetConfig+0x144>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00f      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <TIM_Base_SetConfig+0x148>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00b      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <TIM_Base_SetConfig+0x14c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d007      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <TIM_Base_SetConfig+0x150>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_Base_SetConfig+0x154>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d108      	bne.n	80057b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <TIM_Base_SetConfig+0x12c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0xf8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <TIM_Base_SetConfig+0x13c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	611a      	str	r2, [r3, #16]
  }
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40010400 	.word	0x40010400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800
 8005838:	40001800 	.word	0x40001800
 800583c:	40001c00 	.word	0x40001c00
 8005840:	40002000 	.word	0x40002000

08005844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f023 0201 	bic.w	r2, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0302 	bic.w	r3, r3, #2
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a20      	ldr	r2, [pc, #128]	; (800591c <TIM_OC1_SetConfig+0xd8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC1_SetConfig+0x64>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <TIM_OC1_SetConfig+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10c      	bne.n	80058c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0308 	bic.w	r3, r3, #8
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a15      	ldr	r2, [pc, #84]	; (800591c <TIM_OC1_SetConfig+0xd8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC1_SetConfig+0x8e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <TIM_OC1_SetConfig+0xdc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d111      	bne.n	80058f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400

08005924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f023 0210 	bic.w	r2, r3, #16
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0320 	bic.w	r3, r3, #32
 800596e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <TIM_OC2_SetConfig+0xe4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC2_SetConfig+0x68>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <TIM_OC2_SetConfig+0xe8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10d      	bne.n	80059a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <TIM_OC2_SetConfig+0xe4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC2_SetConfig+0x94>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <TIM_OC2_SetConfig+0xe8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d113      	bne.n	80059e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40010400 	.word	0x40010400

08005a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <TIM_OC3_SetConfig+0xe0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_OC3_SetConfig+0x66>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <TIM_OC3_SetConfig+0xe4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d10d      	bne.n	8005a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC3_SetConfig+0xe0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x92>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <TIM_OC3_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d113      	bne.n	8005aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400

08005af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	031b      	lsls	r3, r3, #12
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <TIM_OC4_SetConfig+0xa4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC4_SetConfig+0x68>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <TIM_OC4_SetConfig+0xa8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 030a 	bic.w	r3, r3, #10
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b087      	sub	sp, #28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f023 0210 	bic.w	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	031b      	lsls	r3, r3, #12
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f043 0307 	orr.w	r3, r3, #7
 8005c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	021a      	lsls	r2, r3, #8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	609a      	str	r2, [r3, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2201      	movs	r2, #1
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	431a      	orrs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e05a      	b.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d01d      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10c      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40010400 	.word	0x40010400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40001800 	.word	0x40001800

08005e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e042      	b.n	8005eb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fd f900 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2224      	movs	r2, #36	; 0x24
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fdf3 	bl	8006a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d175      	bne.n	8005fc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_UART_Transmit+0x2c>
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e06e      	b.n	8005fca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2221      	movs	r2, #33	; 0x21
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005efa:	f7fd fa1f 	bl	800333c <HAL_GetTick>
 8005efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f14:	d108      	bne.n	8005f28 <HAL_UART_Transmit+0x6c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e003      	b.n	8005f30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f30:	e02e      	b.n	8005f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fb55 	bl	80065ec <UART_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e03a      	b.n	8005fca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	e007      	b.n	8005f82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1cb      	bne.n	8005f32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2140      	movs	r1, #64	; 0x40
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fb21 	bl	80065ec <UART_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e006      	b.n	8005fca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d121      	bne.n	8006030 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Transmit_IT+0x26>
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e01a      	b.n	8006032 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2221      	movs	r2, #33	; 0x21
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800602a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b20      	cmp	r3, #32
 8006056:	d112      	bne.n	800607e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_UART_Receive_IT+0x26>
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e00b      	b.n	8006080 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	461a      	mov	r2, r3
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fb12 	bl	800669e <UART_Start_Receive_IT>
 800607a:	4603      	mov	r3, r0
 800607c:	e000      	b.n	8006080 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b0ba      	sub	sp, #232	; 0xe8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HAL_UART_IRQHandler+0x66>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fbf2 	bl	80068d0 <UART_Receive_IT>
      return;
 80060ec:	e25b      	b.n	80065a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80de 	beq.w	80062b4 <HAL_UART_IRQHandler+0x22c>
 80060f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80d1 	beq.w	80062b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_UART_IRQHandler+0xae>
 800611e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	f043 0201 	orr.w	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0xd2>
 8006142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	f043 0202 	orr.w	r2, r3, #2
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <HAL_UART_IRQHandler+0xf6>
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	f043 0204 	orr.w	r2, r3, #4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d011      	beq.n	80061ae <HAL_UART_IRQHandler+0x126>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d105      	bne.n	80061a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f043 0208 	orr.w	r2, r3, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 81f2 	beq.w	800659c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_UART_IRQHandler+0x14e>
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb7d 	bl	80068d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <HAL_UART_IRQHandler+0x17a>
 80061fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04f      	beq.n	80062a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa85 	bl	8006712 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d141      	bne.n	800629a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006242:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800624e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800625a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1d9      	bne.n	8006216 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d013      	beq.n	8006292 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	4a7e      	ldr	r2, [pc, #504]	; (8006468 <HAL_UART_IRQHandler+0x3e0>)
 8006270:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fa11 	bl	800369e <HAL_DMA_Abort_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e00e      	b.n	80062b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f994 	bl	80065c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	e00a      	b.n	80062b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f990 	bl	80065c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	e006      	b.n	80062b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f98c 	bl	80065c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80062ae:	e175      	b.n	800659c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	bf00      	nop
    return;
 80062b2:	e173      	b.n	800659c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	f040 814f 	bne.w	800655c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8148 	beq.w	800655c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8141 	beq.w	800655c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	f040 80b6 	bne.w	800646c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800630c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8145 	beq.w	80065a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800631a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800631e:	429a      	cmp	r2, r3
 8006320:	f080 813e 	bcs.w	80065a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800632a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006336:	f000 8088 	beq.w	800644a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006366:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800636a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800637e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1d9      	bne.n	800633a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3314      	adds	r3, #20
 800638c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e1      	bne.n	8006386 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3314      	adds	r3, #20
 80063c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e3      	bne.n	80063c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800642c:	65ba      	str	r2, [r7, #88]	; 0x58
 800642e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800643a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e3      	bne.n	8006408 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	4618      	mov	r0, r3
 8006446:	f7fd f8ba 	bl	80035be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006458:	b29b      	uxth	r3, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	b29b      	uxth	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8b7 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006466:	e09b      	b.n	80065a0 <HAL_UART_IRQHandler+0x518>
 8006468:	080067d9 	.word	0x080067d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006474:	b29b      	uxth	r3, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 808e 	beq.w	80065a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8089 	beq.w	80065a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064b6:	647a      	str	r2, [r7, #68]	; 0x44
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e3      	bne.n	8006492 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	623b      	str	r3, [r7, #32]
   return(result);
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ee:	633a      	str	r2, [r7, #48]	; 0x30
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e3      	bne.n	80064ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0310 	bic.w	r3, r3, #16
 8006526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	617b      	str	r3, [r7, #20]
   return(result);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e3      	bne.n	8006510 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800654e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f83d 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800655a:	e023      	b.n	80065a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_UART_IRQHandler+0x4f4>
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f943 	bl	8006800 <UART_Transmit_IT>
    return;
 800657a:	e014      	b.n	80065a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <HAL_UART_IRQHandler+0x51e>
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f983 	bl	80068a0 <UART_EndTransmit_IT>
    return;
 800659a:	e004      	b.n	80065a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065a4:	bf00      	nop
  }
}
 80065a6:	37e8      	adds	r7, #232	; 0xe8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	4613      	mov	r3, r2
 80065fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fc:	e03b      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d037      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006606:	f7fc fe99 	bl	800333c <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	429a      	cmp	r2, r3
 8006614:	d302      	bcc.n	800661c <UART_WaitOnFlagUntilTimeout+0x30>
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e03a      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d023      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d020      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d01d      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b08      	cmp	r3, #8
 8006646:	d116      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f857 	bl	8006712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2208      	movs	r2, #8
 8006668:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e00f      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d0b4      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2222      	movs	r2, #34	; 0x22
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0220 	orr.w	r2, r2, #32
 8006702:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006712:	b480      	push	{r7}
 8006714:	b095      	sub	sp, #84	; 0x54
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800673a:	643a      	str	r2, [r7, #64]	; 0x40
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	61fb      	str	r3, [r7, #28]
   return(result);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	2b01      	cmp	r3, #1
 8006788:	d119      	bne.n	80067be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60bb      	str	r3, [r7, #8]
   return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	647b      	str	r3, [r7, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067aa:	61ba      	str	r2, [r7, #24]
 80067ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067cc:	bf00      	nop
 80067ce:	3754      	adds	r7, #84	; 0x54
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fee4 	bl	80065c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b21      	cmp	r3, #33	; 0x21
 8006812:	d13e      	bne.n	8006892 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d114      	bne.n	8006848 <UART_Transmit_IT+0x48>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d110      	bne.n	8006848 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800683a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e008      	b.n	800685a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6211      	str	r1, [r2, #32]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4619      	mov	r1, r3
 8006868:	84d1      	strh	r1, [r2, #38]	; 0x26
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006892:	2302      	movs	r3, #2
  }
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fe73 	bl	80065ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b22      	cmp	r3, #34	; 0x22
 80068e2:	f040 80ae 	bne.w	8006a42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d117      	bne.n	8006920 <UART_Receive_IT+0x50>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d113      	bne.n	8006920 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	b29a      	uxth	r2, r3
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	1c9a      	adds	r2, r3, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	629a      	str	r2, [r3, #40]	; 0x28
 800691e:	e026      	b.n	800696e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d007      	beq.n	8006944 <UART_Receive_IT+0x74>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <UART_Receive_IT+0x82>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e008      	b.n	8006964 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	b2da      	uxtb	r2, r3
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29b      	uxth	r3, r3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4619      	mov	r1, r3
 800697c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800697e:	2b00      	cmp	r3, #0
 8006980:	d15d      	bne.n	8006a3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0220 	bic.w	r2, r2, #32
 8006990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d135      	bne.n	8006a34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	613b      	str	r3, [r7, #16]
   return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f023 0310 	bic.w	r3, r3, #16
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	623a      	str	r2, [r7, #32]
 80069f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d10a      	bne.n	8006a26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fdd1 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
 8006a32:	e002      	b.n	8006a3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fb fd75 	bl	8002524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e002      	b.n	8006a44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3730      	adds	r7, #48	; 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a50:	b0c0      	sub	sp, #256	; 0x100
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	68d9      	ldr	r1, [r3, #12]
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	ea40 0301 	orr.w	r3, r0, r1
 8006a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aa4:	f021 010c 	bic.w	r1, r1, #12
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	6999      	ldr	r1, [r3, #24]
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	ea40 0301 	orr.w	r3, r0, r1
 8006ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b8f      	ldr	r3, [pc, #572]	; (8006d18 <UART_SetConfig+0x2cc>)
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d005      	beq.n	8006aec <UART_SetConfig+0xa0>
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b8d      	ldr	r3, [pc, #564]	; (8006d1c <UART_SetConfig+0x2d0>)
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d104      	bne.n	8006af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aec:	f7fe fa80 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8006af0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006af4:	e003      	b.n	8006afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fe fa67 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8006afa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b08:	f040 810c 	bne.w	8006d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b1e:	4622      	mov	r2, r4
 8006b20:	462b      	mov	r3, r5
 8006b22:	1891      	adds	r1, r2, r2
 8006b24:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b26:	415b      	adcs	r3, r3
 8006b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b2e:	4621      	mov	r1, r4
 8006b30:	eb12 0801 	adds.w	r8, r2, r1
 8006b34:	4629      	mov	r1, r5
 8006b36:	eb43 0901 	adc.w	r9, r3, r1
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b4e:	4690      	mov	r8, r2
 8006b50:	4699      	mov	r9, r3
 8006b52:	4623      	mov	r3, r4
 8006b54:	eb18 0303 	adds.w	r3, r8, r3
 8006b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	eb49 0303 	adc.w	r3, r9, r3
 8006b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	18db      	adds	r3, r3, r3
 8006b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b80:	4613      	mov	r3, r2
 8006b82:	eb42 0303 	adc.w	r3, r2, r3
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
 8006b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b90:	f7fa f80a 	bl	8000ba8 <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4b61      	ldr	r3, [pc, #388]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	011c      	lsls	r4, r3, #4
 8006ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	1891      	adds	r1, r2, r2
 8006bba:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bbc:	415b      	adcs	r3, r3
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8006bca:	4649      	mov	r1, r9
 8006bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be4:	4692      	mov	sl, r2
 8006be6:	469b      	mov	fp, r3
 8006be8:	4643      	mov	r3, r8
 8006bea:	eb1a 0303 	adds.w	r3, sl, r3
 8006bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8006bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c10:	460b      	mov	r3, r1
 8006c12:	18db      	adds	r3, r3, r3
 8006c14:	643b      	str	r3, [r7, #64]	; 0x40
 8006c16:	4613      	mov	r3, r2
 8006c18:	eb42 0303 	adc.w	r3, r2, r3
 8006c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c26:	f7f9 ffbf 	bl	8000ba8 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006c32:	fba3 2301 	umull	r2, r3, r3, r1
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	2264      	movs	r2, #100	; 0x64
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	1acb      	subs	r3, r1, r3
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006c48:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c54:	441c      	add	r4, r3
 8006c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	1891      	adds	r1, r2, r2
 8006c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c70:	415b      	adcs	r3, r3
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c78:	4641      	mov	r1, r8
 8006c7a:	1851      	adds	r1, r2, r1
 8006c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c7e:	4649      	mov	r1, r9
 8006c80:	414b      	adcs	r3, r1
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c90:	4659      	mov	r1, fp
 8006c92:	00cb      	lsls	r3, r1, #3
 8006c94:	4651      	mov	r1, sl
 8006c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9a:	4651      	mov	r1, sl
 8006c9c:	00ca      	lsls	r2, r1, #3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	189b      	adds	r3, r3, r2
 8006ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cac:	464b      	mov	r3, r9
 8006cae:	460a      	mov	r2, r1
 8006cb0:	eb42 0303 	adc.w	r3, r2, r3
 8006cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ccc:	460b      	mov	r3, r1
 8006cce:	18db      	adds	r3, r3, r3
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	eb42 0303 	adc.w	r3, r2, r3
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ce2:	f7f9 ff61 	bl	8000ba8 <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006cec:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	2164      	movs	r1, #100	; 0x64
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	3332      	adds	r3, #50	; 0x32
 8006cfe:	4a08      	ldr	r2, [pc, #32]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	f003 0207 	and.w	r2, r3, #7
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4422      	add	r2, r4
 8006d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d14:	e106      	b.n	8006f24 <UART_SetConfig+0x4d8>
 8006d16:	bf00      	nop
 8006d18:	40011000 	.word	0x40011000
 8006d1c:	40011400 	.word	0x40011400
 8006d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d36:	4642      	mov	r2, r8
 8006d38:	464b      	mov	r3, r9
 8006d3a:	1891      	adds	r1, r2, r2
 8006d3c:	6239      	str	r1, [r7, #32]
 8006d3e:	415b      	adcs	r3, r3
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
 8006d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d46:	4641      	mov	r1, r8
 8006d48:	1854      	adds	r4, r2, r1
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	eb43 0501 	adc.w	r5, r3, r1
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	00eb      	lsls	r3, r5, #3
 8006d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d5e:	00e2      	lsls	r2, r4, #3
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	4643      	mov	r3, r8
 8006d66:	18e3      	adds	r3, r4, r3
 8006d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	eb45 0303 	adc.w	r3, r5, r3
 8006d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d92:	4629      	mov	r1, r5
 8006d94:	008b      	lsls	r3, r1, #2
 8006d96:	4621      	mov	r1, r4
 8006d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	008a      	lsls	r2, r1, #2
 8006da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006da4:	f7f9 ff00 	bl	8000ba8 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4b60      	ldr	r3, [pc, #384]	; (8006f30 <UART_SetConfig+0x4e4>)
 8006dae:	fba3 2302 	umull	r2, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	011c      	lsls	r4, r3, #4
 8006db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	1891      	adds	r1, r2, r2
 8006dce:	61b9      	str	r1, [r7, #24]
 8006dd0:	415b      	adcs	r3, r3
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dd8:	4641      	mov	r1, r8
 8006dda:	1851      	adds	r1, r2, r1
 8006ddc:	6139      	str	r1, [r7, #16]
 8006dde:	4649      	mov	r1, r9
 8006de0:	414b      	adcs	r3, r1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006df0:	4659      	mov	r1, fp
 8006df2:	00cb      	lsls	r3, r1, #3
 8006df4:	4651      	mov	r1, sl
 8006df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfa:	4651      	mov	r1, sl
 8006dfc:	00ca      	lsls	r2, r1, #3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	4642      	mov	r2, r8
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	460a      	mov	r2, r1
 8006e10:	eb42 0303 	adc.w	r3, r2, r3
 8006e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e30:	4649      	mov	r1, r9
 8006e32:	008b      	lsls	r3, r1, #2
 8006e34:	4641      	mov	r1, r8
 8006e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	008a      	lsls	r2, r1, #2
 8006e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e42:	f7f9 feb1 	bl	8000ba8 <__aeabi_uldivmod>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4b38      	ldr	r3, [pc, #224]	; (8006f30 <UART_SetConfig+0x4e4>)
 8006e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2264      	movs	r2, #100	; 0x64
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	3332      	adds	r3, #50	; 0x32
 8006e60:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <UART_SetConfig+0x4e4>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e6c:	441c      	add	r4, r3
 8006e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e72:	2200      	movs	r2, #0
 8006e74:	673b      	str	r3, [r7, #112]	; 0x70
 8006e76:	677a      	str	r2, [r7, #116]	; 0x74
 8006e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	415b      	adcs	r3, r3
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	1851      	adds	r1, r2, r1
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	4649      	mov	r1, r9
 8006e94:	414b      	adcs	r3, r1
 8006e96:	607b      	str	r3, [r7, #4]
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	00cb      	lsls	r3, r1, #3
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eae:	4651      	mov	r1, sl
 8006eb0:	00ca      	lsls	r2, r1, #3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	eb42 0303 	adc.w	r3, r2, r3
 8006ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed2:	667a      	str	r2, [r7, #100]	; 0x64
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	008b      	lsls	r3, r1, #2
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eea:	4641      	mov	r1, r8
 8006eec:	008a      	lsls	r2, r1, #2
 8006eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ef2:	f7f9 fe59 	bl	8000ba8 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <UART_SetConfig+0x4e4>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <UART_SetConfig+0x4e4>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4422      	add	r2, r4
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f30:	51eb851f 	.word	0x51eb851f

08006f34 <LL_GPIO_SetPinMode>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	b08b      	sub	sp, #44	; 0x2c
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	fa93 f3a3 	rbit	r3, r3
 8006f4e:	613b      	str	r3, [r7, #16]
  return result;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006f5a:	2320      	movs	r3, #32
 8006f5c:	e003      	b.n	8006f66 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	fab3 f383 	clz	r3, r3
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	2103      	movs	r1, #3
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	401a      	ands	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	61fb      	str	r3, [r7, #28]
  return result;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006f88:	2320      	movs	r3, #32
 8006f8a:	e003      	b.n	8006f94 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	fab3 f383 	clz	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	372c      	adds	r7, #44	; 0x2c
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <LL_GPIO_SetPinOutputType>:
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	605a      	str	r2, [r3, #4]
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <LL_GPIO_SetPinSpeed>:
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b08b      	sub	sp, #44	; 0x2c
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	fa93 f3a3 	rbit	r3, r3
 8006ff8:	613b      	str	r3, [r7, #16]
  return result;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007004:	2320      	movs	r3, #32
 8007006:	e003      	b.n	8007010 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	fab3 f383 	clz	r3, r3
 800700e:	b2db      	uxtb	r3, r3
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	2103      	movs	r1, #3
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	43db      	mvns	r3, r3
 800701a:	401a      	ands	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	fa93 f3a3 	rbit	r3, r3
 8007026:	61fb      	str	r3, [r7, #28]
  return result;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007032:	2320      	movs	r3, #32
 8007034:	e003      	b.n	800703e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	fab3 f383 	clz	r3, r3
 800703c:	b2db      	uxtb	r3, r3
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	fa01 f303 	lsl.w	r3, r1, r3
 8007046:	431a      	orrs	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	372c      	adds	r7, #44	; 0x2c
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <LL_GPIO_SetPinPull>:
{
 8007058:	b480      	push	{r7}
 800705a:	b08b      	sub	sp, #44	; 0x2c
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	fa93 f3a3 	rbit	r3, r3
 8007072:	613b      	str	r3, [r7, #16]
  return result;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800707e:	2320      	movs	r3, #32
 8007080:	e003      	b.n	800708a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	b2db      	uxtb	r3, r3
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	2103      	movs	r1, #3
 800708e:	fa01 f303 	lsl.w	r3, r1, r3
 8007092:	43db      	mvns	r3, r3
 8007094:	401a      	ands	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	fa93 f3a3 	rbit	r3, r3
 80070a0:	61fb      	str	r3, [r7, #28]
  return result;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80070ac:	2320      	movs	r3, #32
 80070ae:	e003      	b.n	80070b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	fab3 f383 	clz	r3, r3
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60da      	str	r2, [r3, #12]
}
 80070c6:	bf00      	nop
 80070c8:	372c      	adds	r7, #44	; 0x2c
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <LL_GPIO_SetAFPin_0_7>:
{
 80070d2:	b480      	push	{r7}
 80070d4:	b08b      	sub	sp, #44	; 0x2c
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	fa93 f3a3 	rbit	r3, r3
 80070ec:	613b      	str	r3, [r7, #16]
  return result;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80070f8:	2320      	movs	r3, #32
 80070fa:	e003      	b.n	8007104 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	fab3 f383 	clz	r3, r3
 8007102:	b2db      	uxtb	r3, r3
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	210f      	movs	r1, #15
 8007108:	fa01 f303 	lsl.w	r3, r1, r3
 800710c:	43db      	mvns	r3, r3
 800710e:	401a      	ands	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	fa93 f3a3 	rbit	r3, r3
 800711a:	61fb      	str	r3, [r7, #28]
  return result;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007126:	2320      	movs	r3, #32
 8007128:	e003      	b.n	8007132 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	fab3 f383 	clz	r3, r3
 8007130:	b2db      	uxtb	r3, r3
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	431a      	orrs	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	621a      	str	r2, [r3, #32]
}
 8007140:	bf00      	nop
 8007142:	372c      	adds	r7, #44	; 0x2c
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <LL_GPIO_SetAFPin_8_15>:
{
 800714c:	b480      	push	{r7}
 800714e:	b08b      	sub	sp, #44	; 0x2c
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	613b      	str	r3, [r7, #16]
  return result;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007174:	2320      	movs	r3, #32
 8007176:	e003      	b.n	8007180 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	fab3 f383 	clz	r3, r3
 800717e:	b2db      	uxtb	r3, r3
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	210f      	movs	r1, #15
 8007184:	fa01 f303 	lsl.w	r3, r1, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	401a      	ands	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	fa93 f3a3 	rbit	r3, r3
 8007198:	61fb      	str	r3, [r7, #28]
  return result;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e003      	b.n	80071b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	fab3 f383 	clz	r3, r3
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	fa01 f303 	lsl.w	r3, r1, r3
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80071be:	bf00      	nop
 80071c0:	372c      	adds	r7, #44	; 0x2c
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b08a      	sub	sp, #40	; 0x28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80071d8:	2300      	movs	r3, #0
 80071da:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	fa93 f3a3 	rbit	r3, r3
 80071e8:	617b      	str	r3, [r7, #20]
  return result;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <LL_GPIO_Init+0x2e>
    return 32U;
 80071f4:	2320      	movs	r3, #32
 80071f6:	e003      	b.n	8007200 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	fab3 f383 	clz	r3, r3
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007202:	e057      	b.n	80072b4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	2101      	movs	r1, #1
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	4013      	ands	r3, r2
 8007212:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d049      	beq.n	80072ae <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d003      	beq.n	800722a <LL_GPIO_Init+0x60>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d10d      	bne.n	8007246 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	461a      	mov	r2, r3
 8007230:	6a39      	ldr	r1, [r7, #32]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fed3 	bl	8006fde <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	461a      	mov	r2, r3
 800723e:	6a39      	ldr	r1, [r7, #32]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff feb4 	bl	8006fae <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	461a      	mov	r2, r3
 800724c:	6a39      	ldr	r1, [r7, #32]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ff02 	bl	8007058 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d121      	bne.n	80072a0 <LL_GPIO_Init+0xd6>
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	fa93 f3a3 	rbit	r3, r3
 8007266:	60bb      	str	r3, [r7, #8]
  return result;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <LL_GPIO_Init+0xac>
    return 32U;
 8007272:	2320      	movs	r3, #32
 8007274:	e003      	b.n	800727e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	fab3 f383 	clz	r3, r3
 800727c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800727e:	2b07      	cmp	r3, #7
 8007280:	d807      	bhi.n	8007292 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	461a      	mov	r2, r3
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff21 	bl	80070d2 <LL_GPIO_SetAFPin_0_7>
 8007290:	e006      	b.n	80072a0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	461a      	mov	r2, r3
 8007298:	6a39      	ldr	r1, [r7, #32]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ff56 	bl	800714c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6a39      	ldr	r1, [r7, #32]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fe43 	bl	8006f34 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	3301      	adds	r3, #1
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	fa22 f303 	lsr.w	r3, r2, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1a0      	bne.n	8007204 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <LL_SPI_IsEnabled>:
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	d101      	bne.n	80072e4 <LL_SPI_IsEnabled+0x18>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <LL_SPI_IsEnabled+0x1a>
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <LL_SPI_SetCRCPolynomial>:
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	611a      	str	r2, [r3, #16]
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ffd3 	bl	80072cc <LL_SPI_IsEnabled>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d139      	bne.n	80073a0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007334:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	6811      	ldr	r1, [r2, #0]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	6852      	ldr	r2, [r2, #4]
 8007340:	4311      	orrs	r1, r2
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	6892      	ldr	r2, [r2, #8]
 8007346:	4311      	orrs	r1, r2
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	68d2      	ldr	r2, [r2, #12]
 800734c:	4311      	orrs	r1, r2
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	6912      	ldr	r2, [r2, #16]
 8007352:	4311      	orrs	r1, r2
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	6952      	ldr	r2, [r2, #20]
 8007358:	4311      	orrs	r1, r2
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	6992      	ldr	r2, [r2, #24]
 800735e:	4311      	orrs	r1, r2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	69d2      	ldr	r2, [r2, #28]
 8007364:	4311      	orrs	r1, r2
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	6a12      	ldr	r2, [r2, #32]
 800736a:	430a      	orrs	r2, r1
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f023 0204 	bic.w	r2, r3, #4
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	d105      	bne.n	800739c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff ffab 	bl	80072f2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	61da      	str	r2, [r3, #28]
  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <__cvt>:
 80073b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ba:	ec55 4b10 	vmov	r4, r5, d0
 80073be:	2d00      	cmp	r5, #0
 80073c0:	460e      	mov	r6, r1
 80073c2:	4619      	mov	r1, r3
 80073c4:	462b      	mov	r3, r5
 80073c6:	bfbb      	ittet	lt
 80073c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073cc:	461d      	movlt	r5, r3
 80073ce:	2300      	movge	r3, #0
 80073d0:	232d      	movlt	r3, #45	; 0x2d
 80073d2:	700b      	strb	r3, [r1, #0]
 80073d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073da:	4691      	mov	r9, r2
 80073dc:	f023 0820 	bic.w	r8, r3, #32
 80073e0:	bfbc      	itt	lt
 80073e2:	4622      	movlt	r2, r4
 80073e4:	4614      	movlt	r4, r2
 80073e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073ea:	d005      	beq.n	80073f8 <__cvt+0x42>
 80073ec:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073f0:	d100      	bne.n	80073f4 <__cvt+0x3e>
 80073f2:	3601      	adds	r6, #1
 80073f4:	2102      	movs	r1, #2
 80073f6:	e000      	b.n	80073fa <__cvt+0x44>
 80073f8:	2103      	movs	r1, #3
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	ab02      	add	r3, sp, #8
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	ec45 4b10 	vmov	d0, r4, r5
 8007406:	4653      	mov	r3, sl
 8007408:	4632      	mov	r2, r6
 800740a:	f000 ff4d 	bl	80082a8 <_dtoa_r>
 800740e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007412:	4607      	mov	r7, r0
 8007414:	d102      	bne.n	800741c <__cvt+0x66>
 8007416:	f019 0f01 	tst.w	r9, #1
 800741a:	d022      	beq.n	8007462 <__cvt+0xac>
 800741c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007420:	eb07 0906 	add.w	r9, r7, r6
 8007424:	d110      	bne.n	8007448 <__cvt+0x92>
 8007426:	783b      	ldrb	r3, [r7, #0]
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d10a      	bne.n	8007442 <__cvt+0x8c>
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4620      	mov	r0, r4
 8007432:	4629      	mov	r1, r5
 8007434:	f7f9 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007438:	b918      	cbnz	r0, 8007442 <__cvt+0x8c>
 800743a:	f1c6 0601 	rsb	r6, r6, #1
 800743e:	f8ca 6000 	str.w	r6, [sl]
 8007442:	f8da 3000 	ldr.w	r3, [sl]
 8007446:	4499      	add	r9, r3
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4620      	mov	r0, r4
 800744e:	4629      	mov	r1, r5
 8007450:	f7f9 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007454:	b108      	cbz	r0, 800745a <__cvt+0xa4>
 8007456:	f8cd 900c 	str.w	r9, [sp, #12]
 800745a:	2230      	movs	r2, #48	; 0x30
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	454b      	cmp	r3, r9
 8007460:	d307      	bcc.n	8007472 <__cvt+0xbc>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007466:	1bdb      	subs	r3, r3, r7
 8007468:	4638      	mov	r0, r7
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	b004      	add	sp, #16
 800746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	9103      	str	r1, [sp, #12]
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e7f0      	b.n	800745c <__cvt+0xa6>

0800747a <__exponent>:
 800747a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800747c:	4603      	mov	r3, r0
 800747e:	2900      	cmp	r1, #0
 8007480:	bfb8      	it	lt
 8007482:	4249      	neglt	r1, r1
 8007484:	f803 2b02 	strb.w	r2, [r3], #2
 8007488:	bfb4      	ite	lt
 800748a:	222d      	movlt	r2, #45	; 0x2d
 800748c:	222b      	movge	r2, #43	; 0x2b
 800748e:	2909      	cmp	r1, #9
 8007490:	7042      	strb	r2, [r0, #1]
 8007492:	dd2a      	ble.n	80074ea <__exponent+0x70>
 8007494:	f10d 0207 	add.w	r2, sp, #7
 8007498:	4617      	mov	r7, r2
 800749a:	260a      	movs	r6, #10
 800749c:	4694      	mov	ip, r2
 800749e:	fb91 f5f6 	sdiv	r5, r1, r6
 80074a2:	fb06 1415 	mls	r4, r6, r5, r1
 80074a6:	3430      	adds	r4, #48	; 0x30
 80074a8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074ac:	460c      	mov	r4, r1
 80074ae:	2c63      	cmp	r4, #99	; 0x63
 80074b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80074b4:	4629      	mov	r1, r5
 80074b6:	dcf1      	bgt.n	800749c <__exponent+0x22>
 80074b8:	3130      	adds	r1, #48	; 0x30
 80074ba:	f1ac 0402 	sub.w	r4, ip, #2
 80074be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074c2:	1c41      	adds	r1, r0, #1
 80074c4:	4622      	mov	r2, r4
 80074c6:	42ba      	cmp	r2, r7
 80074c8:	d30a      	bcc.n	80074e0 <__exponent+0x66>
 80074ca:	f10d 0209 	add.w	r2, sp, #9
 80074ce:	eba2 020c 	sub.w	r2, r2, ip
 80074d2:	42bc      	cmp	r4, r7
 80074d4:	bf88      	it	hi
 80074d6:	2200      	movhi	r2, #0
 80074d8:	4413      	add	r3, r2
 80074da:	1a18      	subs	r0, r3, r0
 80074dc:	b003      	add	sp, #12
 80074de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074e4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074e8:	e7ed      	b.n	80074c6 <__exponent+0x4c>
 80074ea:	2330      	movs	r3, #48	; 0x30
 80074ec:	3130      	adds	r1, #48	; 0x30
 80074ee:	7083      	strb	r3, [r0, #2]
 80074f0:	70c1      	strb	r1, [r0, #3]
 80074f2:	1d03      	adds	r3, r0, #4
 80074f4:	e7f1      	b.n	80074da <__exponent+0x60>
	...

080074f8 <_printf_float>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	ed2d 8b02 	vpush	{d8}
 8007500:	b08d      	sub	sp, #52	; 0x34
 8007502:	460c      	mov	r4, r1
 8007504:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007508:	4616      	mov	r6, r2
 800750a:	461f      	mov	r7, r3
 800750c:	4605      	mov	r5, r0
 800750e:	f000 fdc9 	bl	80080a4 <_localeconv_r>
 8007512:	f8d0 a000 	ldr.w	sl, [r0]
 8007516:	4650      	mov	r0, sl
 8007518:	f7f8 feaa 	bl	8000270 <strlen>
 800751c:	2300      	movs	r3, #0
 800751e:	930a      	str	r3, [sp, #40]	; 0x28
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	9305      	str	r3, [sp, #20]
 8007524:	f8d8 3000 	ldr.w	r3, [r8]
 8007528:	f894 b018 	ldrb.w	fp, [r4, #24]
 800752c:	3307      	adds	r3, #7
 800752e:	f023 0307 	bic.w	r3, r3, #7
 8007532:	f103 0208 	add.w	r2, r3, #8
 8007536:	f8c8 2000 	str.w	r2, [r8]
 800753a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800753e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007542:	9307      	str	r3, [sp, #28]
 8007544:	f8cd 8018 	str.w	r8, [sp, #24]
 8007548:	ee08 0a10 	vmov	s16, r0
 800754c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007554:	4b9e      	ldr	r3, [pc, #632]	; (80077d0 <_printf_float+0x2d8>)
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	f7f9 fae7 	bl	8000b2c <__aeabi_dcmpun>
 800755e:	bb88      	cbnz	r0, 80075c4 <_printf_float+0xcc>
 8007560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007564:	4b9a      	ldr	r3, [pc, #616]	; (80077d0 <_printf_float+0x2d8>)
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	f7f9 fac1 	bl	8000af0 <__aeabi_dcmple>
 800756e:	bb48      	cbnz	r0, 80075c4 <_printf_float+0xcc>
 8007570:	2200      	movs	r2, #0
 8007572:	2300      	movs	r3, #0
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f9 fab0 	bl	8000adc <__aeabi_dcmplt>
 800757c:	b110      	cbz	r0, 8007584 <_printf_float+0x8c>
 800757e:	232d      	movs	r3, #45	; 0x2d
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007584:	4a93      	ldr	r2, [pc, #588]	; (80077d4 <_printf_float+0x2dc>)
 8007586:	4b94      	ldr	r3, [pc, #592]	; (80077d8 <_printf_float+0x2e0>)
 8007588:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800758c:	bf94      	ite	ls
 800758e:	4690      	movls	r8, r2
 8007590:	4698      	movhi	r8, r3
 8007592:	2303      	movs	r3, #3
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	9b05      	ldr	r3, [sp, #20]
 8007598:	f023 0304 	bic.w	r3, r3, #4
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	f04f 0900 	mov.w	r9, #0
 80075a2:	9700      	str	r7, [sp, #0]
 80075a4:	4633      	mov	r3, r6
 80075a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075a8:	4621      	mov	r1, r4
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 f9da 	bl	8007964 <_printf_common>
 80075b0:	3001      	adds	r0, #1
 80075b2:	f040 8090 	bne.w	80076d6 <_printf_float+0x1de>
 80075b6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ba:	b00d      	add	sp, #52	; 0x34
 80075bc:	ecbd 8b02 	vpop	{d8}
 80075c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	4640      	mov	r0, r8
 80075ca:	4649      	mov	r1, r9
 80075cc:	f7f9 faae 	bl	8000b2c <__aeabi_dcmpun>
 80075d0:	b140      	cbz	r0, 80075e4 <_printf_float+0xec>
 80075d2:	464b      	mov	r3, r9
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bfbc      	itt	lt
 80075d8:	232d      	movlt	r3, #45	; 0x2d
 80075da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075de:	4a7f      	ldr	r2, [pc, #508]	; (80077dc <_printf_float+0x2e4>)
 80075e0:	4b7f      	ldr	r3, [pc, #508]	; (80077e0 <_printf_float+0x2e8>)
 80075e2:	e7d1      	b.n	8007588 <_printf_float+0x90>
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075ea:	9206      	str	r2, [sp, #24]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	d13f      	bne.n	8007670 <_printf_float+0x178>
 80075f0:	2306      	movs	r3, #6
 80075f2:	6063      	str	r3, [r4, #4]
 80075f4:	9b05      	ldr	r3, [sp, #20]
 80075f6:	6861      	ldr	r1, [r4, #4]
 80075f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075fc:	2300      	movs	r3, #0
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	ab0a      	add	r3, sp, #40	; 0x28
 8007602:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007606:	ab09      	add	r3, sp, #36	; 0x24
 8007608:	ec49 8b10 	vmov	d0, r8, r9
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	6022      	str	r2, [r4, #0]
 8007610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff fece 	bl	80073b6 <__cvt>
 800761a:	9b06      	ldr	r3, [sp, #24]
 800761c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800761e:	2b47      	cmp	r3, #71	; 0x47
 8007620:	4680      	mov	r8, r0
 8007622:	d108      	bne.n	8007636 <_printf_float+0x13e>
 8007624:	1cc8      	adds	r0, r1, #3
 8007626:	db02      	blt.n	800762e <_printf_float+0x136>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	4299      	cmp	r1, r3
 800762c:	dd41      	ble.n	80076b2 <_printf_float+0x1ba>
 800762e:	f1ab 0302 	sub.w	r3, fp, #2
 8007632:	fa5f fb83 	uxtb.w	fp, r3
 8007636:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800763a:	d820      	bhi.n	800767e <_printf_float+0x186>
 800763c:	3901      	subs	r1, #1
 800763e:	465a      	mov	r2, fp
 8007640:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007644:	9109      	str	r1, [sp, #36]	; 0x24
 8007646:	f7ff ff18 	bl	800747a <__exponent>
 800764a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800764c:	1813      	adds	r3, r2, r0
 800764e:	2a01      	cmp	r2, #1
 8007650:	4681      	mov	r9, r0
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	dc02      	bgt.n	800765c <_printf_float+0x164>
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	07d2      	lsls	r2, r2, #31
 800765a:	d501      	bpl.n	8007660 <_printf_float+0x168>
 800765c:	3301      	adds	r3, #1
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007664:	2b00      	cmp	r3, #0
 8007666:	d09c      	beq.n	80075a2 <_printf_float+0xaa>
 8007668:	232d      	movs	r3, #45	; 0x2d
 800766a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766e:	e798      	b.n	80075a2 <_printf_float+0xaa>
 8007670:	9a06      	ldr	r2, [sp, #24]
 8007672:	2a47      	cmp	r2, #71	; 0x47
 8007674:	d1be      	bne.n	80075f4 <_printf_float+0xfc>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1bc      	bne.n	80075f4 <_printf_float+0xfc>
 800767a:	2301      	movs	r3, #1
 800767c:	e7b9      	b.n	80075f2 <_printf_float+0xfa>
 800767e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007682:	d118      	bne.n	80076b6 <_printf_float+0x1be>
 8007684:	2900      	cmp	r1, #0
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	dd0b      	ble.n	80076a2 <_printf_float+0x1aa>
 800768a:	6121      	str	r1, [r4, #16]
 800768c:	b913      	cbnz	r3, 8007694 <_printf_float+0x19c>
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	07d0      	lsls	r0, r2, #31
 8007692:	d502      	bpl.n	800769a <_printf_float+0x1a2>
 8007694:	3301      	adds	r3, #1
 8007696:	440b      	add	r3, r1
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	65a1      	str	r1, [r4, #88]	; 0x58
 800769c:	f04f 0900 	mov.w	r9, #0
 80076a0:	e7de      	b.n	8007660 <_printf_float+0x168>
 80076a2:	b913      	cbnz	r3, 80076aa <_printf_float+0x1b2>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	07d2      	lsls	r2, r2, #31
 80076a8:	d501      	bpl.n	80076ae <_printf_float+0x1b6>
 80076aa:	3302      	adds	r3, #2
 80076ac:	e7f4      	b.n	8007698 <_printf_float+0x1a0>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7f2      	b.n	8007698 <_printf_float+0x1a0>
 80076b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	4299      	cmp	r1, r3
 80076ba:	db05      	blt.n	80076c8 <_printf_float+0x1d0>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	6121      	str	r1, [r4, #16]
 80076c0:	07d8      	lsls	r0, r3, #31
 80076c2:	d5ea      	bpl.n	800769a <_printf_float+0x1a2>
 80076c4:	1c4b      	adds	r3, r1, #1
 80076c6:	e7e7      	b.n	8007698 <_printf_float+0x1a0>
 80076c8:	2900      	cmp	r1, #0
 80076ca:	bfd4      	ite	le
 80076cc:	f1c1 0202 	rsble	r2, r1, #2
 80076d0:	2201      	movgt	r2, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	e7e0      	b.n	8007698 <_printf_float+0x1a0>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	055a      	lsls	r2, r3, #21
 80076da:	d407      	bmi.n	80076ec <_printf_float+0x1f4>
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	4642      	mov	r2, r8
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	d12c      	bne.n	8007744 <_printf_float+0x24c>
 80076ea:	e764      	b.n	80075b6 <_printf_float+0xbe>
 80076ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076f0:	f240 80e0 	bls.w	80078b4 <_printf_float+0x3bc>
 80076f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	f7f9 f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007700:	2800      	cmp	r0, #0
 8007702:	d034      	beq.n	800776e <_printf_float+0x276>
 8007704:	4a37      	ldr	r2, [pc, #220]	; (80077e4 <_printf_float+0x2ec>)
 8007706:	2301      	movs	r3, #1
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	f43f af51 	beq.w	80075b6 <_printf_float+0xbe>
 8007714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007718:	429a      	cmp	r2, r3
 800771a:	db02      	blt.n	8007722 <_printf_float+0x22a>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07d8      	lsls	r0, r3, #31
 8007720:	d510      	bpl.n	8007744 <_printf_float+0x24c>
 8007722:	ee18 3a10 	vmov	r3, s16
 8007726:	4652      	mov	r2, sl
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af41 	beq.w	80075b6 <_printf_float+0xbe>
 8007734:	f04f 0800 	mov.w	r8, #0
 8007738:	f104 091a 	add.w	r9, r4, #26
 800773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773e:	3b01      	subs	r3, #1
 8007740:	4543      	cmp	r3, r8
 8007742:	dc09      	bgt.n	8007758 <_printf_float+0x260>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	079b      	lsls	r3, r3, #30
 8007748:	f100 8107 	bmi.w	800795a <_printf_float+0x462>
 800774c:	68e0      	ldr	r0, [r4, #12]
 800774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007750:	4298      	cmp	r0, r3
 8007752:	bfb8      	it	lt
 8007754:	4618      	movlt	r0, r3
 8007756:	e730      	b.n	80075ba <_printf_float+0xc2>
 8007758:	2301      	movs	r3, #1
 800775a:	464a      	mov	r2, r9
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af27 	beq.w	80075b6 <_printf_float+0xbe>
 8007768:	f108 0801 	add.w	r8, r8, #1
 800776c:	e7e6      	b.n	800773c <_printf_float+0x244>
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc39      	bgt.n	80077e8 <_printf_float+0x2f0>
 8007774:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <_printf_float+0x2ec>)
 8007776:	2301      	movs	r3, #1
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af19 	beq.w	80075b6 <_printf_float+0xbe>
 8007784:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007788:	4313      	orrs	r3, r2
 800778a:	d102      	bne.n	8007792 <_printf_float+0x29a>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	07d9      	lsls	r1, r3, #31
 8007790:	d5d8      	bpl.n	8007744 <_printf_float+0x24c>
 8007792:	ee18 3a10 	vmov	r3, s16
 8007796:	4652      	mov	r2, sl
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af09 	beq.w	80075b6 <_printf_float+0xbe>
 80077a4:	f04f 0900 	mov.w	r9, #0
 80077a8:	f104 0a1a 	add.w	sl, r4, #26
 80077ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ae:	425b      	negs	r3, r3
 80077b0:	454b      	cmp	r3, r9
 80077b2:	dc01      	bgt.n	80077b8 <_printf_float+0x2c0>
 80077b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b6:	e792      	b.n	80076de <_printf_float+0x1e6>
 80077b8:	2301      	movs	r3, #1
 80077ba:	4652      	mov	r2, sl
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f aef7 	beq.w	80075b6 <_printf_float+0xbe>
 80077c8:	f109 0901 	add.w	r9, r9, #1
 80077cc:	e7ee      	b.n	80077ac <_printf_float+0x2b4>
 80077ce:	bf00      	nop
 80077d0:	7fefffff 	.word	0x7fefffff
 80077d4:	0800a030 	.word	0x0800a030
 80077d8:	0800a034 	.word	0x0800a034
 80077dc:	0800a038 	.word	0x0800a038
 80077e0:	0800a03c 	.word	0x0800a03c
 80077e4:	0800a040 	.word	0x0800a040
 80077e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077ec:	429a      	cmp	r2, r3
 80077ee:	bfa8      	it	ge
 80077f0:	461a      	movge	r2, r3
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	4691      	mov	r9, r2
 80077f6:	dc37      	bgt.n	8007868 <_printf_float+0x370>
 80077f8:	f04f 0b00 	mov.w	fp, #0
 80077fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007800:	f104 021a 	add.w	r2, r4, #26
 8007804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	eba3 0309 	sub.w	r3, r3, r9
 800780c:	455b      	cmp	r3, fp
 800780e:	dc33      	bgt.n	8007878 <_printf_float+0x380>
 8007810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007814:	429a      	cmp	r2, r3
 8007816:	db3b      	blt.n	8007890 <_printf_float+0x398>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	07da      	lsls	r2, r3, #31
 800781c:	d438      	bmi.n	8007890 <_printf_float+0x398>
 800781e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007822:	eba2 0903 	sub.w	r9, r2, r3
 8007826:	9b05      	ldr	r3, [sp, #20]
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	4591      	cmp	r9, r2
 800782c:	bfa8      	it	ge
 800782e:	4691      	movge	r9, r2
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	dc35      	bgt.n	80078a2 <_printf_float+0x3aa>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783e:	f104 0a1a 	add.w	sl, r4, #26
 8007842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	eba3 0309 	sub.w	r3, r3, r9
 800784c:	4543      	cmp	r3, r8
 800784e:	f77f af79 	ble.w	8007744 <_printf_float+0x24c>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f aeaa 	beq.w	80075b6 <_printf_float+0xbe>
 8007862:	f108 0801 	add.w	r8, r8, #1
 8007866:	e7ec      	b.n	8007842 <_printf_float+0x34a>
 8007868:	4613      	mov	r3, r2
 800786a:	4631      	mov	r1, r6
 800786c:	4642      	mov	r2, r8
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	d1c0      	bne.n	80077f8 <_printf_float+0x300>
 8007876:	e69e      	b.n	80075b6 <_printf_float+0xbe>
 8007878:	2301      	movs	r3, #1
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	9205      	str	r2, [sp, #20]
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	f43f ae97 	beq.w	80075b6 <_printf_float+0xbe>
 8007888:	9a05      	ldr	r2, [sp, #20]
 800788a:	f10b 0b01 	add.w	fp, fp, #1
 800788e:	e7b9      	b.n	8007804 <_printf_float+0x30c>
 8007890:	ee18 3a10 	vmov	r3, s16
 8007894:	4652      	mov	r2, sl
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	d1be      	bne.n	800781e <_printf_float+0x326>
 80078a0:	e689      	b.n	80075b6 <_printf_float+0xbe>
 80078a2:	9a05      	ldr	r2, [sp, #20]
 80078a4:	464b      	mov	r3, r9
 80078a6:	4442      	add	r2, r8
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	d1c1      	bne.n	8007836 <_printf_float+0x33e>
 80078b2:	e680      	b.n	80075b6 <_printf_float+0xbe>
 80078b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b6:	2a01      	cmp	r2, #1
 80078b8:	dc01      	bgt.n	80078be <_printf_float+0x3c6>
 80078ba:	07db      	lsls	r3, r3, #31
 80078bc:	d53a      	bpl.n	8007934 <_printf_float+0x43c>
 80078be:	2301      	movs	r3, #1
 80078c0:	4642      	mov	r2, r8
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f ae74 	beq.w	80075b6 <_printf_float+0xbe>
 80078ce:	ee18 3a10 	vmov	r3, s16
 80078d2:	4652      	mov	r2, sl
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f ae6b 	beq.w	80075b6 <_printf_float+0xbe>
 80078e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078ec:	f7f9 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f0:	b9d8      	cbnz	r0, 800792a <_printf_float+0x432>
 80078f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078f6:	f108 0201 	add.w	r2, r8, #1
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	d10e      	bne.n	8007922 <_printf_float+0x42a>
 8007904:	e657      	b.n	80075b6 <_printf_float+0xbe>
 8007906:	2301      	movs	r3, #1
 8007908:	4652      	mov	r2, sl
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f ae50 	beq.w	80075b6 <_printf_float+0xbe>
 8007916:	f108 0801 	add.w	r8, r8, #1
 800791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791c:	3b01      	subs	r3, #1
 800791e:	4543      	cmp	r3, r8
 8007920:	dcf1      	bgt.n	8007906 <_printf_float+0x40e>
 8007922:	464b      	mov	r3, r9
 8007924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007928:	e6da      	b.n	80076e0 <_printf_float+0x1e8>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	f104 0a1a 	add.w	sl, r4, #26
 8007932:	e7f2      	b.n	800791a <_printf_float+0x422>
 8007934:	2301      	movs	r3, #1
 8007936:	4642      	mov	r2, r8
 8007938:	e7df      	b.n	80078fa <_printf_float+0x402>
 800793a:	2301      	movs	r3, #1
 800793c:	464a      	mov	r2, r9
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae36 	beq.w	80075b6 <_printf_float+0xbe>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	68e3      	ldr	r3, [r4, #12]
 8007950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007952:	1a5b      	subs	r3, r3, r1
 8007954:	4543      	cmp	r3, r8
 8007956:	dcf0      	bgt.n	800793a <_printf_float+0x442>
 8007958:	e6f8      	b.n	800774c <_printf_float+0x254>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	f104 0919 	add.w	r9, r4, #25
 8007962:	e7f4      	b.n	800794e <_printf_float+0x456>

08007964 <_printf_common>:
 8007964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	4616      	mov	r6, r2
 800796a:	4699      	mov	r9, r3
 800796c:	688a      	ldr	r2, [r1, #8]
 800796e:	690b      	ldr	r3, [r1, #16]
 8007970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007974:	4293      	cmp	r3, r2
 8007976:	bfb8      	it	lt
 8007978:	4613      	movlt	r3, r2
 800797a:	6033      	str	r3, [r6, #0]
 800797c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007980:	4607      	mov	r7, r0
 8007982:	460c      	mov	r4, r1
 8007984:	b10a      	cbz	r2, 800798a <_printf_common+0x26>
 8007986:	3301      	adds	r3, #1
 8007988:	6033      	str	r3, [r6, #0]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	0699      	lsls	r1, r3, #26
 800798e:	bf42      	ittt	mi
 8007990:	6833      	ldrmi	r3, [r6, #0]
 8007992:	3302      	addmi	r3, #2
 8007994:	6033      	strmi	r3, [r6, #0]
 8007996:	6825      	ldr	r5, [r4, #0]
 8007998:	f015 0506 	ands.w	r5, r5, #6
 800799c:	d106      	bne.n	80079ac <_printf_common+0x48>
 800799e:	f104 0a19 	add.w	sl, r4, #25
 80079a2:	68e3      	ldr	r3, [r4, #12]
 80079a4:	6832      	ldr	r2, [r6, #0]
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	42ab      	cmp	r3, r5
 80079aa:	dc26      	bgt.n	80079fa <_printf_common+0x96>
 80079ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b0:	1e13      	subs	r3, r2, #0
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	bf18      	it	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	0692      	lsls	r2, r2, #26
 80079ba:	d42b      	bmi.n	8007a14 <_printf_common+0xb0>
 80079bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c0:	4649      	mov	r1, r9
 80079c2:	4638      	mov	r0, r7
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d01e      	beq.n	8007a08 <_printf_common+0xa4>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	f003 0306 	and.w	r3, r3, #6
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	bf02      	ittt	eq
 80079d6:	68e5      	ldreq	r5, [r4, #12]
 80079d8:	6833      	ldreq	r3, [r6, #0]
 80079da:	1aed      	subeq	r5, r5, r3
 80079dc:	68a3      	ldr	r3, [r4, #8]
 80079de:	bf0c      	ite	eq
 80079e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e4:	2500      	movne	r5, #0
 80079e6:	4293      	cmp	r3, r2
 80079e8:	bfc4      	itt	gt
 80079ea:	1a9b      	subgt	r3, r3, r2
 80079ec:	18ed      	addgt	r5, r5, r3
 80079ee:	2600      	movs	r6, #0
 80079f0:	341a      	adds	r4, #26
 80079f2:	42b5      	cmp	r5, r6
 80079f4:	d11a      	bne.n	8007a2c <_printf_common+0xc8>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e008      	b.n	8007a0c <_printf_common+0xa8>
 80079fa:	2301      	movs	r3, #1
 80079fc:	4652      	mov	r2, sl
 80079fe:	4649      	mov	r1, r9
 8007a00:	4638      	mov	r0, r7
 8007a02:	47c0      	blx	r8
 8007a04:	3001      	adds	r0, #1
 8007a06:	d103      	bne.n	8007a10 <_printf_common+0xac>
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a10:	3501      	adds	r5, #1
 8007a12:	e7c6      	b.n	80079a2 <_printf_common+0x3e>
 8007a14:	18e1      	adds	r1, r4, r3
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	2030      	movs	r0, #48	; 0x30
 8007a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a1e:	4422      	add	r2, r4
 8007a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a28:	3302      	adds	r3, #2
 8007a2a:	e7c7      	b.n	80079bc <_printf_common+0x58>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4622      	mov	r2, r4
 8007a30:	4649      	mov	r1, r9
 8007a32:	4638      	mov	r0, r7
 8007a34:	47c0      	blx	r8
 8007a36:	3001      	adds	r0, #1
 8007a38:	d0e6      	beq.n	8007a08 <_printf_common+0xa4>
 8007a3a:	3601      	adds	r6, #1
 8007a3c:	e7d9      	b.n	80079f2 <_printf_common+0x8e>
	...

08007a40 <_printf_i>:
 8007a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	7e0f      	ldrb	r7, [r1, #24]
 8007a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a48:	2f78      	cmp	r7, #120	; 0x78
 8007a4a:	4691      	mov	r9, r2
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	469a      	mov	sl, r3
 8007a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a56:	d807      	bhi.n	8007a68 <_printf_i+0x28>
 8007a58:	2f62      	cmp	r7, #98	; 0x62
 8007a5a:	d80a      	bhi.n	8007a72 <_printf_i+0x32>
 8007a5c:	2f00      	cmp	r7, #0
 8007a5e:	f000 80d4 	beq.w	8007c0a <_printf_i+0x1ca>
 8007a62:	2f58      	cmp	r7, #88	; 0x58
 8007a64:	f000 80c0 	beq.w	8007be8 <_printf_i+0x1a8>
 8007a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a70:	e03a      	b.n	8007ae8 <_printf_i+0xa8>
 8007a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a76:	2b15      	cmp	r3, #21
 8007a78:	d8f6      	bhi.n	8007a68 <_printf_i+0x28>
 8007a7a:	a101      	add	r1, pc, #4	; (adr r1, 8007a80 <_printf_i+0x40>)
 8007a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a80:	08007ad9 	.word	0x08007ad9
 8007a84:	08007aed 	.word	0x08007aed
 8007a88:	08007a69 	.word	0x08007a69
 8007a8c:	08007a69 	.word	0x08007a69
 8007a90:	08007a69 	.word	0x08007a69
 8007a94:	08007a69 	.word	0x08007a69
 8007a98:	08007aed 	.word	0x08007aed
 8007a9c:	08007a69 	.word	0x08007a69
 8007aa0:	08007a69 	.word	0x08007a69
 8007aa4:	08007a69 	.word	0x08007a69
 8007aa8:	08007a69 	.word	0x08007a69
 8007aac:	08007bf1 	.word	0x08007bf1
 8007ab0:	08007b19 	.word	0x08007b19
 8007ab4:	08007bab 	.word	0x08007bab
 8007ab8:	08007a69 	.word	0x08007a69
 8007abc:	08007a69 	.word	0x08007a69
 8007ac0:	08007c13 	.word	0x08007c13
 8007ac4:	08007a69 	.word	0x08007a69
 8007ac8:	08007b19 	.word	0x08007b19
 8007acc:	08007a69 	.word	0x08007a69
 8007ad0:	08007a69 	.word	0x08007a69
 8007ad4:	08007bb3 	.word	0x08007bb3
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	602a      	str	r2, [r5, #0]
 8007ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e09f      	b.n	8007c2c <_printf_i+0x1ec>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	682b      	ldr	r3, [r5, #0]
 8007af0:	0607      	lsls	r7, r0, #24
 8007af2:	f103 0104 	add.w	r1, r3, #4
 8007af6:	6029      	str	r1, [r5, #0]
 8007af8:	d501      	bpl.n	8007afe <_printf_i+0xbe>
 8007afa:	681e      	ldr	r6, [r3, #0]
 8007afc:	e003      	b.n	8007b06 <_printf_i+0xc6>
 8007afe:	0646      	lsls	r6, r0, #25
 8007b00:	d5fb      	bpl.n	8007afa <_printf_i+0xba>
 8007b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	da03      	bge.n	8007b12 <_printf_i+0xd2>
 8007b0a:	232d      	movs	r3, #45	; 0x2d
 8007b0c:	4276      	negs	r6, r6
 8007b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b12:	485a      	ldr	r0, [pc, #360]	; (8007c7c <_printf_i+0x23c>)
 8007b14:	230a      	movs	r3, #10
 8007b16:	e012      	b.n	8007b3e <_printf_i+0xfe>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	6820      	ldr	r0, [r4, #0]
 8007b1c:	1d19      	adds	r1, r3, #4
 8007b1e:	6029      	str	r1, [r5, #0]
 8007b20:	0605      	lsls	r5, r0, #24
 8007b22:	d501      	bpl.n	8007b28 <_printf_i+0xe8>
 8007b24:	681e      	ldr	r6, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <_printf_i+0xee>
 8007b28:	0641      	lsls	r1, r0, #25
 8007b2a:	d5fb      	bpl.n	8007b24 <_printf_i+0xe4>
 8007b2c:	881e      	ldrh	r6, [r3, #0]
 8007b2e:	4853      	ldr	r0, [pc, #332]	; (8007c7c <_printf_i+0x23c>)
 8007b30:	2f6f      	cmp	r7, #111	; 0x6f
 8007b32:	bf0c      	ite	eq
 8007b34:	2308      	moveq	r3, #8
 8007b36:	230a      	movne	r3, #10
 8007b38:	2100      	movs	r1, #0
 8007b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b3e:	6865      	ldr	r5, [r4, #4]
 8007b40:	60a5      	str	r5, [r4, #8]
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	bfa2      	ittt	ge
 8007b46:	6821      	ldrge	r1, [r4, #0]
 8007b48:	f021 0104 	bicge.w	r1, r1, #4
 8007b4c:	6021      	strge	r1, [r4, #0]
 8007b4e:	b90e      	cbnz	r6, 8007b54 <_printf_i+0x114>
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	d04b      	beq.n	8007bec <_printf_i+0x1ac>
 8007b54:	4615      	mov	r5, r2
 8007b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b5e:	5dc7      	ldrb	r7, [r0, r7]
 8007b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b64:	4637      	mov	r7, r6
 8007b66:	42bb      	cmp	r3, r7
 8007b68:	460e      	mov	r6, r1
 8007b6a:	d9f4      	bls.n	8007b56 <_printf_i+0x116>
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d10b      	bne.n	8007b88 <_printf_i+0x148>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	07de      	lsls	r6, r3, #31
 8007b74:	d508      	bpl.n	8007b88 <_printf_i+0x148>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	4299      	cmp	r1, r3
 8007b7c:	bfde      	ittt	le
 8007b7e:	2330      	movle	r3, #48	; 0x30
 8007b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b88:	1b52      	subs	r2, r2, r5
 8007b8a:	6122      	str	r2, [r4, #16]
 8007b8c:	f8cd a000 	str.w	sl, [sp]
 8007b90:	464b      	mov	r3, r9
 8007b92:	aa03      	add	r2, sp, #12
 8007b94:	4621      	mov	r1, r4
 8007b96:	4640      	mov	r0, r8
 8007b98:	f7ff fee4 	bl	8007964 <_printf_common>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d14a      	bne.n	8007c36 <_printf_i+0x1f6>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	b004      	add	sp, #16
 8007ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	f043 0320 	orr.w	r3, r3, #32
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	4833      	ldr	r0, [pc, #204]	; (8007c80 <_printf_i+0x240>)
 8007bb4:	2778      	movs	r7, #120	; 0x78
 8007bb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6829      	ldr	r1, [r5, #0]
 8007bbe:	061f      	lsls	r7, r3, #24
 8007bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bc4:	d402      	bmi.n	8007bcc <_printf_i+0x18c>
 8007bc6:	065f      	lsls	r7, r3, #25
 8007bc8:	bf48      	it	mi
 8007bca:	b2b6      	uxthmi	r6, r6
 8007bcc:	07df      	lsls	r7, r3, #31
 8007bce:	bf48      	it	mi
 8007bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bd4:	6029      	str	r1, [r5, #0]
 8007bd6:	bf48      	it	mi
 8007bd8:	6023      	strmi	r3, [r4, #0]
 8007bda:	b91e      	cbnz	r6, 8007be4 <_printf_i+0x1a4>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	f023 0320 	bic.w	r3, r3, #32
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	2310      	movs	r3, #16
 8007be6:	e7a7      	b.n	8007b38 <_printf_i+0xf8>
 8007be8:	4824      	ldr	r0, [pc, #144]	; (8007c7c <_printf_i+0x23c>)
 8007bea:	e7e4      	b.n	8007bb6 <_printf_i+0x176>
 8007bec:	4615      	mov	r5, r2
 8007bee:	e7bd      	b.n	8007b6c <_printf_i+0x12c>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	6826      	ldr	r6, [r4, #0]
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	1d18      	adds	r0, r3, #4
 8007bf8:	6028      	str	r0, [r5, #0]
 8007bfa:	0635      	lsls	r5, r6, #24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0x1c4>
 8007c00:	6019      	str	r1, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0x1ca>
 8007c04:	0670      	lsls	r0, r6, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0x1c0>
 8007c08:	8019      	strh	r1, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	4615      	mov	r5, r2
 8007c10:	e7bc      	b.n	8007b8c <_printf_i+0x14c>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	681d      	ldr	r5, [r3, #0]
 8007c1a:	6862      	ldr	r2, [r4, #4]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f7f8 fad6 	bl	80001d0 <memchr>
 8007c24:	b108      	cbz	r0, 8007c2a <_printf_i+0x1ea>
 8007c26:	1b40      	subs	r0, r0, r5
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c34:	e7aa      	b.n	8007b8c <_printf_i+0x14c>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	47d0      	blx	sl
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0ad      	beq.n	8007ba0 <_printf_i+0x160>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	d413      	bmi.n	8007c72 <_printf_i+0x232>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	4298      	cmp	r0, r3
 8007c50:	bfb8      	it	lt
 8007c52:	4618      	movlt	r0, r3
 8007c54:	e7a6      	b.n	8007ba4 <_printf_i+0x164>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d09d      	beq.n	8007ba0 <_printf_i+0x160>
 8007c64:	3501      	adds	r5, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	9903      	ldr	r1, [sp, #12]
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	42ab      	cmp	r3, r5
 8007c6e:	dcf2      	bgt.n	8007c56 <_printf_i+0x216>
 8007c70:	e7eb      	b.n	8007c4a <_printf_i+0x20a>
 8007c72:	2500      	movs	r5, #0
 8007c74:	f104 0619 	add.w	r6, r4, #25
 8007c78:	e7f5      	b.n	8007c66 <_printf_i+0x226>
 8007c7a:	bf00      	nop
 8007c7c:	0800a042 	.word	0x0800a042
 8007c80:	0800a053 	.word	0x0800a053

08007c84 <std>:
 8007c84:	2300      	movs	r3, #0
 8007c86:	b510      	push	{r4, lr}
 8007c88:	4604      	mov	r4, r0
 8007c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c92:	6083      	str	r3, [r0, #8]
 8007c94:	8181      	strh	r1, [r0, #12]
 8007c96:	6643      	str	r3, [r0, #100]	; 0x64
 8007c98:	81c2      	strh	r2, [r0, #14]
 8007c9a:	6183      	str	r3, [r0, #24]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	305c      	adds	r0, #92	; 0x5c
 8007ca2:	f000 f9f7 	bl	8008094 <memset>
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <std+0x58>)
 8007ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <std+0x5c>)
 8007cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <std+0x60>)
 8007cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <std+0x64>)
 8007cb4:	6323      	str	r3, [r4, #48]	; 0x30
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <std+0x68>)
 8007cb8:	6224      	str	r4, [r4, #32]
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	d006      	beq.n	8007ccc <std+0x48>
 8007cbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cc2:	4294      	cmp	r4, r2
 8007cc4:	d002      	beq.n	8007ccc <std+0x48>
 8007cc6:	33d0      	adds	r3, #208	; 0xd0
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	d105      	bne.n	8007cd8 <std+0x54>
 8007ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd4:	f000 ba5a 	b.w	800818c <__retarget_lock_init_recursive>
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	08007ee5 	.word	0x08007ee5
 8007ce0:	08007f07 	.word	0x08007f07
 8007ce4:	08007f3f 	.word	0x08007f3f
 8007ce8:	08007f63 	.word	0x08007f63
 8007cec:	20000490 	.word	0x20000490

08007cf0 <stdio_exit_handler>:
 8007cf0:	4a02      	ldr	r2, [pc, #8]	; (8007cfc <stdio_exit_handler+0xc>)
 8007cf2:	4903      	ldr	r1, [pc, #12]	; (8007d00 <stdio_exit_handler+0x10>)
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <stdio_exit_handler+0x14>)
 8007cf6:	f000 b869 	b.w	8007dcc <_fwalk_sglue>
 8007cfa:	bf00      	nop
 8007cfc:	2000000c 	.word	0x2000000c
 8007d00:	08009b19 	.word	0x08009b19
 8007d04:	20000018 	.word	0x20000018

08007d08 <cleanup_stdio>:
 8007d08:	6841      	ldr	r1, [r0, #4]
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <cleanup_stdio+0x34>)
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	4604      	mov	r4, r0
 8007d12:	d001      	beq.n	8007d18 <cleanup_stdio+0x10>
 8007d14:	f001 ff00 	bl	8009b18 <_fflush_r>
 8007d18:	68a1      	ldr	r1, [r4, #8]
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <cleanup_stdio+0x38>)
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d002      	beq.n	8007d26 <cleanup_stdio+0x1e>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f001 fef9 	bl	8009b18 <_fflush_r>
 8007d26:	68e1      	ldr	r1, [r4, #12]
 8007d28:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <cleanup_stdio+0x3c>)
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	d004      	beq.n	8007d38 <cleanup_stdio+0x30>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f001 bef0 	b.w	8009b18 <_fflush_r>
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000490 	.word	0x20000490
 8007d40:	200004f8 	.word	0x200004f8
 8007d44:	20000560 	.word	0x20000560

08007d48 <global_stdio_init.part.0>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <global_stdio_init.part.0+0x30>)
 8007d4c:	4c0b      	ldr	r4, [pc, #44]	; (8007d7c <global_stdio_init.part.0+0x34>)
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <global_stdio_init.part.0+0x38>)
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	4620      	mov	r0, r4
 8007d54:	2200      	movs	r2, #0
 8007d56:	2104      	movs	r1, #4
 8007d58:	f7ff ff94 	bl	8007c84 <std>
 8007d5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d60:	2201      	movs	r2, #1
 8007d62:	2109      	movs	r1, #9
 8007d64:	f7ff ff8e 	bl	8007c84 <std>
 8007d68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d72:	2112      	movs	r1, #18
 8007d74:	f7ff bf86 	b.w	8007c84 <std>
 8007d78:	200005c8 	.word	0x200005c8
 8007d7c:	20000490 	.word	0x20000490
 8007d80:	08007cf1 	.word	0x08007cf1

08007d84 <__sfp_lock_acquire>:
 8007d84:	4801      	ldr	r0, [pc, #4]	; (8007d8c <__sfp_lock_acquire+0x8>)
 8007d86:	f000 ba02 	b.w	800818e <__retarget_lock_acquire_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	200005d1 	.word	0x200005d1

08007d90 <__sfp_lock_release>:
 8007d90:	4801      	ldr	r0, [pc, #4]	; (8007d98 <__sfp_lock_release+0x8>)
 8007d92:	f000 b9fd 	b.w	8008190 <__retarget_lock_release_recursive>
 8007d96:	bf00      	nop
 8007d98:	200005d1 	.word	0x200005d1

08007d9c <__sinit>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	4604      	mov	r4, r0
 8007da0:	f7ff fff0 	bl	8007d84 <__sfp_lock_acquire>
 8007da4:	6a23      	ldr	r3, [r4, #32]
 8007da6:	b11b      	cbz	r3, 8007db0 <__sinit+0x14>
 8007da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dac:	f7ff bff0 	b.w	8007d90 <__sfp_lock_release>
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <__sinit+0x28>)
 8007db2:	6223      	str	r3, [r4, #32]
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <__sinit+0x2c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f5      	bne.n	8007da8 <__sinit+0xc>
 8007dbc:	f7ff ffc4 	bl	8007d48 <global_stdio_init.part.0>
 8007dc0:	e7f2      	b.n	8007da8 <__sinit+0xc>
 8007dc2:	bf00      	nop
 8007dc4:	08007d09 	.word	0x08007d09
 8007dc8:	200005c8 	.word	0x200005c8

08007dcc <_fwalk_sglue>:
 8007dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	4688      	mov	r8, r1
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8007de0:	d505      	bpl.n	8007dee <_fwalk_sglue+0x22>
 8007de2:	6824      	ldr	r4, [r4, #0]
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	d1f7      	bne.n	8007dd8 <_fwalk_sglue+0xc>
 8007de8:	4630      	mov	r0, r6
 8007dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d907      	bls.n	8007e04 <_fwalk_sglue+0x38>
 8007df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	d003      	beq.n	8007e04 <_fwalk_sglue+0x38>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4638      	mov	r0, r7
 8007e00:	47c0      	blx	r8
 8007e02:	4306      	orrs	r6, r0
 8007e04:	3568      	adds	r5, #104	; 0x68
 8007e06:	e7e9      	b.n	8007ddc <_fwalk_sglue+0x10>

08007e08 <iprintf>:
 8007e08:	b40f      	push	{r0, r1, r2, r3}
 8007e0a:	b507      	push	{r0, r1, r2, lr}
 8007e0c:	4906      	ldr	r1, [pc, #24]	; (8007e28 <iprintf+0x20>)
 8007e0e:	ab04      	add	r3, sp, #16
 8007e10:	6808      	ldr	r0, [r1, #0]
 8007e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e16:	6881      	ldr	r1, [r0, #8]
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f001 fcdd 	bl	80097d8 <_vfiprintf_r>
 8007e1e:	b003      	add	sp, #12
 8007e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e24:	b004      	add	sp, #16
 8007e26:	4770      	bx	lr
 8007e28:	20000064 	.word	0x20000064

08007e2c <_puts_r>:
 8007e2c:	6a03      	ldr	r3, [r0, #32]
 8007e2e:	b570      	push	{r4, r5, r6, lr}
 8007e30:	6884      	ldr	r4, [r0, #8]
 8007e32:	4605      	mov	r5, r0
 8007e34:	460e      	mov	r6, r1
 8007e36:	b90b      	cbnz	r3, 8007e3c <_puts_r+0x10>
 8007e38:	f7ff ffb0 	bl	8007d9c <__sinit>
 8007e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e3e:	07db      	lsls	r3, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_puts_r+0x22>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0598      	lsls	r0, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_puts_r+0x22>
 8007e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e4a:	f000 f9a0 	bl	800818e <__retarget_lock_acquire_recursive>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	0719      	lsls	r1, r3, #28
 8007e52:	d513      	bpl.n	8007e7c <_puts_r+0x50>
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	b18b      	cbz	r3, 8007e7c <_puts_r+0x50>
 8007e58:	3e01      	subs	r6, #1
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	b9e9      	cbnz	r1, 8007ea2 <_puts_r+0x76>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da2e      	bge.n	8007ec8 <_puts_r+0x9c>
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	210a      	movs	r1, #10
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 f87b 	bl	8007f6a <__swbuf_r>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d007      	beq.n	8007e88 <_puts_r+0x5c>
 8007e78:	250a      	movs	r5, #10
 8007e7a:	e007      	b.n	8007e8c <_puts_r+0x60>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f8b0 	bl	8007fe4 <__swsetup_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d0e7      	beq.n	8007e58 <_puts_r+0x2c>
 8007e88:	f04f 35ff 	mov.w	r5, #4294967295
 8007e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e8e:	07da      	lsls	r2, r3, #31
 8007e90:	d405      	bmi.n	8007e9e <_puts_r+0x72>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	059b      	lsls	r3, r3, #22
 8007e96:	d402      	bmi.n	8007e9e <_puts_r+0x72>
 8007e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9a:	f000 f979 	bl	8008190 <__retarget_lock_release_recursive>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da04      	bge.n	8007eb0 <_puts_r+0x84>
 8007ea6:	69a2      	ldr	r2, [r4, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	dc06      	bgt.n	8007eba <_puts_r+0x8e>
 8007eac:	290a      	cmp	r1, #10
 8007eae:	d004      	beq.n	8007eba <_puts_r+0x8e>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	7019      	strb	r1, [r3, #0]
 8007eb8:	e7cf      	b.n	8007e5a <_puts_r+0x2e>
 8007eba:	4622      	mov	r2, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f854 	bl	8007f6a <__swbuf_r>
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d1c9      	bne.n	8007e5a <_puts_r+0x2e>
 8007ec6:	e7df      	b.n	8007e88 <_puts_r+0x5c>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	250a      	movs	r5, #10
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	701d      	strb	r5, [r3, #0]
 8007ed2:	e7db      	b.n	8007e8c <_puts_r+0x60>

08007ed4 <puts>:
 8007ed4:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <puts+0xc>)
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	f7ff bfa7 	b.w	8007e2c <_puts_r>
 8007ede:	bf00      	nop
 8007ee0:	20000064 	.word	0x20000064

08007ee4 <__sread>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	f000 f900 	bl	80080f0 <_read_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	bfab      	itete	ge
 8007ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef8:	181b      	addge	r3, r3, r0
 8007efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007efe:	bfac      	ite	ge
 8007f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f02:	81a3      	strhlt	r3, [r4, #12]
 8007f04:	bd10      	pop	{r4, pc}

08007f06 <__swrite>:
 8007f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	898b      	ldrh	r3, [r1, #12]
 8007f0e:	05db      	lsls	r3, r3, #23
 8007f10:	4605      	mov	r5, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4616      	mov	r6, r2
 8007f16:	d505      	bpl.n	8007f24 <__swrite+0x1e>
 8007f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f000 f8d4 	bl	80080cc <_lseek_r>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	4628      	mov	r0, r5
 8007f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	f000 b8eb 	b.w	8008114 <_write_r>

08007f3e <__sseek>:
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	460c      	mov	r4, r1
 8007f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f46:	f000 f8c1 	bl	80080cc <_lseek_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	bf15      	itete	ne
 8007f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5a:	81a3      	strheq	r3, [r4, #12]
 8007f5c:	bf18      	it	ne
 8007f5e:	81a3      	strhne	r3, [r4, #12]
 8007f60:	bd10      	pop	{r4, pc}

08007f62 <__sclose>:
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 b8a1 	b.w	80080ac <_close_r>

08007f6a <__swbuf_r>:
 8007f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	4605      	mov	r5, r0
 8007f72:	b118      	cbz	r0, 8007f7c <__swbuf_r+0x12>
 8007f74:	6a03      	ldr	r3, [r0, #32]
 8007f76:	b90b      	cbnz	r3, 8007f7c <__swbuf_r+0x12>
 8007f78:	f7ff ff10 	bl	8007d9c <__sinit>
 8007f7c:	69a3      	ldr	r3, [r4, #24]
 8007f7e:	60a3      	str	r3, [r4, #8]
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	071a      	lsls	r2, r3, #28
 8007f84:	d525      	bpl.n	8007fd2 <__swbuf_r+0x68>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	b31b      	cbz	r3, 8007fd2 <__swbuf_r+0x68>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	6922      	ldr	r2, [r4, #16]
 8007f8e:	1a98      	subs	r0, r3, r2
 8007f90:	6963      	ldr	r3, [r4, #20]
 8007f92:	b2f6      	uxtb	r6, r6
 8007f94:	4283      	cmp	r3, r0
 8007f96:	4637      	mov	r7, r6
 8007f98:	dc04      	bgt.n	8007fa4 <__swbuf_r+0x3a>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f001 fdbb 	bl	8009b18 <_fflush_r>
 8007fa2:	b9e0      	cbnz	r0, 8007fde <__swbuf_r+0x74>
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	701e      	strb	r6, [r3, #0]
 8007fb2:	6962      	ldr	r2, [r4, #20]
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d004      	beq.n	8007fc4 <__swbuf_r+0x5a>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d506      	bpl.n	8007fce <__swbuf_r+0x64>
 8007fc0:	2e0a      	cmp	r6, #10
 8007fc2:	d104      	bne.n	8007fce <__swbuf_r+0x64>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f001 fda6 	bl	8009b18 <_fflush_r>
 8007fcc:	b938      	cbnz	r0, 8007fde <__swbuf_r+0x74>
 8007fce:	4638      	mov	r0, r7
 8007fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f805 	bl	8007fe4 <__swsetup_r>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d0d5      	beq.n	8007f8a <__swbuf_r+0x20>
 8007fde:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe2:	e7f4      	b.n	8007fce <__swbuf_r+0x64>

08007fe4 <__swsetup_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <__swsetup_r+0xac>)
 8007fe8:	4605      	mov	r5, r0
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	460c      	mov	r4, r1
 8007fee:	b118      	cbz	r0, 8007ff8 <__swsetup_r+0x14>
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <__swsetup_r+0x14>
 8007ff4:	f7ff fed2 	bl	8007d9c <__sinit>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ffe:	0718      	lsls	r0, r3, #28
 8008000:	d422      	bmi.n	8008048 <__swsetup_r+0x64>
 8008002:	06d9      	lsls	r1, r3, #27
 8008004:	d407      	bmi.n	8008016 <__swsetup_r+0x32>
 8008006:	2309      	movs	r3, #9
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e034      	b.n	8008080 <__swsetup_r+0x9c>
 8008016:	0758      	lsls	r0, r3, #29
 8008018:	d512      	bpl.n	8008040 <__swsetup_r+0x5c>
 800801a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801c:	b141      	cbz	r1, 8008030 <__swsetup_r+0x4c>
 800801e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d002      	beq.n	800802c <__swsetup_r+0x48>
 8008026:	4628      	mov	r0, r5
 8008028:	f000 ff30 	bl	8008e8c <_free_r>
 800802c:	2300      	movs	r3, #0
 800802e:	6363      	str	r3, [r4, #52]	; 0x34
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	2300      	movs	r3, #0
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f043 0308 	orr.w	r3, r3, #8
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	b94b      	cbnz	r3, 8008060 <__swsetup_r+0x7c>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008056:	d003      	beq.n	8008060 <__swsetup_r+0x7c>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f001 fdaa 	bl	8009bb4 <__smakebuf_r>
 8008060:	89a0      	ldrh	r0, [r4, #12]
 8008062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008066:	f010 0301 	ands.w	r3, r0, #1
 800806a:	d00a      	beq.n	8008082 <__swsetup_r+0x9e>
 800806c:	2300      	movs	r3, #0
 800806e:	60a3      	str	r3, [r4, #8]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	425b      	negs	r3, r3
 8008074:	61a3      	str	r3, [r4, #24]
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	b943      	cbnz	r3, 800808c <__swsetup_r+0xa8>
 800807a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800807e:	d1c4      	bne.n	800800a <__swsetup_r+0x26>
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	0781      	lsls	r1, r0, #30
 8008084:	bf58      	it	pl
 8008086:	6963      	ldrpl	r3, [r4, #20]
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	e7f4      	b.n	8008076 <__swsetup_r+0x92>
 800808c:	2000      	movs	r0, #0
 800808e:	e7f7      	b.n	8008080 <__swsetup_r+0x9c>
 8008090:	20000064 	.word	0x20000064

08008094 <memset>:
 8008094:	4402      	add	r2, r0
 8008096:	4603      	mov	r3, r0
 8008098:	4293      	cmp	r3, r2
 800809a:	d100      	bne.n	800809e <memset+0xa>
 800809c:	4770      	bx	lr
 800809e:	f803 1b01 	strb.w	r1, [r3], #1
 80080a2:	e7f9      	b.n	8008098 <memset+0x4>

080080a4 <_localeconv_r>:
 80080a4:	4800      	ldr	r0, [pc, #0]	; (80080a8 <_localeconv_r+0x4>)
 80080a6:	4770      	bx	lr
 80080a8:	20000158 	.word	0x20000158

080080ac <_close_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d06      	ldr	r5, [pc, #24]	; (80080c8 <_close_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	602b      	str	r3, [r5, #0]
 80080b8:	f7fa fd1f 	bl	8002afa <_close>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_close_r+0x1a>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_close_r+0x1a>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	200005cc 	.word	0x200005cc

080080cc <_lseek_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_lseek_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7fa fd34 	bl	8002b48 <_lseek>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_lseek_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_lseek_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	200005cc 	.word	0x200005cc

080080f0 <_read_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_read_r+0x20>)
 80080f4:	4604      	mov	r4, r0
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7fa fcde 	bl	8002ac0 <_read>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_read_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_read_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	200005cc 	.word	0x200005cc

08008114 <_write_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_write_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7fa f8c4 	bl	80022b0 <_write>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_write_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_write_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200005cc 	.word	0x200005cc

08008138 <__errno>:
 8008138:	4b01      	ldr	r3, [pc, #4]	; (8008140 <__errno+0x8>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000064 	.word	0x20000064

08008144 <__libc_init_array>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4d0d      	ldr	r5, [pc, #52]	; (800817c <__libc_init_array+0x38>)
 8008148:	4c0d      	ldr	r4, [pc, #52]	; (8008180 <__libc_init_array+0x3c>)
 800814a:	1b64      	subs	r4, r4, r5
 800814c:	10a4      	asrs	r4, r4, #2
 800814e:	2600      	movs	r6, #0
 8008150:	42a6      	cmp	r6, r4
 8008152:	d109      	bne.n	8008168 <__libc_init_array+0x24>
 8008154:	4d0b      	ldr	r5, [pc, #44]	; (8008184 <__libc_init_array+0x40>)
 8008156:	4c0c      	ldr	r4, [pc, #48]	; (8008188 <__libc_init_array+0x44>)
 8008158:	f001 fe5a 	bl	8009e10 <_init>
 800815c:	1b64      	subs	r4, r4, r5
 800815e:	10a4      	asrs	r4, r4, #2
 8008160:	2600      	movs	r6, #0
 8008162:	42a6      	cmp	r6, r4
 8008164:	d105      	bne.n	8008172 <__libc_init_array+0x2e>
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	f855 3b04 	ldr.w	r3, [r5], #4
 800816c:	4798      	blx	r3
 800816e:	3601      	adds	r6, #1
 8008170:	e7ee      	b.n	8008150 <__libc_init_array+0xc>
 8008172:	f855 3b04 	ldr.w	r3, [r5], #4
 8008176:	4798      	blx	r3
 8008178:	3601      	adds	r6, #1
 800817a:	e7f2      	b.n	8008162 <__libc_init_array+0x1e>
 800817c:	0800a3ac 	.word	0x0800a3ac
 8008180:	0800a3ac 	.word	0x0800a3ac
 8008184:	0800a3ac 	.word	0x0800a3ac
 8008188:	0800a3b0 	.word	0x0800a3b0

0800818c <__retarget_lock_init_recursive>:
 800818c:	4770      	bx	lr

0800818e <__retarget_lock_acquire_recursive>:
 800818e:	4770      	bx	lr

08008190 <__retarget_lock_release_recursive>:
 8008190:	4770      	bx	lr

08008192 <quorem>:
 8008192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	6903      	ldr	r3, [r0, #16]
 8008198:	690c      	ldr	r4, [r1, #16]
 800819a:	42a3      	cmp	r3, r4
 800819c:	4607      	mov	r7, r0
 800819e:	db7e      	blt.n	800829e <quorem+0x10c>
 80081a0:	3c01      	subs	r4, #1
 80081a2:	f101 0814 	add.w	r8, r1, #20
 80081a6:	f100 0514 	add.w	r5, r0, #20
 80081aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b8:	3301      	adds	r3, #1
 80081ba:	429a      	cmp	r2, r3
 80081bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80081c8:	d331      	bcc.n	800822e <quorem+0x9c>
 80081ca:	f04f 0e00 	mov.w	lr, #0
 80081ce:	4640      	mov	r0, r8
 80081d0:	46ac      	mov	ip, r5
 80081d2:	46f2      	mov	sl, lr
 80081d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80081d8:	b293      	uxth	r3, r2
 80081da:	fb06 e303 	mla	r3, r6, r3, lr
 80081de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081e2:	0c1a      	lsrs	r2, r3, #16
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	ebaa 0303 	sub.w	r3, sl, r3
 80081ea:	f8dc a000 	ldr.w	sl, [ip]
 80081ee:	fa13 f38a 	uxtah	r3, r3, sl
 80081f2:	fb06 220e 	mla	r2, r6, lr, r2
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081fe:	b292      	uxth	r2, r2
 8008200:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008208:	f8bd 3000 	ldrh.w	r3, [sp]
 800820c:	4581      	cmp	r9, r0
 800820e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008212:	f84c 3b04 	str.w	r3, [ip], #4
 8008216:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800821a:	d2db      	bcs.n	80081d4 <quorem+0x42>
 800821c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008220:	b92b      	cbnz	r3, 800822e <quorem+0x9c>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	3b04      	subs	r3, #4
 8008226:	429d      	cmp	r5, r3
 8008228:	461a      	mov	r2, r3
 800822a:	d32c      	bcc.n	8008286 <quorem+0xf4>
 800822c:	613c      	str	r4, [r7, #16]
 800822e:	4638      	mov	r0, r7
 8008230:	f001 f9a8 	bl	8009584 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	db22      	blt.n	800827e <quorem+0xec>
 8008238:	3601      	adds	r6, #1
 800823a:	4629      	mov	r1, r5
 800823c:	2000      	movs	r0, #0
 800823e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008242:	f8d1 c000 	ldr.w	ip, [r1]
 8008246:	b293      	uxth	r3, r2
 8008248:	1ac3      	subs	r3, r0, r3
 800824a:	0c12      	lsrs	r2, r2, #16
 800824c:	fa13 f38c 	uxtah	r3, r3, ip
 8008250:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008258:	b29b      	uxth	r3, r3
 800825a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825e:	45c1      	cmp	r9, r8
 8008260:	f841 3b04 	str.w	r3, [r1], #4
 8008264:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008268:	d2e9      	bcs.n	800823e <quorem+0xac>
 800826a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800826e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008272:	b922      	cbnz	r2, 800827e <quorem+0xec>
 8008274:	3b04      	subs	r3, #4
 8008276:	429d      	cmp	r5, r3
 8008278:	461a      	mov	r2, r3
 800827a:	d30a      	bcc.n	8008292 <quorem+0x100>
 800827c:	613c      	str	r4, [r7, #16]
 800827e:	4630      	mov	r0, r6
 8008280:	b003      	add	sp, #12
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	3b04      	subs	r3, #4
 800828a:	2a00      	cmp	r2, #0
 800828c:	d1ce      	bne.n	800822c <quorem+0x9a>
 800828e:	3c01      	subs	r4, #1
 8008290:	e7c9      	b.n	8008226 <quorem+0x94>
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	3b04      	subs	r3, #4
 8008296:	2a00      	cmp	r2, #0
 8008298:	d1f0      	bne.n	800827c <quorem+0xea>
 800829a:	3c01      	subs	r4, #1
 800829c:	e7eb      	b.n	8008276 <quorem+0xe4>
 800829e:	2000      	movs	r0, #0
 80082a0:	e7ee      	b.n	8008280 <quorem+0xee>
 80082a2:	0000      	movs	r0, r0
 80082a4:	0000      	movs	r0, r0
	...

080082a8 <_dtoa_r>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ed2d 8b04 	vpush	{d8-d9}
 80082b0:	69c5      	ldr	r5, [r0, #28]
 80082b2:	b093      	sub	sp, #76	; 0x4c
 80082b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082b8:	ec57 6b10 	vmov	r6, r7, d0
 80082bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082c0:	9107      	str	r1, [sp, #28]
 80082c2:	4604      	mov	r4, r0
 80082c4:	920a      	str	r2, [sp, #40]	; 0x28
 80082c6:	930d      	str	r3, [sp, #52]	; 0x34
 80082c8:	b975      	cbnz	r5, 80082e8 <_dtoa_r+0x40>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f000 fe2a 	bl	8008f24 <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	61e0      	str	r0, [r4, #28]
 80082d4:	b920      	cbnz	r0, 80082e0 <_dtoa_r+0x38>
 80082d6:	4bae      	ldr	r3, [pc, #696]	; (8008590 <_dtoa_r+0x2e8>)
 80082d8:	21ef      	movs	r1, #239	; 0xef
 80082da:	48ae      	ldr	r0, [pc, #696]	; (8008594 <_dtoa_r+0x2ec>)
 80082dc:	f001 fce6 	bl	8009cac <__assert_func>
 80082e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082e4:	6005      	str	r5, [r0, #0]
 80082e6:	60c5      	str	r5, [r0, #12]
 80082e8:	69e3      	ldr	r3, [r4, #28]
 80082ea:	6819      	ldr	r1, [r3, #0]
 80082ec:	b151      	cbz	r1, 8008304 <_dtoa_r+0x5c>
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	604a      	str	r2, [r1, #4]
 80082f2:	2301      	movs	r3, #1
 80082f4:	4093      	lsls	r3, r2
 80082f6:	608b      	str	r3, [r1, #8]
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 ff07 	bl	800910c <_Bfree>
 80082fe:	69e3      	ldr	r3, [r4, #28]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	1e3b      	subs	r3, r7, #0
 8008306:	bfbb      	ittet	lt
 8008308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800830c:	9303      	strlt	r3, [sp, #12]
 800830e:	2300      	movge	r3, #0
 8008310:	2201      	movlt	r2, #1
 8008312:	bfac      	ite	ge
 8008314:	f8c8 3000 	strge.w	r3, [r8]
 8008318:	f8c8 2000 	strlt.w	r2, [r8]
 800831c:	4b9e      	ldr	r3, [pc, #632]	; (8008598 <_dtoa_r+0x2f0>)
 800831e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008322:	ea33 0308 	bics.w	r3, r3, r8
 8008326:	d11b      	bne.n	8008360 <_dtoa_r+0xb8>
 8008328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800832a:	f242 730f 	movw	r3, #9999	; 0x270f
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008334:	4333      	orrs	r3, r6
 8008336:	f000 8593 	beq.w	8008e60 <_dtoa_r+0xbb8>
 800833a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833c:	b963      	cbnz	r3, 8008358 <_dtoa_r+0xb0>
 800833e:	4b97      	ldr	r3, [pc, #604]	; (800859c <_dtoa_r+0x2f4>)
 8008340:	e027      	b.n	8008392 <_dtoa_r+0xea>
 8008342:	4b97      	ldr	r3, [pc, #604]	; (80085a0 <_dtoa_r+0x2f8>)
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	9800      	ldr	r0, [sp, #0]
 800834e:	b013      	add	sp, #76	; 0x4c
 8008350:	ecbd 8b04 	vpop	{d8-d9}
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	4b90      	ldr	r3, [pc, #576]	; (800859c <_dtoa_r+0x2f4>)
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	3303      	adds	r3, #3
 800835e:	e7f3      	b.n	8008348 <_dtoa_r+0xa0>
 8008360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	ec51 0b17 	vmov	r0, r1, d7
 800836a:	eeb0 8a47 	vmov.f32	s16, s14
 800836e:	eef0 8a67 	vmov.f32	s17, s15
 8008372:	2300      	movs	r3, #0
 8008374:	f7f8 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008378:	4681      	mov	r9, r0
 800837a:	b160      	cbz	r0, 8008396 <_dtoa_r+0xee>
 800837c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800837e:	2301      	movs	r3, #1
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8568 	beq.w	8008e5a <_dtoa_r+0xbb2>
 800838a:	4b86      	ldr	r3, [pc, #536]	; (80085a4 <_dtoa_r+0x2fc>)
 800838c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	e7da      	b.n	800834c <_dtoa_r+0xa4>
 8008396:	aa10      	add	r2, sp, #64	; 0x40
 8008398:	a911      	add	r1, sp, #68	; 0x44
 800839a:	4620      	mov	r0, r4
 800839c:	eeb0 0a48 	vmov.f32	s0, s16
 80083a0:	eef0 0a68 	vmov.f32	s1, s17
 80083a4:	f001 f994 	bl	80096d0 <__d2b>
 80083a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083ac:	4682      	mov	sl, r0
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	d07f      	beq.n	80084b2 <_dtoa_r+0x20a>
 80083b2:	ee18 3a90 	vmov	r3, s17
 80083b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083be:	ec51 0b18 	vmov	r0, r1, d8
 80083c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80083ce:	4619      	mov	r1, r3
 80083d0:	2200      	movs	r2, #0
 80083d2:	4b75      	ldr	r3, [pc, #468]	; (80085a8 <_dtoa_r+0x300>)
 80083d4:	f7f7 ff58 	bl	8000288 <__aeabi_dsub>
 80083d8:	a367      	add	r3, pc, #412	; (adr r3, 8008578 <_dtoa_r+0x2d0>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 f90b 	bl	80005f8 <__aeabi_dmul>
 80083e2:	a367      	add	r3, pc, #412	; (adr r3, 8008580 <_dtoa_r+0x2d8>)
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f7 ff50 	bl	800028c <__adddf3>
 80083ec:	4606      	mov	r6, r0
 80083ee:	4628      	mov	r0, r5
 80083f0:	460f      	mov	r7, r1
 80083f2:	f7f8 f897 	bl	8000524 <__aeabi_i2d>
 80083f6:	a364      	add	r3, pc, #400	; (adr r3, 8008588 <_dtoa_r+0x2e0>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f7 ff40 	bl	800028c <__adddf3>
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fba2 	bl	8000b58 <__aeabi_d2iz>
 8008414:	2200      	movs	r2, #0
 8008416:	4683      	mov	fp, r0
 8008418:	2300      	movs	r3, #0
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 fb5d 	bl	8000adc <__aeabi_dcmplt>
 8008422:	b148      	cbz	r0, 8008438 <_dtoa_r+0x190>
 8008424:	4658      	mov	r0, fp
 8008426:	f7f8 f87d 	bl	8000524 <__aeabi_i2d>
 800842a:	4632      	mov	r2, r6
 800842c:	463b      	mov	r3, r7
 800842e:	f7f8 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008432:	b908      	cbnz	r0, 8008438 <_dtoa_r+0x190>
 8008434:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008438:	f1bb 0f16 	cmp.w	fp, #22
 800843c:	d857      	bhi.n	80084ee <_dtoa_r+0x246>
 800843e:	4b5b      	ldr	r3, [pc, #364]	; (80085ac <_dtoa_r+0x304>)
 8008440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	ec51 0b18 	vmov	r0, r1, d8
 800844c:	f7f8 fb46 	bl	8000adc <__aeabi_dcmplt>
 8008450:	2800      	cmp	r0, #0
 8008452:	d04e      	beq.n	80084f2 <_dtoa_r+0x24a>
 8008454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008458:	2300      	movs	r3, #0
 800845a:	930c      	str	r3, [sp, #48]	; 0x30
 800845c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800845e:	1b5b      	subs	r3, r3, r5
 8008460:	1e5a      	subs	r2, r3, #1
 8008462:	bf45      	ittet	mi
 8008464:	f1c3 0301 	rsbmi	r3, r3, #1
 8008468:	9305      	strmi	r3, [sp, #20]
 800846a:	2300      	movpl	r3, #0
 800846c:	2300      	movmi	r3, #0
 800846e:	9206      	str	r2, [sp, #24]
 8008470:	bf54      	ite	pl
 8008472:	9305      	strpl	r3, [sp, #20]
 8008474:	9306      	strmi	r3, [sp, #24]
 8008476:	f1bb 0f00 	cmp.w	fp, #0
 800847a:	db3c      	blt.n	80084f6 <_dtoa_r+0x24e>
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008482:	445b      	add	r3, fp
 8008484:	9306      	str	r3, [sp, #24]
 8008486:	2300      	movs	r3, #0
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	2b09      	cmp	r3, #9
 800848e:	d868      	bhi.n	8008562 <_dtoa_r+0x2ba>
 8008490:	2b05      	cmp	r3, #5
 8008492:	bfc4      	itt	gt
 8008494:	3b04      	subgt	r3, #4
 8008496:	9307      	strgt	r3, [sp, #28]
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	f1a3 0302 	sub.w	r3, r3, #2
 800849e:	bfcc      	ite	gt
 80084a0:	2500      	movgt	r5, #0
 80084a2:	2501      	movle	r5, #1
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	f200 8085 	bhi.w	80085b4 <_dtoa_r+0x30c>
 80084aa:	e8df f003 	tbb	[pc, r3]
 80084ae:	3b2e      	.short	0x3b2e
 80084b0:	5839      	.short	0x5839
 80084b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084b6:	441d      	add	r5, r3
 80084b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084bc:	2b20      	cmp	r3, #32
 80084be:	bfc1      	itttt	gt
 80084c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80084c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80084cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084d0:	bfd6      	itet	le
 80084d2:	f1c3 0320 	rsble	r3, r3, #32
 80084d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80084da:	fa06 f003 	lslle.w	r0, r6, r3
 80084de:	f7f8 f811 	bl	8000504 <__aeabi_ui2d>
 80084e2:	2201      	movs	r2, #1
 80084e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80084e8:	3d01      	subs	r5, #1
 80084ea:	920e      	str	r2, [sp, #56]	; 0x38
 80084ec:	e76f      	b.n	80083ce <_dtoa_r+0x126>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7b3      	b.n	800845a <_dtoa_r+0x1b2>
 80084f2:	900c      	str	r0, [sp, #48]	; 0x30
 80084f4:	e7b2      	b.n	800845c <_dtoa_r+0x1b4>
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	eba3 030b 	sub.w	r3, r3, fp
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	f1cb 0300 	rsb	r3, fp, #0
 8008502:	9308      	str	r3, [sp, #32]
 8008504:	2300      	movs	r3, #0
 8008506:	930b      	str	r3, [sp, #44]	; 0x2c
 8008508:	e7bf      	b.n	800848a <_dtoa_r+0x1e2>
 800850a:	2300      	movs	r3, #0
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	dc52      	bgt.n	80085ba <_dtoa_r+0x312>
 8008514:	2301      	movs	r3, #1
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	461a      	mov	r2, r3
 800851c:	920a      	str	r2, [sp, #40]	; 0x28
 800851e:	e00b      	b.n	8008538 <_dtoa_r+0x290>
 8008520:	2301      	movs	r3, #1
 8008522:	e7f3      	b.n	800850c <_dtoa_r+0x264>
 8008524:	2300      	movs	r3, #0
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	445b      	add	r3, fp
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	3301      	adds	r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	bfb8      	it	lt
 8008536:	2301      	movlt	r3, #1
 8008538:	69e0      	ldr	r0, [r4, #28]
 800853a:	2100      	movs	r1, #0
 800853c:	2204      	movs	r2, #4
 800853e:	f102 0614 	add.w	r6, r2, #20
 8008542:	429e      	cmp	r6, r3
 8008544:	d93d      	bls.n	80085c2 <_dtoa_r+0x31a>
 8008546:	6041      	str	r1, [r0, #4]
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fd9f 	bl	800908c <_Balloc>
 800854e:	9000      	str	r0, [sp, #0]
 8008550:	2800      	cmp	r0, #0
 8008552:	d139      	bne.n	80085c8 <_dtoa_r+0x320>
 8008554:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <_dtoa_r+0x308>)
 8008556:	4602      	mov	r2, r0
 8008558:	f240 11af 	movw	r1, #431	; 0x1af
 800855c:	e6bd      	b.n	80082da <_dtoa_r+0x32>
 800855e:	2301      	movs	r3, #1
 8008560:	e7e1      	b.n	8008526 <_dtoa_r+0x27e>
 8008562:	2501      	movs	r5, #1
 8008564:	2300      	movs	r3, #0
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	9509      	str	r5, [sp, #36]	; 0x24
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	2200      	movs	r2, #0
 8008574:	2312      	movs	r3, #18
 8008576:	e7d1      	b.n	800851c <_dtoa_r+0x274>
 8008578:	636f4361 	.word	0x636f4361
 800857c:	3fd287a7 	.word	0x3fd287a7
 8008580:	8b60c8b3 	.word	0x8b60c8b3
 8008584:	3fc68a28 	.word	0x3fc68a28
 8008588:	509f79fb 	.word	0x509f79fb
 800858c:	3fd34413 	.word	0x3fd34413
 8008590:	0800a071 	.word	0x0800a071
 8008594:	0800a088 	.word	0x0800a088
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	0800a06d 	.word	0x0800a06d
 80085a0:	0800a064 	.word	0x0800a064
 80085a4:	0800a041 	.word	0x0800a041
 80085a8:	3ff80000 	.word	0x3ff80000
 80085ac:	0800a178 	.word	0x0800a178
 80085b0:	0800a0e0 	.word	0x0800a0e0
 80085b4:	2301      	movs	r3, #1
 80085b6:	9309      	str	r3, [sp, #36]	; 0x24
 80085b8:	e7d7      	b.n	800856a <_dtoa_r+0x2c2>
 80085ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	e7ba      	b.n	8008538 <_dtoa_r+0x290>
 80085c2:	3101      	adds	r1, #1
 80085c4:	0052      	lsls	r2, r2, #1
 80085c6:	e7ba      	b.n	800853e <_dtoa_r+0x296>
 80085c8:	69e3      	ldr	r3, [r4, #28]
 80085ca:	9a00      	ldr	r2, [sp, #0]
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	2b0e      	cmp	r3, #14
 80085d2:	f200 80a8 	bhi.w	8008726 <_dtoa_r+0x47e>
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	f000 80a5 	beq.w	8008726 <_dtoa_r+0x47e>
 80085dc:	f1bb 0f00 	cmp.w	fp, #0
 80085e0:	dd38      	ble.n	8008654 <_dtoa_r+0x3ac>
 80085e2:	4bc0      	ldr	r3, [pc, #768]	; (80088e4 <_dtoa_r+0x63c>)
 80085e4:	f00b 020f 	and.w	r2, fp, #15
 80085e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80085f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80085f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085f8:	d019      	beq.n	800862e <_dtoa_r+0x386>
 80085fa:	4bbb      	ldr	r3, [pc, #748]	; (80088e8 <_dtoa_r+0x640>)
 80085fc:	ec51 0b18 	vmov	r0, r1, d8
 8008600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008604:	f7f8 f922 	bl	800084c <__aeabi_ddiv>
 8008608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860c:	f008 080f 	and.w	r8, r8, #15
 8008610:	2503      	movs	r5, #3
 8008612:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80088e8 <_dtoa_r+0x640>
 8008616:	f1b8 0f00 	cmp.w	r8, #0
 800861a:	d10a      	bne.n	8008632 <_dtoa_r+0x38a>
 800861c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008620:	4632      	mov	r2, r6
 8008622:	463b      	mov	r3, r7
 8008624:	f7f8 f912 	bl	800084c <__aeabi_ddiv>
 8008628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862c:	e02b      	b.n	8008686 <_dtoa_r+0x3de>
 800862e:	2502      	movs	r5, #2
 8008630:	e7ef      	b.n	8008612 <_dtoa_r+0x36a>
 8008632:	f018 0f01 	tst.w	r8, #1
 8008636:	d008      	beq.n	800864a <_dtoa_r+0x3a2>
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008640:	f7f7 ffda 	bl	80005f8 <__aeabi_dmul>
 8008644:	3501      	adds	r5, #1
 8008646:	4606      	mov	r6, r0
 8008648:	460f      	mov	r7, r1
 800864a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800864e:	f109 0908 	add.w	r9, r9, #8
 8008652:	e7e0      	b.n	8008616 <_dtoa_r+0x36e>
 8008654:	f000 809f 	beq.w	8008796 <_dtoa_r+0x4ee>
 8008658:	f1cb 0600 	rsb	r6, fp, #0
 800865c:	4ba1      	ldr	r3, [pc, #644]	; (80088e4 <_dtoa_r+0x63c>)
 800865e:	4fa2      	ldr	r7, [pc, #648]	; (80088e8 <_dtoa_r+0x640>)
 8008660:	f006 020f 	and.w	r2, r6, #15
 8008664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	ec51 0b18 	vmov	r0, r1, d8
 8008670:	f7f7 ffc2 	bl	80005f8 <__aeabi_dmul>
 8008674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008678:	1136      	asrs	r6, r6, #4
 800867a:	2300      	movs	r3, #0
 800867c:	2502      	movs	r5, #2
 800867e:	2e00      	cmp	r6, #0
 8008680:	d17e      	bne.n	8008780 <_dtoa_r+0x4d8>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d0      	bne.n	8008628 <_dtoa_r+0x380>
 8008686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008688:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8084 	beq.w	800879a <_dtoa_r+0x4f2>
 8008692:	4b96      	ldr	r3, [pc, #600]	; (80088ec <_dtoa_r+0x644>)
 8008694:	2200      	movs	r2, #0
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f8 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d07b      	beq.n	800879a <_dtoa_r+0x4f2>
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d078      	beq.n	800879a <_dtoa_r+0x4f2>
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dd39      	ble.n	8008722 <_dtoa_r+0x47a>
 80086ae:	4b90      	ldr	r3, [pc, #576]	; (80088f0 <_dtoa_r+0x648>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086be:	9e01      	ldr	r6, [sp, #4]
 80086c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80086c4:	3501      	adds	r5, #1
 80086c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086ca:	4628      	mov	r0, r5
 80086cc:	f7f7 ff2a 	bl	8000524 <__aeabi_i2d>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	f7f7 ff90 	bl	80005f8 <__aeabi_dmul>
 80086d8:	4b86      	ldr	r3, [pc, #536]	; (80088f4 <_dtoa_r+0x64c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	f7f7 fdd6 	bl	800028c <__adddf3>
 80086e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d158      	bne.n	80087a0 <_dtoa_r+0x4f8>
 80086ee:	4b82      	ldr	r3, [pc, #520]	; (80088f8 <_dtoa_r+0x650>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f7 fdc7 	bl	8000288 <__aeabi_dsub>
 80086fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086fe:	4680      	mov	r8, r0
 8008700:	4689      	mov	r9, r1
 8008702:	f7f8 fa09 	bl	8000b18 <__aeabi_dcmpgt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f040 8296 	bne.w	8008c38 <_dtoa_r+0x990>
 800870c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008710:	4640      	mov	r0, r8
 8008712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008716:	4649      	mov	r1, r9
 8008718:	f7f8 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800871c:	2800      	cmp	r0, #0
 800871e:	f040 8289 	bne.w	8008c34 <_dtoa_r+0x98c>
 8008722:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008728:	2b00      	cmp	r3, #0
 800872a:	f2c0 814e 	blt.w	80089ca <_dtoa_r+0x722>
 800872e:	f1bb 0f0e 	cmp.w	fp, #14
 8008732:	f300 814a 	bgt.w	80089ca <_dtoa_r+0x722>
 8008736:	4b6b      	ldr	r3, [pc, #428]	; (80088e4 <_dtoa_r+0x63c>)
 8008738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800873c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	f280 80dc 	bge.w	8008900 <_dtoa_r+0x658>
 8008748:	9b04      	ldr	r3, [sp, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f300 80d8 	bgt.w	8008900 <_dtoa_r+0x658>
 8008750:	f040 826f 	bne.w	8008c32 <_dtoa_r+0x98a>
 8008754:	4b68      	ldr	r3, [pc, #416]	; (80088f8 <_dtoa_r+0x650>)
 8008756:	2200      	movs	r2, #0
 8008758:	4640      	mov	r0, r8
 800875a:	4649      	mov	r1, r9
 800875c:	f7f7 ff4c 	bl	80005f8 <__aeabi_dmul>
 8008760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008764:	f7f8 f9ce 	bl	8000b04 <__aeabi_dcmpge>
 8008768:	9e04      	ldr	r6, [sp, #16]
 800876a:	4637      	mov	r7, r6
 800876c:	2800      	cmp	r0, #0
 800876e:	f040 8245 	bne.w	8008bfc <_dtoa_r+0x954>
 8008772:	9d00      	ldr	r5, [sp, #0]
 8008774:	2331      	movs	r3, #49	; 0x31
 8008776:	f805 3b01 	strb.w	r3, [r5], #1
 800877a:	f10b 0b01 	add.w	fp, fp, #1
 800877e:	e241      	b.n	8008c04 <_dtoa_r+0x95c>
 8008780:	07f2      	lsls	r2, r6, #31
 8008782:	d505      	bpl.n	8008790 <_dtoa_r+0x4e8>
 8008784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	3501      	adds	r5, #1
 800878e:	2301      	movs	r3, #1
 8008790:	1076      	asrs	r6, r6, #1
 8008792:	3708      	adds	r7, #8
 8008794:	e773      	b.n	800867e <_dtoa_r+0x3d6>
 8008796:	2502      	movs	r5, #2
 8008798:	e775      	b.n	8008686 <_dtoa_r+0x3de>
 800879a:	9e04      	ldr	r6, [sp, #16]
 800879c:	465f      	mov	r7, fp
 800879e:	e792      	b.n	80086c6 <_dtoa_r+0x41e>
 80087a0:	9900      	ldr	r1, [sp, #0]
 80087a2:	4b50      	ldr	r3, [pc, #320]	; (80088e4 <_dtoa_r+0x63c>)
 80087a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087a8:	4431      	add	r1, r6
 80087aa:	9102      	str	r1, [sp, #8]
 80087ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ae:	eeb0 9a47 	vmov.f32	s18, s14
 80087b2:	eef0 9a67 	vmov.f32	s19, s15
 80087b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087be:	2900      	cmp	r1, #0
 80087c0:	d044      	beq.n	800884c <_dtoa_r+0x5a4>
 80087c2:	494e      	ldr	r1, [pc, #312]	; (80088fc <_dtoa_r+0x654>)
 80087c4:	2000      	movs	r0, #0
 80087c6:	f7f8 f841 	bl	800084c <__aeabi_ddiv>
 80087ca:	ec53 2b19 	vmov	r2, r3, d9
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	9d00      	ldr	r5, [sp, #0]
 80087d4:	ec41 0b19 	vmov	d9, r0, r1
 80087d8:	4649      	mov	r1, r9
 80087da:	4640      	mov	r0, r8
 80087dc:	f7f8 f9bc 	bl	8000b58 <__aeabi_d2iz>
 80087e0:	4606      	mov	r6, r0
 80087e2:	f7f7 fe9f 	bl	8000524 <__aeabi_i2d>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 fd4b 	bl	8000288 <__aeabi_dsub>
 80087f2:	3630      	adds	r6, #48	; 0x30
 80087f4:	f805 6b01 	strb.w	r6, [r5], #1
 80087f8:	ec53 2b19 	vmov	r2, r3, d9
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d164      	bne.n	80088d2 <_dtoa_r+0x62a>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	4937      	ldr	r1, [pc, #220]	; (80088ec <_dtoa_r+0x644>)
 800880e:	2000      	movs	r0, #0
 8008810:	f7f7 fd3a 	bl	8000288 <__aeabi_dsub>
 8008814:	ec53 2b19 	vmov	r2, r3, d9
 8008818:	f7f8 f960 	bl	8000adc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	f040 80b6 	bne.w	800898e <_dtoa_r+0x6e6>
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	429d      	cmp	r5, r3
 8008826:	f43f af7c 	beq.w	8008722 <_dtoa_r+0x47a>
 800882a:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <_dtoa_r+0x648>)
 800882c:	ec51 0b19 	vmov	r0, r1, d9
 8008830:	2200      	movs	r2, #0
 8008832:	f7f7 fee1 	bl	80005f8 <__aeabi_dmul>
 8008836:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <_dtoa_r+0x648>)
 8008838:	ec41 0b19 	vmov	d9, r0, r1
 800883c:	2200      	movs	r2, #0
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f7 fed9 	bl	80005f8 <__aeabi_dmul>
 8008846:	4680      	mov	r8, r0
 8008848:	4689      	mov	r9, r1
 800884a:	e7c5      	b.n	80087d8 <_dtoa_r+0x530>
 800884c:	ec51 0b17 	vmov	r0, r1, d7
 8008850:	f7f7 fed2 	bl	80005f8 <__aeabi_dmul>
 8008854:	9b02      	ldr	r3, [sp, #8]
 8008856:	9d00      	ldr	r5, [sp, #0]
 8008858:	930f      	str	r3, [sp, #60]	; 0x3c
 800885a:	ec41 0b19 	vmov	d9, r0, r1
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	f7f8 f979 	bl	8000b58 <__aeabi_d2iz>
 8008866:	4606      	mov	r6, r0
 8008868:	f7f7 fe5c 	bl	8000524 <__aeabi_i2d>
 800886c:	3630      	adds	r6, #48	; 0x30
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	f805 6b01 	strb.w	r6, [r5], #1
 800887e:	9b02      	ldr	r3, [sp, #8]
 8008880:	429d      	cmp	r5, r3
 8008882:	4680      	mov	r8, r0
 8008884:	4689      	mov	r9, r1
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	d124      	bne.n	80088d6 <_dtoa_r+0x62e>
 800888c:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <_dtoa_r+0x654>)
 800888e:	ec51 0b19 	vmov	r0, r1, d9
 8008892:	f7f7 fcfb 	bl	800028c <__adddf3>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	f7f8 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d173      	bne.n	800898e <_dtoa_r+0x6e6>
 80088a6:	ec53 2b19 	vmov	r2, r3, d9
 80088aa:	4914      	ldr	r1, [pc, #80]	; (80088fc <_dtoa_r+0x654>)
 80088ac:	2000      	movs	r0, #0
 80088ae:	f7f7 fceb 	bl	8000288 <__aeabi_dsub>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4640      	mov	r0, r8
 80088b8:	4649      	mov	r1, r9
 80088ba:	f7f8 f90f 	bl	8000adc <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f af2f 	beq.w	8008722 <_dtoa_r+0x47a>
 80088c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088c6:	1e6b      	subs	r3, r5, #1
 80088c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088ce:	2b30      	cmp	r3, #48	; 0x30
 80088d0:	d0f8      	beq.n	80088c4 <_dtoa_r+0x61c>
 80088d2:	46bb      	mov	fp, r7
 80088d4:	e04a      	b.n	800896c <_dtoa_r+0x6c4>
 80088d6:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <_dtoa_r+0x648>)
 80088d8:	f7f7 fe8e 	bl	80005f8 <__aeabi_dmul>
 80088dc:	4680      	mov	r8, r0
 80088de:	4689      	mov	r9, r1
 80088e0:	e7bd      	b.n	800885e <_dtoa_r+0x5b6>
 80088e2:	bf00      	nop
 80088e4:	0800a178 	.word	0x0800a178
 80088e8:	0800a150 	.word	0x0800a150
 80088ec:	3ff00000 	.word	0x3ff00000
 80088f0:	40240000 	.word	0x40240000
 80088f4:	401c0000 	.word	0x401c0000
 80088f8:	40140000 	.word	0x40140000
 80088fc:	3fe00000 	.word	0x3fe00000
 8008900:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008904:	9d00      	ldr	r5, [sp, #0]
 8008906:	4642      	mov	r2, r8
 8008908:	464b      	mov	r3, r9
 800890a:	4630      	mov	r0, r6
 800890c:	4639      	mov	r1, r7
 800890e:	f7f7 ff9d 	bl	800084c <__aeabi_ddiv>
 8008912:	f7f8 f921 	bl	8000b58 <__aeabi_d2iz>
 8008916:	9001      	str	r0, [sp, #4]
 8008918:	f7f7 fe04 	bl	8000524 <__aeabi_i2d>
 800891c:	4642      	mov	r2, r8
 800891e:	464b      	mov	r3, r9
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	9e01      	ldr	r6, [sp, #4]
 8008932:	9f04      	ldr	r7, [sp, #16]
 8008934:	3630      	adds	r6, #48	; 0x30
 8008936:	f805 6b01 	strb.w	r6, [r5], #1
 800893a:	9e00      	ldr	r6, [sp, #0]
 800893c:	1bae      	subs	r6, r5, r6
 800893e:	42b7      	cmp	r7, r6
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	d134      	bne.n	80089b0 <_dtoa_r+0x708>
 8008946:	f7f7 fca1 	bl	800028c <__adddf3>
 800894a:	4642      	mov	r2, r8
 800894c:	464b      	mov	r3, r9
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	f7f8 f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 8008956:	b9c8      	cbnz	r0, 800898c <_dtoa_r+0x6e4>
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f8 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008964:	b110      	cbz	r0, 800896c <_dtoa_r+0x6c4>
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	07db      	lsls	r3, r3, #31
 800896a:	d40f      	bmi.n	800898c <_dtoa_r+0x6e4>
 800896c:	4651      	mov	r1, sl
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fbcc 	bl	800910c <_Bfree>
 8008974:	2300      	movs	r3, #0
 8008976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008978:	702b      	strb	r3, [r5, #0]
 800897a:	f10b 0301 	add.w	r3, fp, #1
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008982:	2b00      	cmp	r3, #0
 8008984:	f43f ace2 	beq.w	800834c <_dtoa_r+0xa4>
 8008988:	601d      	str	r5, [r3, #0]
 800898a:	e4df      	b.n	800834c <_dtoa_r+0xa4>
 800898c:	465f      	mov	r7, fp
 800898e:	462b      	mov	r3, r5
 8008990:	461d      	mov	r5, r3
 8008992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008996:	2a39      	cmp	r2, #57	; 0x39
 8008998:	d106      	bne.n	80089a8 <_dtoa_r+0x700>
 800899a:	9a00      	ldr	r2, [sp, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d1f7      	bne.n	8008990 <_dtoa_r+0x6e8>
 80089a0:	9900      	ldr	r1, [sp, #0]
 80089a2:	2230      	movs	r2, #48	; 0x30
 80089a4:	3701      	adds	r7, #1
 80089a6:	700a      	strb	r2, [r1, #0]
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	3201      	adds	r2, #1
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	e790      	b.n	80088d2 <_dtoa_r+0x62a>
 80089b0:	4ba3      	ldr	r3, [pc, #652]	; (8008c40 <_dtoa_r+0x998>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	f7f7 fe20 	bl	80005f8 <__aeabi_dmul>
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	f7f8 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d09e      	beq.n	8008906 <_dtoa_r+0x65e>
 80089c8:	e7d0      	b.n	800896c <_dtoa_r+0x6c4>
 80089ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	f000 80ca 	beq.w	8008b66 <_dtoa_r+0x8be>
 80089d2:	9a07      	ldr	r2, [sp, #28]
 80089d4:	2a01      	cmp	r2, #1
 80089d6:	f300 80ad 	bgt.w	8008b34 <_dtoa_r+0x88c>
 80089da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089dc:	2a00      	cmp	r2, #0
 80089de:	f000 80a5 	beq.w	8008b2c <_dtoa_r+0x884>
 80089e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089e6:	9e08      	ldr	r6, [sp, #32]
 80089e8:	9d05      	ldr	r5, [sp, #20]
 80089ea:	9a05      	ldr	r2, [sp, #20]
 80089ec:	441a      	add	r2, r3
 80089ee:	9205      	str	r2, [sp, #20]
 80089f0:	9a06      	ldr	r2, [sp, #24]
 80089f2:	2101      	movs	r1, #1
 80089f4:	441a      	add	r2, r3
 80089f6:	4620      	mov	r0, r4
 80089f8:	9206      	str	r2, [sp, #24]
 80089fa:	f000 fc3d 	bl	8009278 <__i2b>
 80089fe:	4607      	mov	r7, r0
 8008a00:	b165      	cbz	r5, 8008a1c <_dtoa_r+0x774>
 8008a02:	9b06      	ldr	r3, [sp, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dd09      	ble.n	8008a1c <_dtoa_r+0x774>
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	9a05      	ldr	r2, [sp, #20]
 8008a0c:	bfa8      	it	ge
 8008a0e:	462b      	movge	r3, r5
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	9205      	str	r2, [sp, #20]
 8008a14:	9a06      	ldr	r2, [sp, #24]
 8008a16:	1aed      	subs	r5, r5, r3
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	9306      	str	r3, [sp, #24]
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	b1f3      	cbz	r3, 8008a5e <_dtoa_r+0x7b6>
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80a3 	beq.w	8008b6e <_dtoa_r+0x8c6>
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	dd10      	ble.n	8008a4e <_dtoa_r+0x7a6>
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fce1 	bl	80093f8 <__pow5mult>
 8008a36:	4652      	mov	r2, sl
 8008a38:	4601      	mov	r1, r0
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fc31 	bl	80092a4 <__multiply>
 8008a42:	4651      	mov	r1, sl
 8008a44:	4680      	mov	r8, r0
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fb60 	bl	800910c <_Bfree>
 8008a4c:	46c2      	mov	sl, r8
 8008a4e:	9b08      	ldr	r3, [sp, #32]
 8008a50:	1b9a      	subs	r2, r3, r6
 8008a52:	d004      	beq.n	8008a5e <_dtoa_r+0x7b6>
 8008a54:	4651      	mov	r1, sl
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fcce 	bl	80093f8 <__pow5mult>
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fc09 	bl	8009278 <__i2b>
 8008a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	f340 8081 	ble.w	8008b72 <_dtoa_r+0x8ca>
 8008a70:	461a      	mov	r2, r3
 8008a72:	4601      	mov	r1, r0
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fcbf 	bl	80093f8 <__pow5mult>
 8008a7a:	9b07      	ldr	r3, [sp, #28]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	4606      	mov	r6, r0
 8008a80:	dd7a      	ble.n	8008b78 <_dtoa_r+0x8d0>
 8008a82:	f04f 0800 	mov.w	r8, #0
 8008a86:	6933      	ldr	r3, [r6, #16]
 8008a88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a8c:	6918      	ldr	r0, [r3, #16]
 8008a8e:	f000 fba5 	bl	80091dc <__hi0bits>
 8008a92:	f1c0 0020 	rsb	r0, r0, #32
 8008a96:	9b06      	ldr	r3, [sp, #24]
 8008a98:	4418      	add	r0, r3
 8008a9a:	f010 001f 	ands.w	r0, r0, #31
 8008a9e:	f000 8094 	beq.w	8008bca <_dtoa_r+0x922>
 8008aa2:	f1c0 0320 	rsb	r3, r0, #32
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	f340 8085 	ble.w	8008bb6 <_dtoa_r+0x90e>
 8008aac:	9b05      	ldr	r3, [sp, #20]
 8008aae:	f1c0 001c 	rsb	r0, r0, #28
 8008ab2:	4403      	add	r3, r0
 8008ab4:	9305      	str	r3, [sp, #20]
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	4403      	add	r3, r0
 8008aba:	4405      	add	r5, r0
 8008abc:	9306      	str	r3, [sp, #24]
 8008abe:	9b05      	ldr	r3, [sp, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd05      	ble.n	8008ad0 <_dtoa_r+0x828>
 8008ac4:	4651      	mov	r1, sl
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fcef 	bl	80094ac <__lshift>
 8008ace:	4682      	mov	sl, r0
 8008ad0:	9b06      	ldr	r3, [sp, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	dd05      	ble.n	8008ae2 <_dtoa_r+0x83a>
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fce6 	bl	80094ac <__lshift>
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d072      	beq.n	8008bce <_dtoa_r+0x926>
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4650      	mov	r0, sl
 8008aec:	f000 fd4a 	bl	8009584 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	da6c      	bge.n	8008bce <_dtoa_r+0x926>
 8008af4:	2300      	movs	r3, #0
 8008af6:	4651      	mov	r1, sl
 8008af8:	220a      	movs	r2, #10
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fb28 	bl	8009150 <__multadd>
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b06:	4682      	mov	sl, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 81b0 	beq.w	8008e6e <_dtoa_r+0xbc6>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4639      	mov	r1, r7
 8008b12:	220a      	movs	r2, #10
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fb1b 	bl	8009150 <__multadd>
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	4607      	mov	r7, r0
 8008b20:	f300 8096 	bgt.w	8008c50 <_dtoa_r+0x9a8>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	dc59      	bgt.n	8008bde <_dtoa_r+0x936>
 8008b2a:	e091      	b.n	8008c50 <_dtoa_r+0x9a8>
 8008b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b32:	e758      	b.n	80089e6 <_dtoa_r+0x73e>
 8008b34:	9b04      	ldr	r3, [sp, #16]
 8008b36:	1e5e      	subs	r6, r3, #1
 8008b38:	9b08      	ldr	r3, [sp, #32]
 8008b3a:	42b3      	cmp	r3, r6
 8008b3c:	bfbf      	itttt	lt
 8008b3e:	9b08      	ldrlt	r3, [sp, #32]
 8008b40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b42:	9608      	strlt	r6, [sp, #32]
 8008b44:	1af3      	sublt	r3, r6, r3
 8008b46:	bfb4      	ite	lt
 8008b48:	18d2      	addlt	r2, r2, r3
 8008b4a:	1b9e      	subge	r6, r3, r6
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	bfbc      	itt	lt
 8008b50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b52:	2600      	movlt	r6, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfb7      	itett	lt
 8008b58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b60:	1a9d      	sublt	r5, r3, r2
 8008b62:	2300      	movlt	r3, #0
 8008b64:	e741      	b.n	80089ea <_dtoa_r+0x742>
 8008b66:	9e08      	ldr	r6, [sp, #32]
 8008b68:	9d05      	ldr	r5, [sp, #20]
 8008b6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b6c:	e748      	b.n	8008a00 <_dtoa_r+0x758>
 8008b6e:	9a08      	ldr	r2, [sp, #32]
 8008b70:	e770      	b.n	8008a54 <_dtoa_r+0x7ac>
 8008b72:	9b07      	ldr	r3, [sp, #28]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	dc19      	bgt.n	8008bac <_dtoa_r+0x904>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	b9bb      	cbnz	r3, 8008bac <_dtoa_r+0x904>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b82:	b99b      	cbnz	r3, 8008bac <_dtoa_r+0x904>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b8a:	0d1b      	lsrs	r3, r3, #20
 8008b8c:	051b      	lsls	r3, r3, #20
 8008b8e:	b183      	cbz	r3, 8008bb2 <_dtoa_r+0x90a>
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	3301      	adds	r3, #1
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	9b06      	ldr	r3, [sp, #24]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	9306      	str	r3, [sp, #24]
 8008b9c:	f04f 0801 	mov.w	r8, #1
 8008ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f47f af6f 	bne.w	8008a86 <_dtoa_r+0x7de>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e774      	b.n	8008a96 <_dtoa_r+0x7ee>
 8008bac:	f04f 0800 	mov.w	r8, #0
 8008bb0:	e7f6      	b.n	8008ba0 <_dtoa_r+0x8f8>
 8008bb2:	4698      	mov	r8, r3
 8008bb4:	e7f4      	b.n	8008ba0 <_dtoa_r+0x8f8>
 8008bb6:	d082      	beq.n	8008abe <_dtoa_r+0x816>
 8008bb8:	9a05      	ldr	r2, [sp, #20]
 8008bba:	331c      	adds	r3, #28
 8008bbc:	441a      	add	r2, r3
 8008bbe:	9205      	str	r2, [sp, #20]
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	441d      	add	r5, r3
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	e779      	b.n	8008abe <_dtoa_r+0x816>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	e7f4      	b.n	8008bb8 <_dtoa_r+0x910>
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc37      	bgt.n	8008c44 <_dtoa_r+0x99c>
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	dd34      	ble.n	8008c44 <_dtoa_r+0x99c>
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	b963      	cbnz	r3, 8008bfc <_dtoa_r+0x954>
 8008be2:	4631      	mov	r1, r6
 8008be4:	2205      	movs	r2, #5
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 fab2 	bl	8009150 <__multadd>
 8008bec:	4601      	mov	r1, r0
 8008bee:	4606      	mov	r6, r0
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	f000 fcc7 	bl	8009584 <__mcmp>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f73f adbb 	bgt.w	8008772 <_dtoa_r+0x4ca>
 8008bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfe:	9d00      	ldr	r5, [sp, #0]
 8008c00:	ea6f 0b03 	mvn.w	fp, r3
 8008c04:	f04f 0800 	mov.w	r8, #0
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 fa7e 	bl	800910c <_Bfree>
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	f43f aeab 	beq.w	800896c <_dtoa_r+0x6c4>
 8008c16:	f1b8 0f00 	cmp.w	r8, #0
 8008c1a:	d005      	beq.n	8008c28 <_dtoa_r+0x980>
 8008c1c:	45b8      	cmp	r8, r7
 8008c1e:	d003      	beq.n	8008c28 <_dtoa_r+0x980>
 8008c20:	4641      	mov	r1, r8
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fa72 	bl	800910c <_Bfree>
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fa6e 	bl	800910c <_Bfree>
 8008c30:	e69c      	b.n	800896c <_dtoa_r+0x6c4>
 8008c32:	2600      	movs	r6, #0
 8008c34:	4637      	mov	r7, r6
 8008c36:	e7e1      	b.n	8008bfc <_dtoa_r+0x954>
 8008c38:	46bb      	mov	fp, r7
 8008c3a:	4637      	mov	r7, r6
 8008c3c:	e599      	b.n	8008772 <_dtoa_r+0x4ca>
 8008c3e:	bf00      	nop
 8008c40:	40240000 	.word	0x40240000
 8008c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80c8 	beq.w	8008ddc <_dtoa_r+0xb34>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	dd05      	ble.n	8008c60 <_dtoa_r+0x9b8>
 8008c54:	4639      	mov	r1, r7
 8008c56:	462a      	mov	r2, r5
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fc27 	bl	80094ac <__lshift>
 8008c5e:	4607      	mov	r7, r0
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	d05b      	beq.n	8008d1e <_dtoa_r+0xa76>
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fa0f 	bl	800908c <_Balloc>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b928      	cbnz	r0, 8008c7e <_dtoa_r+0x9d6>
 8008c72:	4b83      	ldr	r3, [pc, #524]	; (8008e80 <_dtoa_r+0xbd8>)
 8008c74:	4602      	mov	r2, r0
 8008c76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c7a:	f7ff bb2e 	b.w	80082da <_dtoa_r+0x32>
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	3202      	adds	r2, #2
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	f107 010c 	add.w	r1, r7, #12
 8008c88:	300c      	adds	r0, #12
 8008c8a:	f001 f801 	bl	8009c90 <memcpy>
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4629      	mov	r1, r5
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 fc0a 	bl	80094ac <__lshift>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	9308      	str	r3, [sp, #32]
 8008ca6:	9b02      	ldr	r3, [sp, #8]
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	46b8      	mov	r8, r7
 8008cae:	9306      	str	r3, [sp, #24]
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	4650      	mov	r0, sl
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	f7ff fa69 	bl	8008192 <quorem>
 8008cc0:	4641      	mov	r1, r8
 8008cc2:	9002      	str	r0, [sp, #8]
 8008cc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cc8:	4650      	mov	r0, sl
 8008cca:	f000 fc5b 	bl	8009584 <__mcmp>
 8008cce:	463a      	mov	r2, r7
 8008cd0:	9005      	str	r0, [sp, #20]
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fc71 	bl	80095bc <__mdiff>
 8008cda:	68c2      	ldr	r2, [r0, #12]
 8008cdc:	4605      	mov	r5, r0
 8008cde:	bb02      	cbnz	r2, 8008d22 <_dtoa_r+0xa7a>
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	f000 fc4e 	bl	8009584 <__mcmp>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4629      	mov	r1, r5
 8008cec:	4620      	mov	r0, r4
 8008cee:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf0:	f000 fa0c 	bl	800910c <_Bfree>
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf8:	9d04      	ldr	r5, [sp, #16]
 8008cfa:	ea43 0102 	orr.w	r1, r3, r2
 8008cfe:	9b06      	ldr	r3, [sp, #24]
 8008d00:	4319      	orrs	r1, r3
 8008d02:	d110      	bne.n	8008d26 <_dtoa_r+0xa7e>
 8008d04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d08:	d029      	beq.n	8008d5e <_dtoa_r+0xab6>
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd02      	ble.n	8008d16 <_dtoa_r+0xa6e>
 8008d10:	9b02      	ldr	r3, [sp, #8]
 8008d12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	f883 9000 	strb.w	r9, [r3]
 8008d1c:	e774      	b.n	8008c08 <_dtoa_r+0x960>
 8008d1e:	4638      	mov	r0, r7
 8008d20:	e7ba      	b.n	8008c98 <_dtoa_r+0x9f0>
 8008d22:	2201      	movs	r2, #1
 8008d24:	e7e1      	b.n	8008cea <_dtoa_r+0xa42>
 8008d26:	9b05      	ldr	r3, [sp, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db04      	blt.n	8008d36 <_dtoa_r+0xa8e>
 8008d2c:	9907      	ldr	r1, [sp, #28]
 8008d2e:	430b      	orrs	r3, r1
 8008d30:	9906      	ldr	r1, [sp, #24]
 8008d32:	430b      	orrs	r3, r1
 8008d34:	d120      	bne.n	8008d78 <_dtoa_r+0xad0>
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	dded      	ble.n	8008d16 <_dtoa_r+0xa6e>
 8008d3a:	4651      	mov	r1, sl
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fbb4 	bl	80094ac <__lshift>
 8008d44:	4631      	mov	r1, r6
 8008d46:	4682      	mov	sl, r0
 8008d48:	f000 fc1c 	bl	8009584 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	dc03      	bgt.n	8008d58 <_dtoa_r+0xab0>
 8008d50:	d1e1      	bne.n	8008d16 <_dtoa_r+0xa6e>
 8008d52:	f019 0f01 	tst.w	r9, #1
 8008d56:	d0de      	beq.n	8008d16 <_dtoa_r+0xa6e>
 8008d58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d5c:	d1d8      	bne.n	8008d10 <_dtoa_r+0xa68>
 8008d5e:	9a01      	ldr	r2, [sp, #4]
 8008d60:	2339      	movs	r3, #57	; 0x39
 8008d62:	7013      	strb	r3, [r2, #0]
 8008d64:	462b      	mov	r3, r5
 8008d66:	461d      	mov	r5, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d6e:	2a39      	cmp	r2, #57	; 0x39
 8008d70:	d06c      	beq.n	8008e4c <_dtoa_r+0xba4>
 8008d72:	3201      	adds	r2, #1
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e747      	b.n	8008c08 <_dtoa_r+0x960>
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	dd07      	ble.n	8008d8c <_dtoa_r+0xae4>
 8008d7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d80:	d0ed      	beq.n	8008d5e <_dtoa_r+0xab6>
 8008d82:	9a01      	ldr	r2, [sp, #4]
 8008d84:	f109 0301 	add.w	r3, r9, #1
 8008d88:	7013      	strb	r3, [r2, #0]
 8008d8a:	e73d      	b.n	8008c08 <_dtoa_r+0x960>
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	9a08      	ldr	r2, [sp, #32]
 8008d90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d043      	beq.n	8008e20 <_dtoa_r+0xb78>
 8008d98:	4651      	mov	r1, sl
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 f9d6 	bl	8009150 <__multadd>
 8008da4:	45b8      	cmp	r8, r7
 8008da6:	4682      	mov	sl, r0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	f04f 020a 	mov.w	r2, #10
 8008db0:	4641      	mov	r1, r8
 8008db2:	4620      	mov	r0, r4
 8008db4:	d107      	bne.n	8008dc6 <_dtoa_r+0xb1e>
 8008db6:	f000 f9cb 	bl	8009150 <__multadd>
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	e775      	b.n	8008cb2 <_dtoa_r+0xa0a>
 8008dc6:	f000 f9c3 	bl	8009150 <__multadd>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4680      	mov	r8, r0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f9bc 	bl	8009150 <__multadd>
 8008dd8:	4607      	mov	r7, r0
 8008dda:	e7f0      	b.n	8008dbe <_dtoa_r+0xb16>
 8008ddc:	9b04      	ldr	r3, [sp, #16]
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	9d00      	ldr	r5, [sp, #0]
 8008de2:	4631      	mov	r1, r6
 8008de4:	4650      	mov	r0, sl
 8008de6:	f7ff f9d4 	bl	8008192 <quorem>
 8008dea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	f805 9b01 	strb.w	r9, [r5], #1
 8008df4:	1aea      	subs	r2, r5, r3
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	dd07      	ble.n	8008e0c <_dtoa_r+0xb64>
 8008dfc:	4651      	mov	r1, sl
 8008dfe:	2300      	movs	r3, #0
 8008e00:	220a      	movs	r2, #10
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f9a4 	bl	8009150 <__multadd>
 8008e08:	4682      	mov	sl, r0
 8008e0a:	e7ea      	b.n	8008de2 <_dtoa_r+0xb3a>
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfc8      	it	gt
 8008e12:	461d      	movgt	r5, r3
 8008e14:	9b00      	ldr	r3, [sp, #0]
 8008e16:	bfd8      	it	le
 8008e18:	2501      	movle	r5, #1
 8008e1a:	441d      	add	r5, r3
 8008e1c:	f04f 0800 	mov.w	r8, #0
 8008e20:	4651      	mov	r1, sl
 8008e22:	2201      	movs	r2, #1
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fb41 	bl	80094ac <__lshift>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	f000 fba9 	bl	8009584 <__mcmp>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	dc96      	bgt.n	8008d64 <_dtoa_r+0xabc>
 8008e36:	d102      	bne.n	8008e3e <_dtoa_r+0xb96>
 8008e38:	f019 0f01 	tst.w	r9, #1
 8008e3c:	d192      	bne.n	8008d64 <_dtoa_r+0xabc>
 8008e3e:	462b      	mov	r3, r5
 8008e40:	461d      	mov	r5, r3
 8008e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e46:	2a30      	cmp	r2, #48	; 0x30
 8008e48:	d0fa      	beq.n	8008e40 <_dtoa_r+0xb98>
 8008e4a:	e6dd      	b.n	8008c08 <_dtoa_r+0x960>
 8008e4c:	9a00      	ldr	r2, [sp, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d189      	bne.n	8008d66 <_dtoa_r+0xabe>
 8008e52:	f10b 0b01 	add.w	fp, fp, #1
 8008e56:	2331      	movs	r3, #49	; 0x31
 8008e58:	e796      	b.n	8008d88 <_dtoa_r+0xae0>
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <_dtoa_r+0xbdc>)
 8008e5c:	f7ff ba99 	b.w	8008392 <_dtoa_r+0xea>
 8008e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f47f aa6d 	bne.w	8008342 <_dtoa_r+0x9a>
 8008e68:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <_dtoa_r+0xbe0>)
 8008e6a:	f7ff ba92 	b.w	8008392 <_dtoa_r+0xea>
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dcb5      	bgt.n	8008de0 <_dtoa_r+0xb38>
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	f73f aeb1 	bgt.w	8008bde <_dtoa_r+0x936>
 8008e7c:	e7b0      	b.n	8008de0 <_dtoa_r+0xb38>
 8008e7e:	bf00      	nop
 8008e80:	0800a0e0 	.word	0x0800a0e0
 8008e84:	0800a040 	.word	0x0800a040
 8008e88:	0800a064 	.word	0x0800a064

08008e8c <_free_r>:
 8008e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d044      	beq.n	8008f1c <_free_r+0x90>
 8008e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e96:	9001      	str	r0, [sp, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e9e:	bfb8      	it	lt
 8008ea0:	18e4      	addlt	r4, r4, r3
 8008ea2:	f000 f8e7 	bl	8009074 <__malloc_lock>
 8008ea6:	4a1e      	ldr	r2, [pc, #120]	; (8008f20 <_free_r+0x94>)
 8008ea8:	9801      	ldr	r0, [sp, #4]
 8008eaa:	6813      	ldr	r3, [r2, #0]
 8008eac:	b933      	cbnz	r3, 8008ebc <_free_r+0x30>
 8008eae:	6063      	str	r3, [r4, #4]
 8008eb0:	6014      	str	r4, [r2, #0]
 8008eb2:	b003      	add	sp, #12
 8008eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb8:	f000 b8e2 	b.w	8009080 <__malloc_unlock>
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	d908      	bls.n	8008ed2 <_free_r+0x46>
 8008ec0:	6825      	ldr	r5, [r4, #0]
 8008ec2:	1961      	adds	r1, r4, r5
 8008ec4:	428b      	cmp	r3, r1
 8008ec6:	bf01      	itttt	eq
 8008ec8:	6819      	ldreq	r1, [r3, #0]
 8008eca:	685b      	ldreq	r3, [r3, #4]
 8008ecc:	1949      	addeq	r1, r1, r5
 8008ece:	6021      	streq	r1, [r4, #0]
 8008ed0:	e7ed      	b.n	8008eae <_free_r+0x22>
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b10b      	cbz	r3, 8008edc <_free_r+0x50>
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	d9fa      	bls.n	8008ed2 <_free_r+0x46>
 8008edc:	6811      	ldr	r1, [r2, #0]
 8008ede:	1855      	adds	r5, r2, r1
 8008ee0:	42a5      	cmp	r5, r4
 8008ee2:	d10b      	bne.n	8008efc <_free_r+0x70>
 8008ee4:	6824      	ldr	r4, [r4, #0]
 8008ee6:	4421      	add	r1, r4
 8008ee8:	1854      	adds	r4, r2, r1
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	d1e0      	bne.n	8008eb2 <_free_r+0x26>
 8008ef0:	681c      	ldr	r4, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	6053      	str	r3, [r2, #4]
 8008ef6:	440c      	add	r4, r1
 8008ef8:	6014      	str	r4, [r2, #0]
 8008efa:	e7da      	b.n	8008eb2 <_free_r+0x26>
 8008efc:	d902      	bls.n	8008f04 <_free_r+0x78>
 8008efe:	230c      	movs	r3, #12
 8008f00:	6003      	str	r3, [r0, #0]
 8008f02:	e7d6      	b.n	8008eb2 <_free_r+0x26>
 8008f04:	6825      	ldr	r5, [r4, #0]
 8008f06:	1961      	adds	r1, r4, r5
 8008f08:	428b      	cmp	r3, r1
 8008f0a:	bf04      	itt	eq
 8008f0c:	6819      	ldreq	r1, [r3, #0]
 8008f0e:	685b      	ldreq	r3, [r3, #4]
 8008f10:	6063      	str	r3, [r4, #4]
 8008f12:	bf04      	itt	eq
 8008f14:	1949      	addeq	r1, r1, r5
 8008f16:	6021      	streq	r1, [r4, #0]
 8008f18:	6054      	str	r4, [r2, #4]
 8008f1a:	e7ca      	b.n	8008eb2 <_free_r+0x26>
 8008f1c:	b003      	add	sp, #12
 8008f1e:	bd30      	pop	{r4, r5, pc}
 8008f20:	200005d4 	.word	0x200005d4

08008f24 <malloc>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <malloc+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f000 b823 	b.w	8008f74 <_malloc_r>
 8008f2e:	bf00      	nop
 8008f30:	20000064 	.word	0x20000064

08008f34 <sbrk_aligned>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	4e0e      	ldr	r6, [pc, #56]	; (8008f70 <sbrk_aligned+0x3c>)
 8008f38:	460c      	mov	r4, r1
 8008f3a:	6831      	ldr	r1, [r6, #0]
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	b911      	cbnz	r1, 8008f46 <sbrk_aligned+0x12>
 8008f40:	f000 fe96 	bl	8009c70 <_sbrk_r>
 8008f44:	6030      	str	r0, [r6, #0]
 8008f46:	4621      	mov	r1, r4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f000 fe91 	bl	8009c70 <_sbrk_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d00a      	beq.n	8008f68 <sbrk_aligned+0x34>
 8008f52:	1cc4      	adds	r4, r0, #3
 8008f54:	f024 0403 	bic.w	r4, r4, #3
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d007      	beq.n	8008f6c <sbrk_aligned+0x38>
 8008f5c:	1a21      	subs	r1, r4, r0
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 fe86 	bl	8009c70 <_sbrk_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d101      	bne.n	8008f6c <sbrk_aligned+0x38>
 8008f68:	f04f 34ff 	mov.w	r4, #4294967295
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	200005d8 	.word	0x200005d8

08008f74 <_malloc_r>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	1ccd      	adds	r5, r1, #3
 8008f7a:	f025 0503 	bic.w	r5, r5, #3
 8008f7e:	3508      	adds	r5, #8
 8008f80:	2d0c      	cmp	r5, #12
 8008f82:	bf38      	it	cc
 8008f84:	250c      	movcc	r5, #12
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	4607      	mov	r7, r0
 8008f8a:	db01      	blt.n	8008f90 <_malloc_r+0x1c>
 8008f8c:	42a9      	cmp	r1, r5
 8008f8e:	d905      	bls.n	8008f9c <_malloc_r+0x28>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	2600      	movs	r6, #0
 8008f96:	4630      	mov	r0, r6
 8008f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009070 <_malloc_r+0xfc>
 8008fa0:	f000 f868 	bl	8009074 <__malloc_lock>
 8008fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa8:	461c      	mov	r4, r3
 8008faa:	bb5c      	cbnz	r4, 8009004 <_malloc_r+0x90>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f7ff ffc0 	bl	8008f34 <sbrk_aligned>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	d155      	bne.n	8009066 <_malloc_r+0xf2>
 8008fba:	f8d8 4000 	ldr.w	r4, [r8]
 8008fbe:	4626      	mov	r6, r4
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	d145      	bne.n	8009050 <_malloc_r+0xdc>
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	d048      	beq.n	800905a <_malloc_r+0xe6>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4638      	mov	r0, r7
 8008fce:	eb04 0903 	add.w	r9, r4, r3
 8008fd2:	f000 fe4d 	bl	8009c70 <_sbrk_r>
 8008fd6:	4581      	cmp	r9, r0
 8008fd8:	d13f      	bne.n	800905a <_malloc_r+0xe6>
 8008fda:	6821      	ldr	r1, [r4, #0]
 8008fdc:	1a6d      	subs	r5, r5, r1
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f7ff ffa7 	bl	8008f34 <sbrk_aligned>
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d037      	beq.n	800905a <_malloc_r+0xe6>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	442b      	add	r3, r5
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d038      	beq.n	800906a <_malloc_r+0xf6>
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	42a2      	cmp	r2, r4
 8008ffc:	d12b      	bne.n	8009056 <_malloc_r+0xe2>
 8008ffe:	2200      	movs	r2, #0
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	e00f      	b.n	8009024 <_malloc_r+0xb0>
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	1b52      	subs	r2, r2, r5
 8009008:	d41f      	bmi.n	800904a <_malloc_r+0xd6>
 800900a:	2a0b      	cmp	r2, #11
 800900c:	d917      	bls.n	800903e <_malloc_r+0xca>
 800900e:	1961      	adds	r1, r4, r5
 8009010:	42a3      	cmp	r3, r4
 8009012:	6025      	str	r5, [r4, #0]
 8009014:	bf18      	it	ne
 8009016:	6059      	strne	r1, [r3, #4]
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	bf08      	it	eq
 800901c:	f8c8 1000 	streq.w	r1, [r8]
 8009020:	5162      	str	r2, [r4, r5]
 8009022:	604b      	str	r3, [r1, #4]
 8009024:	4638      	mov	r0, r7
 8009026:	f104 060b 	add.w	r6, r4, #11
 800902a:	f000 f829 	bl	8009080 <__malloc_unlock>
 800902e:	f026 0607 	bic.w	r6, r6, #7
 8009032:	1d23      	adds	r3, r4, #4
 8009034:	1af2      	subs	r2, r6, r3
 8009036:	d0ae      	beq.n	8008f96 <_malloc_r+0x22>
 8009038:	1b9b      	subs	r3, r3, r6
 800903a:	50a3      	str	r3, [r4, r2]
 800903c:	e7ab      	b.n	8008f96 <_malloc_r+0x22>
 800903e:	42a3      	cmp	r3, r4
 8009040:	6862      	ldr	r2, [r4, #4]
 8009042:	d1dd      	bne.n	8009000 <_malloc_r+0x8c>
 8009044:	f8c8 2000 	str.w	r2, [r8]
 8009048:	e7ec      	b.n	8009024 <_malloc_r+0xb0>
 800904a:	4623      	mov	r3, r4
 800904c:	6864      	ldr	r4, [r4, #4]
 800904e:	e7ac      	b.n	8008faa <_malloc_r+0x36>
 8009050:	4634      	mov	r4, r6
 8009052:	6876      	ldr	r6, [r6, #4]
 8009054:	e7b4      	b.n	8008fc0 <_malloc_r+0x4c>
 8009056:	4613      	mov	r3, r2
 8009058:	e7cc      	b.n	8008ff4 <_malloc_r+0x80>
 800905a:	230c      	movs	r3, #12
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4638      	mov	r0, r7
 8009060:	f000 f80e 	bl	8009080 <__malloc_unlock>
 8009064:	e797      	b.n	8008f96 <_malloc_r+0x22>
 8009066:	6025      	str	r5, [r4, #0]
 8009068:	e7dc      	b.n	8009024 <_malloc_r+0xb0>
 800906a:	605b      	str	r3, [r3, #4]
 800906c:	deff      	udf	#255	; 0xff
 800906e:	bf00      	nop
 8009070:	200005d4 	.word	0x200005d4

08009074 <__malloc_lock>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__malloc_lock+0x8>)
 8009076:	f7ff b88a 	b.w	800818e <__retarget_lock_acquire_recursive>
 800907a:	bf00      	nop
 800907c:	200005d0 	.word	0x200005d0

08009080 <__malloc_unlock>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__malloc_unlock+0x8>)
 8009082:	f7ff b885 	b.w	8008190 <__retarget_lock_release_recursive>
 8009086:	bf00      	nop
 8009088:	200005d0 	.word	0x200005d0

0800908c <_Balloc>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	69c6      	ldr	r6, [r0, #28]
 8009090:	4604      	mov	r4, r0
 8009092:	460d      	mov	r5, r1
 8009094:	b976      	cbnz	r6, 80090b4 <_Balloc+0x28>
 8009096:	2010      	movs	r0, #16
 8009098:	f7ff ff44 	bl	8008f24 <malloc>
 800909c:	4602      	mov	r2, r0
 800909e:	61e0      	str	r0, [r4, #28]
 80090a0:	b920      	cbnz	r0, 80090ac <_Balloc+0x20>
 80090a2:	4b18      	ldr	r3, [pc, #96]	; (8009104 <_Balloc+0x78>)
 80090a4:	4818      	ldr	r0, [pc, #96]	; (8009108 <_Balloc+0x7c>)
 80090a6:	216b      	movs	r1, #107	; 0x6b
 80090a8:	f000 fe00 	bl	8009cac <__assert_func>
 80090ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b0:	6006      	str	r6, [r0, #0]
 80090b2:	60c6      	str	r6, [r0, #12]
 80090b4:	69e6      	ldr	r6, [r4, #28]
 80090b6:	68f3      	ldr	r3, [r6, #12]
 80090b8:	b183      	cbz	r3, 80090dc <_Balloc+0x50>
 80090ba:	69e3      	ldr	r3, [r4, #28]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090c2:	b9b8      	cbnz	r0, 80090f4 <_Balloc+0x68>
 80090c4:	2101      	movs	r1, #1
 80090c6:	fa01 f605 	lsl.w	r6, r1, r5
 80090ca:	1d72      	adds	r2, r6, #5
 80090cc:	0092      	lsls	r2, r2, #2
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 fe0a 	bl	8009ce8 <_calloc_r>
 80090d4:	b160      	cbz	r0, 80090f0 <_Balloc+0x64>
 80090d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090da:	e00e      	b.n	80090fa <_Balloc+0x6e>
 80090dc:	2221      	movs	r2, #33	; 0x21
 80090de:	2104      	movs	r1, #4
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fe01 	bl	8009ce8 <_calloc_r>
 80090e6:	69e3      	ldr	r3, [r4, #28]
 80090e8:	60f0      	str	r0, [r6, #12]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e4      	bne.n	80090ba <_Balloc+0x2e>
 80090f0:	2000      	movs	r0, #0
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	6802      	ldr	r2, [r0, #0]
 80090f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090fa:	2300      	movs	r3, #0
 80090fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009100:	e7f7      	b.n	80090f2 <_Balloc+0x66>
 8009102:	bf00      	nop
 8009104:	0800a071 	.word	0x0800a071
 8009108:	0800a0f1 	.word	0x0800a0f1

0800910c <_Bfree>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	69c6      	ldr	r6, [r0, #28]
 8009110:	4605      	mov	r5, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b976      	cbnz	r6, 8009134 <_Bfree+0x28>
 8009116:	2010      	movs	r0, #16
 8009118:	f7ff ff04 	bl	8008f24 <malloc>
 800911c:	4602      	mov	r2, r0
 800911e:	61e8      	str	r0, [r5, #28]
 8009120:	b920      	cbnz	r0, 800912c <_Bfree+0x20>
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <_Bfree+0x3c>)
 8009124:	4809      	ldr	r0, [pc, #36]	; (800914c <_Bfree+0x40>)
 8009126:	218f      	movs	r1, #143	; 0x8f
 8009128:	f000 fdc0 	bl	8009cac <__assert_func>
 800912c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009130:	6006      	str	r6, [r0, #0]
 8009132:	60c6      	str	r6, [r0, #12]
 8009134:	b13c      	cbz	r4, 8009146 <_Bfree+0x3a>
 8009136:	69eb      	ldr	r3, [r5, #28]
 8009138:	6862      	ldr	r2, [r4, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009140:	6021      	str	r1, [r4, #0]
 8009142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	0800a071 	.word	0x0800a071
 800914c:	0800a0f1 	.word	0x0800a0f1

08009150 <__multadd>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	690d      	ldr	r5, [r1, #16]
 8009156:	4607      	mov	r7, r0
 8009158:	460c      	mov	r4, r1
 800915a:	461e      	mov	r6, r3
 800915c:	f101 0c14 	add.w	ip, r1, #20
 8009160:	2000      	movs	r0, #0
 8009162:	f8dc 3000 	ldr.w	r3, [ip]
 8009166:	b299      	uxth	r1, r3
 8009168:	fb02 6101 	mla	r1, r2, r1, r6
 800916c:	0c1e      	lsrs	r6, r3, #16
 800916e:	0c0b      	lsrs	r3, r1, #16
 8009170:	fb02 3306 	mla	r3, r2, r6, r3
 8009174:	b289      	uxth	r1, r1
 8009176:	3001      	adds	r0, #1
 8009178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800917c:	4285      	cmp	r5, r0
 800917e:	f84c 1b04 	str.w	r1, [ip], #4
 8009182:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009186:	dcec      	bgt.n	8009162 <__multadd+0x12>
 8009188:	b30e      	cbz	r6, 80091ce <__multadd+0x7e>
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	42ab      	cmp	r3, r5
 800918e:	dc19      	bgt.n	80091c4 <__multadd+0x74>
 8009190:	6861      	ldr	r1, [r4, #4]
 8009192:	4638      	mov	r0, r7
 8009194:	3101      	adds	r1, #1
 8009196:	f7ff ff79 	bl	800908c <_Balloc>
 800919a:	4680      	mov	r8, r0
 800919c:	b928      	cbnz	r0, 80091aa <__multadd+0x5a>
 800919e:	4602      	mov	r2, r0
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <__multadd+0x84>)
 80091a2:	480d      	ldr	r0, [pc, #52]	; (80091d8 <__multadd+0x88>)
 80091a4:	21ba      	movs	r1, #186	; 0xba
 80091a6:	f000 fd81 	bl	8009cac <__assert_func>
 80091aa:	6922      	ldr	r2, [r4, #16]
 80091ac:	3202      	adds	r2, #2
 80091ae:	f104 010c 	add.w	r1, r4, #12
 80091b2:	0092      	lsls	r2, r2, #2
 80091b4:	300c      	adds	r0, #12
 80091b6:	f000 fd6b 	bl	8009c90 <memcpy>
 80091ba:	4621      	mov	r1, r4
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff ffa5 	bl	800910c <_Bfree>
 80091c2:	4644      	mov	r4, r8
 80091c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091c8:	3501      	adds	r5, #1
 80091ca:	615e      	str	r6, [r3, #20]
 80091cc:	6125      	str	r5, [r4, #16]
 80091ce:	4620      	mov	r0, r4
 80091d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d4:	0800a0e0 	.word	0x0800a0e0
 80091d8:	0800a0f1 	.word	0x0800a0f1

080091dc <__hi0bits>:
 80091dc:	0c03      	lsrs	r3, r0, #16
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	b9d3      	cbnz	r3, 8009218 <__hi0bits+0x3c>
 80091e2:	0400      	lsls	r0, r0, #16
 80091e4:	2310      	movs	r3, #16
 80091e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091ea:	bf04      	itt	eq
 80091ec:	0200      	lsleq	r0, r0, #8
 80091ee:	3308      	addeq	r3, #8
 80091f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091f4:	bf04      	itt	eq
 80091f6:	0100      	lsleq	r0, r0, #4
 80091f8:	3304      	addeq	r3, #4
 80091fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091fe:	bf04      	itt	eq
 8009200:	0080      	lsleq	r0, r0, #2
 8009202:	3302      	addeq	r3, #2
 8009204:	2800      	cmp	r0, #0
 8009206:	db05      	blt.n	8009214 <__hi0bits+0x38>
 8009208:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800920c:	f103 0301 	add.w	r3, r3, #1
 8009210:	bf08      	it	eq
 8009212:	2320      	moveq	r3, #32
 8009214:	4618      	mov	r0, r3
 8009216:	4770      	bx	lr
 8009218:	2300      	movs	r3, #0
 800921a:	e7e4      	b.n	80091e6 <__hi0bits+0xa>

0800921c <__lo0bits>:
 800921c:	6803      	ldr	r3, [r0, #0]
 800921e:	f013 0207 	ands.w	r2, r3, #7
 8009222:	d00c      	beq.n	800923e <__lo0bits+0x22>
 8009224:	07d9      	lsls	r1, r3, #31
 8009226:	d422      	bmi.n	800926e <__lo0bits+0x52>
 8009228:	079a      	lsls	r2, r3, #30
 800922a:	bf49      	itett	mi
 800922c:	085b      	lsrmi	r3, r3, #1
 800922e:	089b      	lsrpl	r3, r3, #2
 8009230:	6003      	strmi	r3, [r0, #0]
 8009232:	2201      	movmi	r2, #1
 8009234:	bf5c      	itt	pl
 8009236:	6003      	strpl	r3, [r0, #0]
 8009238:	2202      	movpl	r2, #2
 800923a:	4610      	mov	r0, r2
 800923c:	4770      	bx	lr
 800923e:	b299      	uxth	r1, r3
 8009240:	b909      	cbnz	r1, 8009246 <__lo0bits+0x2a>
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	2210      	movs	r2, #16
 8009246:	b2d9      	uxtb	r1, r3
 8009248:	b909      	cbnz	r1, 800924e <__lo0bits+0x32>
 800924a:	3208      	adds	r2, #8
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	0719      	lsls	r1, r3, #28
 8009250:	bf04      	itt	eq
 8009252:	091b      	lsreq	r3, r3, #4
 8009254:	3204      	addeq	r2, #4
 8009256:	0799      	lsls	r1, r3, #30
 8009258:	bf04      	itt	eq
 800925a:	089b      	lsreq	r3, r3, #2
 800925c:	3202      	addeq	r2, #2
 800925e:	07d9      	lsls	r1, r3, #31
 8009260:	d403      	bmi.n	800926a <__lo0bits+0x4e>
 8009262:	085b      	lsrs	r3, r3, #1
 8009264:	f102 0201 	add.w	r2, r2, #1
 8009268:	d003      	beq.n	8009272 <__lo0bits+0x56>
 800926a:	6003      	str	r3, [r0, #0]
 800926c:	e7e5      	b.n	800923a <__lo0bits+0x1e>
 800926e:	2200      	movs	r2, #0
 8009270:	e7e3      	b.n	800923a <__lo0bits+0x1e>
 8009272:	2220      	movs	r2, #32
 8009274:	e7e1      	b.n	800923a <__lo0bits+0x1e>
	...

08009278 <__i2b>:
 8009278:	b510      	push	{r4, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	2101      	movs	r1, #1
 800927e:	f7ff ff05 	bl	800908c <_Balloc>
 8009282:	4602      	mov	r2, r0
 8009284:	b928      	cbnz	r0, 8009292 <__i2b+0x1a>
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <__i2b+0x24>)
 8009288:	4805      	ldr	r0, [pc, #20]	; (80092a0 <__i2b+0x28>)
 800928a:	f240 1145 	movw	r1, #325	; 0x145
 800928e:	f000 fd0d 	bl	8009cac <__assert_func>
 8009292:	2301      	movs	r3, #1
 8009294:	6144      	str	r4, [r0, #20]
 8009296:	6103      	str	r3, [r0, #16]
 8009298:	bd10      	pop	{r4, pc}
 800929a:	bf00      	nop
 800929c:	0800a0e0 	.word	0x0800a0e0
 80092a0:	0800a0f1 	.word	0x0800a0f1

080092a4 <__multiply>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	4691      	mov	r9, r2
 80092aa:	690a      	ldr	r2, [r1, #16]
 80092ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	bfb8      	it	lt
 80092b4:	460b      	movlt	r3, r1
 80092b6:	460c      	mov	r4, r1
 80092b8:	bfbc      	itt	lt
 80092ba:	464c      	movlt	r4, r9
 80092bc:	4699      	movlt	r9, r3
 80092be:	6927      	ldr	r7, [r4, #16]
 80092c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092c4:	68a3      	ldr	r3, [r4, #8]
 80092c6:	6861      	ldr	r1, [r4, #4]
 80092c8:	eb07 060a 	add.w	r6, r7, sl
 80092cc:	42b3      	cmp	r3, r6
 80092ce:	b085      	sub	sp, #20
 80092d0:	bfb8      	it	lt
 80092d2:	3101      	addlt	r1, #1
 80092d4:	f7ff feda 	bl	800908c <_Balloc>
 80092d8:	b930      	cbnz	r0, 80092e8 <__multiply+0x44>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b44      	ldr	r3, [pc, #272]	; (80093f0 <__multiply+0x14c>)
 80092de:	4845      	ldr	r0, [pc, #276]	; (80093f4 <__multiply+0x150>)
 80092e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80092e4:	f000 fce2 	bl	8009cac <__assert_func>
 80092e8:	f100 0514 	add.w	r5, r0, #20
 80092ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092f0:	462b      	mov	r3, r5
 80092f2:	2200      	movs	r2, #0
 80092f4:	4543      	cmp	r3, r8
 80092f6:	d321      	bcc.n	800933c <__multiply+0x98>
 80092f8:	f104 0314 	add.w	r3, r4, #20
 80092fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009300:	f109 0314 	add.w	r3, r9, #20
 8009304:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	1b3a      	subs	r2, r7, r4
 800930c:	3a15      	subs	r2, #21
 800930e:	f022 0203 	bic.w	r2, r2, #3
 8009312:	3204      	adds	r2, #4
 8009314:	f104 0115 	add.w	r1, r4, #21
 8009318:	428f      	cmp	r7, r1
 800931a:	bf38      	it	cc
 800931c:	2204      	movcc	r2, #4
 800931e:	9201      	str	r2, [sp, #4]
 8009320:	9a02      	ldr	r2, [sp, #8]
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	429a      	cmp	r2, r3
 8009326:	d80c      	bhi.n	8009342 <__multiply+0x9e>
 8009328:	2e00      	cmp	r6, #0
 800932a:	dd03      	ble.n	8009334 <__multiply+0x90>
 800932c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009330:	2b00      	cmp	r3, #0
 8009332:	d05b      	beq.n	80093ec <__multiply+0x148>
 8009334:	6106      	str	r6, [r0, #16]
 8009336:	b005      	add	sp, #20
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	f843 2b04 	str.w	r2, [r3], #4
 8009340:	e7d8      	b.n	80092f4 <__multiply+0x50>
 8009342:	f8b3 a000 	ldrh.w	sl, [r3]
 8009346:	f1ba 0f00 	cmp.w	sl, #0
 800934a:	d024      	beq.n	8009396 <__multiply+0xf2>
 800934c:	f104 0e14 	add.w	lr, r4, #20
 8009350:	46a9      	mov	r9, r5
 8009352:	f04f 0c00 	mov.w	ip, #0
 8009356:	f85e 2b04 	ldr.w	r2, [lr], #4
 800935a:	f8d9 1000 	ldr.w	r1, [r9]
 800935e:	fa1f fb82 	uxth.w	fp, r2
 8009362:	b289      	uxth	r1, r1
 8009364:	fb0a 110b 	mla	r1, sl, fp, r1
 8009368:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800936c:	f8d9 2000 	ldr.w	r2, [r9]
 8009370:	4461      	add	r1, ip
 8009372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009376:	fb0a c20b 	mla	r2, sl, fp, ip
 800937a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800937e:	b289      	uxth	r1, r1
 8009380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009384:	4577      	cmp	r7, lr
 8009386:	f849 1b04 	str.w	r1, [r9], #4
 800938a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800938e:	d8e2      	bhi.n	8009356 <__multiply+0xb2>
 8009390:	9a01      	ldr	r2, [sp, #4]
 8009392:	f845 c002 	str.w	ip, [r5, r2]
 8009396:	9a03      	ldr	r2, [sp, #12]
 8009398:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800939c:	3304      	adds	r3, #4
 800939e:	f1b9 0f00 	cmp.w	r9, #0
 80093a2:	d021      	beq.n	80093e8 <__multiply+0x144>
 80093a4:	6829      	ldr	r1, [r5, #0]
 80093a6:	f104 0c14 	add.w	ip, r4, #20
 80093aa:	46ae      	mov	lr, r5
 80093ac:	f04f 0a00 	mov.w	sl, #0
 80093b0:	f8bc b000 	ldrh.w	fp, [ip]
 80093b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093b8:	fb09 220b 	mla	r2, r9, fp, r2
 80093bc:	4452      	add	r2, sl
 80093be:	b289      	uxth	r1, r1
 80093c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093c4:	f84e 1b04 	str.w	r1, [lr], #4
 80093c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093d0:	f8be 1000 	ldrh.w	r1, [lr]
 80093d4:	fb09 110a 	mla	r1, r9, sl, r1
 80093d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093dc:	4567      	cmp	r7, ip
 80093de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093e2:	d8e5      	bhi.n	80093b0 <__multiply+0x10c>
 80093e4:	9a01      	ldr	r2, [sp, #4]
 80093e6:	50a9      	str	r1, [r5, r2]
 80093e8:	3504      	adds	r5, #4
 80093ea:	e799      	b.n	8009320 <__multiply+0x7c>
 80093ec:	3e01      	subs	r6, #1
 80093ee:	e79b      	b.n	8009328 <__multiply+0x84>
 80093f0:	0800a0e0 	.word	0x0800a0e0
 80093f4:	0800a0f1 	.word	0x0800a0f1

080093f8 <__pow5mult>:
 80093f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093fc:	4615      	mov	r5, r2
 80093fe:	f012 0203 	ands.w	r2, r2, #3
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	d007      	beq.n	8009418 <__pow5mult+0x20>
 8009408:	4c25      	ldr	r4, [pc, #148]	; (80094a0 <__pow5mult+0xa8>)
 800940a:	3a01      	subs	r2, #1
 800940c:	2300      	movs	r3, #0
 800940e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009412:	f7ff fe9d 	bl	8009150 <__multadd>
 8009416:	4607      	mov	r7, r0
 8009418:	10ad      	asrs	r5, r5, #2
 800941a:	d03d      	beq.n	8009498 <__pow5mult+0xa0>
 800941c:	69f4      	ldr	r4, [r6, #28]
 800941e:	b97c      	cbnz	r4, 8009440 <__pow5mult+0x48>
 8009420:	2010      	movs	r0, #16
 8009422:	f7ff fd7f 	bl	8008f24 <malloc>
 8009426:	4602      	mov	r2, r0
 8009428:	61f0      	str	r0, [r6, #28]
 800942a:	b928      	cbnz	r0, 8009438 <__pow5mult+0x40>
 800942c:	4b1d      	ldr	r3, [pc, #116]	; (80094a4 <__pow5mult+0xac>)
 800942e:	481e      	ldr	r0, [pc, #120]	; (80094a8 <__pow5mult+0xb0>)
 8009430:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009434:	f000 fc3a 	bl	8009cac <__assert_func>
 8009438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800943c:	6004      	str	r4, [r0, #0]
 800943e:	60c4      	str	r4, [r0, #12]
 8009440:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009448:	b94c      	cbnz	r4, 800945e <__pow5mult+0x66>
 800944a:	f240 2171 	movw	r1, #625	; 0x271
 800944e:	4630      	mov	r0, r6
 8009450:	f7ff ff12 	bl	8009278 <__i2b>
 8009454:	2300      	movs	r3, #0
 8009456:	f8c8 0008 	str.w	r0, [r8, #8]
 800945a:	4604      	mov	r4, r0
 800945c:	6003      	str	r3, [r0, #0]
 800945e:	f04f 0900 	mov.w	r9, #0
 8009462:	07eb      	lsls	r3, r5, #31
 8009464:	d50a      	bpl.n	800947c <__pow5mult+0x84>
 8009466:	4639      	mov	r1, r7
 8009468:	4622      	mov	r2, r4
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ff1a 	bl	80092a4 <__multiply>
 8009470:	4639      	mov	r1, r7
 8009472:	4680      	mov	r8, r0
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff fe49 	bl	800910c <_Bfree>
 800947a:	4647      	mov	r7, r8
 800947c:	106d      	asrs	r5, r5, #1
 800947e:	d00b      	beq.n	8009498 <__pow5mult+0xa0>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	b938      	cbnz	r0, 8009494 <__pow5mult+0x9c>
 8009484:	4622      	mov	r2, r4
 8009486:	4621      	mov	r1, r4
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff ff0b 	bl	80092a4 <__multiply>
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f8c0 9000 	str.w	r9, [r0]
 8009494:	4604      	mov	r4, r0
 8009496:	e7e4      	b.n	8009462 <__pow5mult+0x6a>
 8009498:	4638      	mov	r0, r7
 800949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949e:	bf00      	nop
 80094a0:	0800a240 	.word	0x0800a240
 80094a4:	0800a071 	.word	0x0800a071
 80094a8:	0800a0f1 	.word	0x0800a0f1

080094ac <__lshift>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	460c      	mov	r4, r1
 80094b2:	6849      	ldr	r1, [r1, #4]
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ba:	68a3      	ldr	r3, [r4, #8]
 80094bc:	4607      	mov	r7, r0
 80094be:	4691      	mov	r9, r2
 80094c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094c4:	f108 0601 	add.w	r6, r8, #1
 80094c8:	42b3      	cmp	r3, r6
 80094ca:	db0b      	blt.n	80094e4 <__lshift+0x38>
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7ff fddd 	bl	800908c <_Balloc>
 80094d2:	4605      	mov	r5, r0
 80094d4:	b948      	cbnz	r0, 80094ea <__lshift+0x3e>
 80094d6:	4602      	mov	r2, r0
 80094d8:	4b28      	ldr	r3, [pc, #160]	; (800957c <__lshift+0xd0>)
 80094da:	4829      	ldr	r0, [pc, #164]	; (8009580 <__lshift+0xd4>)
 80094dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80094e0:	f000 fbe4 	bl	8009cac <__assert_func>
 80094e4:	3101      	adds	r1, #1
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	e7ee      	b.n	80094c8 <__lshift+0x1c>
 80094ea:	2300      	movs	r3, #0
 80094ec:	f100 0114 	add.w	r1, r0, #20
 80094f0:	f100 0210 	add.w	r2, r0, #16
 80094f4:	4618      	mov	r0, r3
 80094f6:	4553      	cmp	r3, sl
 80094f8:	db33      	blt.n	8009562 <__lshift+0xb6>
 80094fa:	6920      	ldr	r0, [r4, #16]
 80094fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009500:	f104 0314 	add.w	r3, r4, #20
 8009504:	f019 091f 	ands.w	r9, r9, #31
 8009508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800950c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009510:	d02b      	beq.n	800956a <__lshift+0xbe>
 8009512:	f1c9 0e20 	rsb	lr, r9, #32
 8009516:	468a      	mov	sl, r1
 8009518:	2200      	movs	r2, #0
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	fa00 f009 	lsl.w	r0, r0, r9
 8009520:	4310      	orrs	r0, r2
 8009522:	f84a 0b04 	str.w	r0, [sl], #4
 8009526:	f853 2b04 	ldr.w	r2, [r3], #4
 800952a:	459c      	cmp	ip, r3
 800952c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009530:	d8f3      	bhi.n	800951a <__lshift+0x6e>
 8009532:	ebac 0304 	sub.w	r3, ip, r4
 8009536:	3b15      	subs	r3, #21
 8009538:	f023 0303 	bic.w	r3, r3, #3
 800953c:	3304      	adds	r3, #4
 800953e:	f104 0015 	add.w	r0, r4, #21
 8009542:	4584      	cmp	ip, r0
 8009544:	bf38      	it	cc
 8009546:	2304      	movcc	r3, #4
 8009548:	50ca      	str	r2, [r1, r3]
 800954a:	b10a      	cbz	r2, 8009550 <__lshift+0xa4>
 800954c:	f108 0602 	add.w	r6, r8, #2
 8009550:	3e01      	subs	r6, #1
 8009552:	4638      	mov	r0, r7
 8009554:	612e      	str	r6, [r5, #16]
 8009556:	4621      	mov	r1, r4
 8009558:	f7ff fdd8 	bl	800910c <_Bfree>
 800955c:	4628      	mov	r0, r5
 800955e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009562:	f842 0f04 	str.w	r0, [r2, #4]!
 8009566:	3301      	adds	r3, #1
 8009568:	e7c5      	b.n	80094f6 <__lshift+0x4a>
 800956a:	3904      	subs	r1, #4
 800956c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009570:	f841 2f04 	str.w	r2, [r1, #4]!
 8009574:	459c      	cmp	ip, r3
 8009576:	d8f9      	bhi.n	800956c <__lshift+0xc0>
 8009578:	e7ea      	b.n	8009550 <__lshift+0xa4>
 800957a:	bf00      	nop
 800957c:	0800a0e0 	.word	0x0800a0e0
 8009580:	0800a0f1 	.word	0x0800a0f1

08009584 <__mcmp>:
 8009584:	b530      	push	{r4, r5, lr}
 8009586:	6902      	ldr	r2, [r0, #16]
 8009588:	690c      	ldr	r4, [r1, #16]
 800958a:	1b12      	subs	r2, r2, r4
 800958c:	d10e      	bne.n	80095ac <__mcmp+0x28>
 800958e:	f100 0314 	add.w	r3, r0, #20
 8009592:	3114      	adds	r1, #20
 8009594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800959c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095a4:	42a5      	cmp	r5, r4
 80095a6:	d003      	beq.n	80095b0 <__mcmp+0x2c>
 80095a8:	d305      	bcc.n	80095b6 <__mcmp+0x32>
 80095aa:	2201      	movs	r2, #1
 80095ac:	4610      	mov	r0, r2
 80095ae:	bd30      	pop	{r4, r5, pc}
 80095b0:	4283      	cmp	r3, r0
 80095b2:	d3f3      	bcc.n	800959c <__mcmp+0x18>
 80095b4:	e7fa      	b.n	80095ac <__mcmp+0x28>
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ba:	e7f7      	b.n	80095ac <__mcmp+0x28>

080095bc <__mdiff>:
 80095bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c0:	460c      	mov	r4, r1
 80095c2:	4606      	mov	r6, r0
 80095c4:	4611      	mov	r1, r2
 80095c6:	4620      	mov	r0, r4
 80095c8:	4690      	mov	r8, r2
 80095ca:	f7ff ffdb 	bl	8009584 <__mcmp>
 80095ce:	1e05      	subs	r5, r0, #0
 80095d0:	d110      	bne.n	80095f4 <__mdiff+0x38>
 80095d2:	4629      	mov	r1, r5
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff fd59 	bl	800908c <_Balloc>
 80095da:	b930      	cbnz	r0, 80095ea <__mdiff+0x2e>
 80095dc:	4b3a      	ldr	r3, [pc, #232]	; (80096c8 <__mdiff+0x10c>)
 80095de:	4602      	mov	r2, r0
 80095e0:	f240 2137 	movw	r1, #567	; 0x237
 80095e4:	4839      	ldr	r0, [pc, #228]	; (80096cc <__mdiff+0x110>)
 80095e6:	f000 fb61 	bl	8009cac <__assert_func>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	bfa4      	itt	ge
 80095f6:	4643      	movge	r3, r8
 80095f8:	46a0      	movge	r8, r4
 80095fa:	4630      	mov	r0, r6
 80095fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009600:	bfa6      	itte	ge
 8009602:	461c      	movge	r4, r3
 8009604:	2500      	movge	r5, #0
 8009606:	2501      	movlt	r5, #1
 8009608:	f7ff fd40 	bl	800908c <_Balloc>
 800960c:	b920      	cbnz	r0, 8009618 <__mdiff+0x5c>
 800960e:	4b2e      	ldr	r3, [pc, #184]	; (80096c8 <__mdiff+0x10c>)
 8009610:	4602      	mov	r2, r0
 8009612:	f240 2145 	movw	r1, #581	; 0x245
 8009616:	e7e5      	b.n	80095e4 <__mdiff+0x28>
 8009618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800961c:	6926      	ldr	r6, [r4, #16]
 800961e:	60c5      	str	r5, [r0, #12]
 8009620:	f104 0914 	add.w	r9, r4, #20
 8009624:	f108 0514 	add.w	r5, r8, #20
 8009628:	f100 0e14 	add.w	lr, r0, #20
 800962c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009634:	f108 0210 	add.w	r2, r8, #16
 8009638:	46f2      	mov	sl, lr
 800963a:	2100      	movs	r1, #0
 800963c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009644:	fa11 f88b 	uxtah	r8, r1, fp
 8009648:	b299      	uxth	r1, r3
 800964a:	0c1b      	lsrs	r3, r3, #16
 800964c:	eba8 0801 	sub.w	r8, r8, r1
 8009650:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009654:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009658:	fa1f f888 	uxth.w	r8, r8
 800965c:	1419      	asrs	r1, r3, #16
 800965e:	454e      	cmp	r6, r9
 8009660:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009664:	f84a 3b04 	str.w	r3, [sl], #4
 8009668:	d8e8      	bhi.n	800963c <__mdiff+0x80>
 800966a:	1b33      	subs	r3, r6, r4
 800966c:	3b15      	subs	r3, #21
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	3304      	adds	r3, #4
 8009674:	3415      	adds	r4, #21
 8009676:	42a6      	cmp	r6, r4
 8009678:	bf38      	it	cc
 800967a:	2304      	movcc	r3, #4
 800967c:	441d      	add	r5, r3
 800967e:	4473      	add	r3, lr
 8009680:	469e      	mov	lr, r3
 8009682:	462e      	mov	r6, r5
 8009684:	4566      	cmp	r6, ip
 8009686:	d30e      	bcc.n	80096a6 <__mdiff+0xea>
 8009688:	f10c 0203 	add.w	r2, ip, #3
 800968c:	1b52      	subs	r2, r2, r5
 800968e:	f022 0203 	bic.w	r2, r2, #3
 8009692:	3d03      	subs	r5, #3
 8009694:	45ac      	cmp	ip, r5
 8009696:	bf38      	it	cc
 8009698:	2200      	movcc	r2, #0
 800969a:	4413      	add	r3, r2
 800969c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096a0:	b17a      	cbz	r2, 80096c2 <__mdiff+0x106>
 80096a2:	6107      	str	r7, [r0, #16]
 80096a4:	e7a4      	b.n	80095f0 <__mdiff+0x34>
 80096a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80096aa:	fa11 f288 	uxtah	r2, r1, r8
 80096ae:	1414      	asrs	r4, r2, #16
 80096b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096b4:	b292      	uxth	r2, r2
 80096b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096ba:	f84e 2b04 	str.w	r2, [lr], #4
 80096be:	1421      	asrs	r1, r4, #16
 80096c0:	e7e0      	b.n	8009684 <__mdiff+0xc8>
 80096c2:	3f01      	subs	r7, #1
 80096c4:	e7ea      	b.n	800969c <__mdiff+0xe0>
 80096c6:	bf00      	nop
 80096c8:	0800a0e0 	.word	0x0800a0e0
 80096cc:	0800a0f1 	.word	0x0800a0f1

080096d0 <__d2b>:
 80096d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	460f      	mov	r7, r1
 80096d6:	2101      	movs	r1, #1
 80096d8:	ec59 8b10 	vmov	r8, r9, d0
 80096dc:	4616      	mov	r6, r2
 80096de:	f7ff fcd5 	bl	800908c <_Balloc>
 80096e2:	4604      	mov	r4, r0
 80096e4:	b930      	cbnz	r0, 80096f4 <__d2b+0x24>
 80096e6:	4602      	mov	r2, r0
 80096e8:	4b24      	ldr	r3, [pc, #144]	; (800977c <__d2b+0xac>)
 80096ea:	4825      	ldr	r0, [pc, #148]	; (8009780 <__d2b+0xb0>)
 80096ec:	f240 310f 	movw	r1, #783	; 0x30f
 80096f0:	f000 fadc 	bl	8009cac <__assert_func>
 80096f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096fc:	bb2d      	cbnz	r5, 800974a <__d2b+0x7a>
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	f1b8 0300 	subs.w	r3, r8, #0
 8009704:	d026      	beq.n	8009754 <__d2b+0x84>
 8009706:	4668      	mov	r0, sp
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	f7ff fd87 	bl	800921c <__lo0bits>
 800970e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009712:	b1e8      	cbz	r0, 8009750 <__d2b+0x80>
 8009714:	f1c0 0320 	rsb	r3, r0, #32
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	430b      	orrs	r3, r1
 800971e:	40c2      	lsrs	r2, r0
 8009720:	6163      	str	r3, [r4, #20]
 8009722:	9201      	str	r2, [sp, #4]
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	61a3      	str	r3, [r4, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bf14      	ite	ne
 800972c:	2202      	movne	r2, #2
 800972e:	2201      	moveq	r2, #1
 8009730:	6122      	str	r2, [r4, #16]
 8009732:	b1bd      	cbz	r5, 8009764 <__d2b+0x94>
 8009734:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009738:	4405      	add	r5, r0
 800973a:	603d      	str	r5, [r7, #0]
 800973c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009740:	6030      	str	r0, [r6, #0]
 8009742:	4620      	mov	r0, r4
 8009744:	b003      	add	sp, #12
 8009746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800974a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800974e:	e7d6      	b.n	80096fe <__d2b+0x2e>
 8009750:	6161      	str	r1, [r4, #20]
 8009752:	e7e7      	b.n	8009724 <__d2b+0x54>
 8009754:	a801      	add	r0, sp, #4
 8009756:	f7ff fd61 	bl	800921c <__lo0bits>
 800975a:	9b01      	ldr	r3, [sp, #4]
 800975c:	6163      	str	r3, [r4, #20]
 800975e:	3020      	adds	r0, #32
 8009760:	2201      	movs	r2, #1
 8009762:	e7e5      	b.n	8009730 <__d2b+0x60>
 8009764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800976c:	6038      	str	r0, [r7, #0]
 800976e:	6918      	ldr	r0, [r3, #16]
 8009770:	f7ff fd34 	bl	80091dc <__hi0bits>
 8009774:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009778:	e7e2      	b.n	8009740 <__d2b+0x70>
 800977a:	bf00      	nop
 800977c:	0800a0e0 	.word	0x0800a0e0
 8009780:	0800a0f1 	.word	0x0800a0f1

08009784 <__sfputc_r>:
 8009784:	6893      	ldr	r3, [r2, #8]
 8009786:	3b01      	subs	r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	b410      	push	{r4}
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	da08      	bge.n	80097a2 <__sfputc_r+0x1e>
 8009790:	6994      	ldr	r4, [r2, #24]
 8009792:	42a3      	cmp	r3, r4
 8009794:	db01      	blt.n	800979a <__sfputc_r+0x16>
 8009796:	290a      	cmp	r1, #10
 8009798:	d103      	bne.n	80097a2 <__sfputc_r+0x1e>
 800979a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979e:	f7fe bbe4 	b.w	8007f6a <__swbuf_r>
 80097a2:	6813      	ldr	r3, [r2, #0]
 80097a4:	1c58      	adds	r0, r3, #1
 80097a6:	6010      	str	r0, [r2, #0]
 80097a8:	7019      	strb	r1, [r3, #0]
 80097aa:	4608      	mov	r0, r1
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <__sfputs_r>:
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	4614      	mov	r4, r2
 80097ba:	18d5      	adds	r5, r2, r3
 80097bc:	42ac      	cmp	r4, r5
 80097be:	d101      	bne.n	80097c4 <__sfputs_r+0x12>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e007      	b.n	80097d4 <__sfputs_r+0x22>
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	463a      	mov	r2, r7
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ffda 	bl	8009784 <__sfputc_r>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d1f3      	bne.n	80097bc <__sfputs_r+0xa>
 80097d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d8 <_vfiprintf_r>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	460d      	mov	r5, r1
 80097de:	b09d      	sub	sp, #116	; 0x74
 80097e0:	4614      	mov	r4, r2
 80097e2:	4698      	mov	r8, r3
 80097e4:	4606      	mov	r6, r0
 80097e6:	b118      	cbz	r0, 80097f0 <_vfiprintf_r+0x18>
 80097e8:	6a03      	ldr	r3, [r0, #32]
 80097ea:	b90b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x18>
 80097ec:	f7fe fad6 	bl	8007d9c <__sinit>
 80097f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f2:	07d9      	lsls	r1, r3, #31
 80097f4:	d405      	bmi.n	8009802 <_vfiprintf_r+0x2a>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	059a      	lsls	r2, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_vfiprintf_r+0x2a>
 80097fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fe:	f7fe fcc6 	bl	800818e <__retarget_lock_acquire_recursive>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	071b      	lsls	r3, r3, #28
 8009806:	d501      	bpl.n	800980c <_vfiprintf_r+0x34>
 8009808:	692b      	ldr	r3, [r5, #16]
 800980a:	b99b      	cbnz	r3, 8009834 <_vfiprintf_r+0x5c>
 800980c:	4629      	mov	r1, r5
 800980e:	4630      	mov	r0, r6
 8009810:	f7fe fbe8 	bl	8007fe4 <__swsetup_r>
 8009814:	b170      	cbz	r0, 8009834 <_vfiprintf_r+0x5c>
 8009816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009818:	07dc      	lsls	r4, r3, #31
 800981a:	d504      	bpl.n	8009826 <_vfiprintf_r+0x4e>
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	b01d      	add	sp, #116	; 0x74
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	0598      	lsls	r0, r3, #22
 800982a:	d4f7      	bmi.n	800981c <_vfiprintf_r+0x44>
 800982c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982e:	f7fe fcaf 	bl	8008190 <__retarget_lock_release_recursive>
 8009832:	e7f3      	b.n	800981c <_vfiprintf_r+0x44>
 8009834:	2300      	movs	r3, #0
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	2320      	movs	r3, #32
 800983a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009842:	2330      	movs	r3, #48	; 0x30
 8009844:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099f8 <_vfiprintf_r+0x220>
 8009848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984c:	f04f 0901 	mov.w	r9, #1
 8009850:	4623      	mov	r3, r4
 8009852:	469a      	mov	sl, r3
 8009854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009858:	b10a      	cbz	r2, 800985e <_vfiprintf_r+0x86>
 800985a:	2a25      	cmp	r2, #37	; 0x25
 800985c:	d1f9      	bne.n	8009852 <_vfiprintf_r+0x7a>
 800985e:	ebba 0b04 	subs.w	fp, sl, r4
 8009862:	d00b      	beq.n	800987c <_vfiprintf_r+0xa4>
 8009864:	465b      	mov	r3, fp
 8009866:	4622      	mov	r2, r4
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff ffa1 	bl	80097b2 <__sfputs_r>
 8009870:	3001      	adds	r0, #1
 8009872:	f000 80a9 	beq.w	80099c8 <_vfiprintf_r+0x1f0>
 8009876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009878:	445a      	add	r2, fp
 800987a:	9209      	str	r2, [sp, #36]	; 0x24
 800987c:	f89a 3000 	ldrb.w	r3, [sl]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 80a1 	beq.w	80099c8 <_vfiprintf_r+0x1f0>
 8009886:	2300      	movs	r3, #0
 8009888:	f04f 32ff 	mov.w	r2, #4294967295
 800988c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009890:	f10a 0a01 	add.w	sl, sl, #1
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989c:	931a      	str	r3, [sp, #104]	; 0x68
 800989e:	4654      	mov	r4, sl
 80098a0:	2205      	movs	r2, #5
 80098a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a6:	4854      	ldr	r0, [pc, #336]	; (80099f8 <_vfiprintf_r+0x220>)
 80098a8:	f7f6 fc92 	bl	80001d0 <memchr>
 80098ac:	9a04      	ldr	r2, [sp, #16]
 80098ae:	b9d8      	cbnz	r0, 80098e8 <_vfiprintf_r+0x110>
 80098b0:	06d1      	lsls	r1, r2, #27
 80098b2:	bf44      	itt	mi
 80098b4:	2320      	movmi	r3, #32
 80098b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ba:	0713      	lsls	r3, r2, #28
 80098bc:	bf44      	itt	mi
 80098be:	232b      	movmi	r3, #43	; 0x2b
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c4:	f89a 3000 	ldrb.w	r3, [sl]
 80098c8:	2b2a      	cmp	r3, #42	; 0x2a
 80098ca:	d015      	beq.n	80098f8 <_vfiprintf_r+0x120>
 80098cc:	9a07      	ldr	r2, [sp, #28]
 80098ce:	4654      	mov	r4, sl
 80098d0:	2000      	movs	r0, #0
 80098d2:	f04f 0c0a 	mov.w	ip, #10
 80098d6:	4621      	mov	r1, r4
 80098d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098dc:	3b30      	subs	r3, #48	; 0x30
 80098de:	2b09      	cmp	r3, #9
 80098e0:	d94d      	bls.n	800997e <_vfiprintf_r+0x1a6>
 80098e2:	b1b0      	cbz	r0, 8009912 <_vfiprintf_r+0x13a>
 80098e4:	9207      	str	r2, [sp, #28]
 80098e6:	e014      	b.n	8009912 <_vfiprintf_r+0x13a>
 80098e8:	eba0 0308 	sub.w	r3, r0, r8
 80098ec:	fa09 f303 	lsl.w	r3, r9, r3
 80098f0:	4313      	orrs	r3, r2
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	46a2      	mov	sl, r4
 80098f6:	e7d2      	b.n	800989e <_vfiprintf_r+0xc6>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	1d19      	adds	r1, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	9103      	str	r1, [sp, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	bfbb      	ittet	lt
 8009904:	425b      	neglt	r3, r3
 8009906:	f042 0202 	orrlt.w	r2, r2, #2
 800990a:	9307      	strge	r3, [sp, #28]
 800990c:	9307      	strlt	r3, [sp, #28]
 800990e:	bfb8      	it	lt
 8009910:	9204      	strlt	r2, [sp, #16]
 8009912:	7823      	ldrb	r3, [r4, #0]
 8009914:	2b2e      	cmp	r3, #46	; 0x2e
 8009916:	d10c      	bne.n	8009932 <_vfiprintf_r+0x15a>
 8009918:	7863      	ldrb	r3, [r4, #1]
 800991a:	2b2a      	cmp	r3, #42	; 0x2a
 800991c:	d134      	bne.n	8009988 <_vfiprintf_r+0x1b0>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	9203      	str	r2, [sp, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfb8      	it	lt
 800992a:	f04f 33ff 	movlt.w	r3, #4294967295
 800992e:	3402      	adds	r4, #2
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a08 <_vfiprintf_r+0x230>
 8009936:	7821      	ldrb	r1, [r4, #0]
 8009938:	2203      	movs	r2, #3
 800993a:	4650      	mov	r0, sl
 800993c:	f7f6 fc48 	bl	80001d0 <memchr>
 8009940:	b138      	cbz	r0, 8009952 <_vfiprintf_r+0x17a>
 8009942:	9b04      	ldr	r3, [sp, #16]
 8009944:	eba0 000a 	sub.w	r0, r0, sl
 8009948:	2240      	movs	r2, #64	; 0x40
 800994a:	4082      	lsls	r2, r0
 800994c:	4313      	orrs	r3, r2
 800994e:	3401      	adds	r4, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4829      	ldr	r0, [pc, #164]	; (80099fc <_vfiprintf_r+0x224>)
 8009958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995c:	2206      	movs	r2, #6
 800995e:	f7f6 fc37 	bl	80001d0 <memchr>
 8009962:	2800      	cmp	r0, #0
 8009964:	d03f      	beq.n	80099e6 <_vfiprintf_r+0x20e>
 8009966:	4b26      	ldr	r3, [pc, #152]	; (8009a00 <_vfiprintf_r+0x228>)
 8009968:	bb1b      	cbnz	r3, 80099b2 <_vfiprintf_r+0x1da>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	3308      	adds	r3, #8
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	443b      	add	r3, r7
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	e768      	b.n	8009850 <_vfiprintf_r+0x78>
 800997e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009982:	460c      	mov	r4, r1
 8009984:	2001      	movs	r0, #1
 8009986:	e7a6      	b.n	80098d6 <_vfiprintf_r+0xfe>
 8009988:	2300      	movs	r3, #0
 800998a:	3401      	adds	r4, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	4619      	mov	r1, r3
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999a:	3a30      	subs	r2, #48	; 0x30
 800999c:	2a09      	cmp	r2, #9
 800999e:	d903      	bls.n	80099a8 <_vfiprintf_r+0x1d0>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c6      	beq.n	8009932 <_vfiprintf_r+0x15a>
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	e7c4      	b.n	8009932 <_vfiprintf_r+0x15a>
 80099a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ac:	4604      	mov	r4, r0
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7f0      	b.n	8009994 <_vfiprintf_r+0x1bc>
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	462a      	mov	r2, r5
 80099b8:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <_vfiprintf_r+0x22c>)
 80099ba:	a904      	add	r1, sp, #16
 80099bc:	4630      	mov	r0, r6
 80099be:	f7fd fd9b 	bl	80074f8 <_printf_float>
 80099c2:	4607      	mov	r7, r0
 80099c4:	1c78      	adds	r0, r7, #1
 80099c6:	d1d6      	bne.n	8009976 <_vfiprintf_r+0x19e>
 80099c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ca:	07d9      	lsls	r1, r3, #31
 80099cc:	d405      	bmi.n	80099da <_vfiprintf_r+0x202>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	059a      	lsls	r2, r3, #22
 80099d2:	d402      	bmi.n	80099da <_vfiprintf_r+0x202>
 80099d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d6:	f7fe fbdb 	bl	8008190 <__retarget_lock_release_recursive>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	065b      	lsls	r3, r3, #25
 80099de:	f53f af1d 	bmi.w	800981c <_vfiprintf_r+0x44>
 80099e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099e4:	e71c      	b.n	8009820 <_vfiprintf_r+0x48>
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_vfiprintf_r+0x22c>)
 80099ee:	a904      	add	r1, sp, #16
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7fe f825 	bl	8007a40 <_printf_i>
 80099f6:	e7e4      	b.n	80099c2 <_vfiprintf_r+0x1ea>
 80099f8:	0800a24c 	.word	0x0800a24c
 80099fc:	0800a256 	.word	0x0800a256
 8009a00:	080074f9 	.word	0x080074f9
 8009a04:	080097b3 	.word	0x080097b3
 8009a08:	0800a252 	.word	0x0800a252

08009a0c <__sflush_r>:
 8009a0c:	898a      	ldrh	r2, [r1, #12]
 8009a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a12:	4605      	mov	r5, r0
 8009a14:	0710      	lsls	r0, r2, #28
 8009a16:	460c      	mov	r4, r1
 8009a18:	d458      	bmi.n	8009acc <__sflush_r+0xc0>
 8009a1a:	684b      	ldr	r3, [r1, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dc05      	bgt.n	8009a2c <__sflush_r+0x20>
 8009a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dc02      	bgt.n	8009a2c <__sflush_r+0x20>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	d0f9      	beq.n	8009a26 <__sflush_r+0x1a>
 8009a32:	2300      	movs	r3, #0
 8009a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a38:	682f      	ldr	r7, [r5, #0]
 8009a3a:	6a21      	ldr	r1, [r4, #32]
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	d032      	beq.n	8009aa6 <__sflush_r+0x9a>
 8009a40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	075a      	lsls	r2, r3, #29
 8009a46:	d505      	bpl.n	8009a54 <__sflush_r+0x48>
 8009a48:	6863      	ldr	r3, [r4, #4]
 8009a4a:	1ac0      	subs	r0, r0, r3
 8009a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a4e:	b10b      	cbz	r3, 8009a54 <__sflush_r+0x48>
 8009a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a52:	1ac0      	subs	r0, r0, r3
 8009a54:	2300      	movs	r3, #0
 8009a56:	4602      	mov	r2, r0
 8009a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a5a:	6a21      	ldr	r1, [r4, #32]
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b0      	blx	r6
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	d106      	bne.n	8009a74 <__sflush_r+0x68>
 8009a66:	6829      	ldr	r1, [r5, #0]
 8009a68:	291d      	cmp	r1, #29
 8009a6a:	d82b      	bhi.n	8009ac4 <__sflush_r+0xb8>
 8009a6c:	4a29      	ldr	r2, [pc, #164]	; (8009b14 <__sflush_r+0x108>)
 8009a6e:	410a      	asrs	r2, r1
 8009a70:	07d6      	lsls	r6, r2, #31
 8009a72:	d427      	bmi.n	8009ac4 <__sflush_r+0xb8>
 8009a74:	2200      	movs	r2, #0
 8009a76:	6062      	str	r2, [r4, #4]
 8009a78:	04d9      	lsls	r1, r3, #19
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	d504      	bpl.n	8009a8a <__sflush_r+0x7e>
 8009a80:	1c42      	adds	r2, r0, #1
 8009a82:	d101      	bne.n	8009a88 <__sflush_r+0x7c>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b903      	cbnz	r3, 8009a8a <__sflush_r+0x7e>
 8009a88:	6560      	str	r0, [r4, #84]	; 0x54
 8009a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a8c:	602f      	str	r7, [r5, #0]
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	d0c9      	beq.n	8009a26 <__sflush_r+0x1a>
 8009a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a96:	4299      	cmp	r1, r3
 8009a98:	d002      	beq.n	8009aa0 <__sflush_r+0x94>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f7ff f9f6 	bl	8008e8c <_free_r>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	6360      	str	r0, [r4, #52]	; 0x34
 8009aa4:	e7c0      	b.n	8009a28 <__sflush_r+0x1c>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b0      	blx	r6
 8009aac:	1c41      	adds	r1, r0, #1
 8009aae:	d1c8      	bne.n	8009a42 <__sflush_r+0x36>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0c5      	beq.n	8009a42 <__sflush_r+0x36>
 8009ab6:	2b1d      	cmp	r3, #29
 8009ab8:	d001      	beq.n	8009abe <__sflush_r+0xb2>
 8009aba:	2b16      	cmp	r3, #22
 8009abc:	d101      	bne.n	8009ac2 <__sflush_r+0xb6>
 8009abe:	602f      	str	r7, [r5, #0]
 8009ac0:	e7b1      	b.n	8009a26 <__sflush_r+0x1a>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	e7ad      	b.n	8009a28 <__sflush_r+0x1c>
 8009acc:	690f      	ldr	r7, [r1, #16]
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	d0a9      	beq.n	8009a26 <__sflush_r+0x1a>
 8009ad2:	0793      	lsls	r3, r2, #30
 8009ad4:	680e      	ldr	r6, [r1, #0]
 8009ad6:	bf08      	it	eq
 8009ad8:	694b      	ldreq	r3, [r1, #20]
 8009ada:	600f      	str	r7, [r1, #0]
 8009adc:	bf18      	it	ne
 8009ade:	2300      	movne	r3, #0
 8009ae0:	eba6 0807 	sub.w	r8, r6, r7
 8009ae4:	608b      	str	r3, [r1, #8]
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	dd9c      	ble.n	8009a26 <__sflush_r+0x1a>
 8009aec:	6a21      	ldr	r1, [r4, #32]
 8009aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009af0:	4643      	mov	r3, r8
 8009af2:	463a      	mov	r2, r7
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b0      	blx	r6
 8009af8:	2800      	cmp	r0, #0
 8009afa:	dc06      	bgt.n	8009b0a <__sflush_r+0xfe>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	e78e      	b.n	8009a28 <__sflush_r+0x1c>
 8009b0a:	4407      	add	r7, r0
 8009b0c:	eba8 0800 	sub.w	r8, r8, r0
 8009b10:	e7e9      	b.n	8009ae6 <__sflush_r+0xda>
 8009b12:	bf00      	nop
 8009b14:	dfbffffe 	.word	0xdfbffffe

08009b18 <_fflush_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b913      	cbnz	r3, 8009b28 <_fflush_r+0x10>
 8009b22:	2500      	movs	r5, #0
 8009b24:	4628      	mov	r0, r5
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	b118      	cbz	r0, 8009b32 <_fflush_r+0x1a>
 8009b2a:	6a03      	ldr	r3, [r0, #32]
 8009b2c:	b90b      	cbnz	r3, 8009b32 <_fflush_r+0x1a>
 8009b2e:	f7fe f935 	bl	8007d9c <__sinit>
 8009b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0f3      	beq.n	8009b22 <_fflush_r+0xa>
 8009b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b3c:	07d0      	lsls	r0, r2, #31
 8009b3e:	d404      	bmi.n	8009b4a <_fflush_r+0x32>
 8009b40:	0599      	lsls	r1, r3, #22
 8009b42:	d402      	bmi.n	8009b4a <_fflush_r+0x32>
 8009b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b46:	f7fe fb22 	bl	800818e <__retarget_lock_acquire_recursive>
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	f7ff ff5d 	bl	8009a0c <__sflush_r>
 8009b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b54:	07da      	lsls	r2, r3, #31
 8009b56:	4605      	mov	r5, r0
 8009b58:	d4e4      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	059b      	lsls	r3, r3, #22
 8009b5e:	d4e1      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b62:	f7fe fb15 	bl	8008190 <__retarget_lock_release_recursive>
 8009b66:	e7dd      	b.n	8009b24 <_fflush_r+0xc>

08009b68 <__swhatbuf_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	b096      	sub	sp, #88	; 0x58
 8009b74:	4615      	mov	r5, r2
 8009b76:	461e      	mov	r6, r3
 8009b78:	da0d      	bge.n	8009b96 <__swhatbuf_r+0x2e>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	bf0c      	ite	eq
 8009b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b8a:	2340      	movne	r3, #64	; 0x40
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	6031      	str	r1, [r6, #0]
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	b016      	add	sp, #88	; 0x58
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
 8009b96:	466a      	mov	r2, sp
 8009b98:	f000 f848 	bl	8009c2c <_fstat_r>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	dbec      	blt.n	8009b7a <__swhatbuf_r+0x12>
 8009ba0:	9901      	ldr	r1, [sp, #4]
 8009ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009baa:	4259      	negs	r1, r3
 8009bac:	4159      	adcs	r1, r3
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	e7eb      	b.n	8009b8c <__swhatbuf_r+0x24>

08009bb4 <__smakebuf_r>:
 8009bb4:	898b      	ldrh	r3, [r1, #12]
 8009bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb8:	079d      	lsls	r5, r3, #30
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	d507      	bpl.n	8009bd0 <__smakebuf_r+0x1c>
 8009bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	6163      	str	r3, [r4, #20]
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	ab01      	add	r3, sp, #4
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f7ff ffc8 	bl	8009b68 <__swhatbuf_r>
 8009bd8:	9900      	ldr	r1, [sp, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff f9c9 	bl	8008f74 <_malloc_r>
 8009be2:	b948      	cbnz	r0, 8009bf8 <__smakebuf_r+0x44>
 8009be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d4ef      	bmi.n	8009bcc <__smakebuf_r+0x18>
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7e3      	b.n	8009bc0 <__smakebuf_r+0xc>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	6120      	str	r0, [r4, #16]
 8009c0a:	b15b      	cbz	r3, 8009c24 <__smakebuf_r+0x70>
 8009c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 f81d 	bl	8009c50 <_isatty_r>
 8009c16:	b128      	cbz	r0, 8009c24 <__smakebuf_r+0x70>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	431d      	orrs	r5, r3
 8009c28:	81a5      	strh	r5, [r4, #12]
 8009c2a:	e7cf      	b.n	8009bcc <__smakebuf_r+0x18>

08009c2c <_fstat_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	; (8009c4c <_fstat_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f7f8 ff6a 	bl	8002b12 <_fstat>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_fstat_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_fstat_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200005cc 	.word	0x200005cc

08009c50 <_isatty_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_isatty_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f8 ff69 	bl	8002b32 <_isatty>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_isatty_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_isatty_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	200005cc 	.word	0x200005cc

08009c70 <_sbrk_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_sbrk_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f8 ff72 	bl	8002b64 <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_sbrk_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_sbrk_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	200005cc 	.word	0x200005cc

08009c90 <memcpy>:
 8009c90:	440a      	add	r2, r1
 8009c92:	4291      	cmp	r1, r2
 8009c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c98:	d100      	bne.n	8009c9c <memcpy+0xc>
 8009c9a:	4770      	bx	lr
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ca6:	4291      	cmp	r1, r2
 8009ca8:	d1f9      	bne.n	8009c9e <memcpy+0xe>
 8009caa:	bd10      	pop	{r4, pc}

08009cac <__assert_func>:
 8009cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <__assert_func+0x2c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	68d8      	ldr	r0, [r3, #12]
 8009cba:	b14c      	cbz	r4, 8009cd0 <__assert_func+0x24>
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <__assert_func+0x30>)
 8009cbe:	9100      	str	r1, [sp, #0]
 8009cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc4:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <__assert_func+0x34>)
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f000 f844 	bl	8009d54 <fiprintf>
 8009ccc:	f000 f854 	bl	8009d78 <abort>
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <__assert_func+0x38>)
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	e7f3      	b.n	8009cbe <__assert_func+0x12>
 8009cd6:	bf00      	nop
 8009cd8:	20000064 	.word	0x20000064
 8009cdc:	0800a267 	.word	0x0800a267
 8009ce0:	0800a274 	.word	0x0800a274
 8009ce4:	0800a2a2 	.word	0x0800a2a2

08009ce8 <_calloc_r>:
 8009ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cea:	fba1 2402 	umull	r2, r4, r1, r2
 8009cee:	b94c      	cbnz	r4, 8009d04 <_calloc_r+0x1c>
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	9201      	str	r2, [sp, #4]
 8009cf4:	f7ff f93e 	bl	8008f74 <_malloc_r>
 8009cf8:	9a01      	ldr	r2, [sp, #4]
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	b930      	cbnz	r0, 8009d0c <_calloc_r+0x24>
 8009cfe:	4628      	mov	r0, r5
 8009d00:	b003      	add	sp, #12
 8009d02:	bd30      	pop	{r4, r5, pc}
 8009d04:	220c      	movs	r2, #12
 8009d06:	6002      	str	r2, [r0, #0]
 8009d08:	2500      	movs	r5, #0
 8009d0a:	e7f8      	b.n	8009cfe <_calloc_r+0x16>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7fe f9c1 	bl	8008094 <memset>
 8009d12:	e7f4      	b.n	8009cfe <_calloc_r+0x16>

08009d14 <__ascii_mbtowc>:
 8009d14:	b082      	sub	sp, #8
 8009d16:	b901      	cbnz	r1, 8009d1a <__ascii_mbtowc+0x6>
 8009d18:	a901      	add	r1, sp, #4
 8009d1a:	b142      	cbz	r2, 8009d2e <__ascii_mbtowc+0x1a>
 8009d1c:	b14b      	cbz	r3, 8009d32 <__ascii_mbtowc+0x1e>
 8009d1e:	7813      	ldrb	r3, [r2, #0]
 8009d20:	600b      	str	r3, [r1, #0]
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	1e10      	subs	r0, r2, #0
 8009d26:	bf18      	it	ne
 8009d28:	2001      	movne	r0, #1
 8009d2a:	b002      	add	sp, #8
 8009d2c:	4770      	bx	lr
 8009d2e:	4610      	mov	r0, r2
 8009d30:	e7fb      	b.n	8009d2a <__ascii_mbtowc+0x16>
 8009d32:	f06f 0001 	mvn.w	r0, #1
 8009d36:	e7f8      	b.n	8009d2a <__ascii_mbtowc+0x16>

08009d38 <__ascii_wctomb>:
 8009d38:	b149      	cbz	r1, 8009d4e <__ascii_wctomb+0x16>
 8009d3a:	2aff      	cmp	r2, #255	; 0xff
 8009d3c:	bf85      	ittet	hi
 8009d3e:	238a      	movhi	r3, #138	; 0x8a
 8009d40:	6003      	strhi	r3, [r0, #0]
 8009d42:	700a      	strbls	r2, [r1, #0]
 8009d44:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d48:	bf98      	it	ls
 8009d4a:	2001      	movls	r0, #1
 8009d4c:	4770      	bx	lr
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4770      	bx	lr
	...

08009d54 <fiprintf>:
 8009d54:	b40e      	push	{r1, r2, r3}
 8009d56:	b503      	push	{r0, r1, lr}
 8009d58:	4601      	mov	r1, r0
 8009d5a:	ab03      	add	r3, sp, #12
 8009d5c:	4805      	ldr	r0, [pc, #20]	; (8009d74 <fiprintf+0x20>)
 8009d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	f7ff fd37 	bl	80097d8 <_vfiprintf_r>
 8009d6a:	b002      	add	sp, #8
 8009d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d70:	b003      	add	sp, #12
 8009d72:	4770      	bx	lr
 8009d74:	20000064 	.word	0x20000064

08009d78 <abort>:
 8009d78:	b508      	push	{r3, lr}
 8009d7a:	2006      	movs	r0, #6
 8009d7c:	f000 f82c 	bl	8009dd8 <raise>
 8009d80:	2001      	movs	r0, #1
 8009d82:	f7f8 fe93 	bl	8002aac <_exit>

08009d86 <_raise_r>:
 8009d86:	291f      	cmp	r1, #31
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	d904      	bls.n	8009d9a <_raise_r+0x14>
 8009d90:	2316      	movs	r3, #22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d9c:	b112      	cbz	r2, 8009da4 <_raise_r+0x1e>
 8009d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da2:	b94b      	cbnz	r3, 8009db8 <_raise_r+0x32>
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 f831 	bl	8009e0c <_getpid_r>
 8009daa:	462a      	mov	r2, r5
 8009dac:	4601      	mov	r1, r0
 8009dae:	4620      	mov	r0, r4
 8009db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db4:	f000 b818 	b.w	8009de8 <_kill_r>
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d00a      	beq.n	8009dd2 <_raise_r+0x4c>
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	d103      	bne.n	8009dc8 <_raise_r+0x42>
 8009dc0:	2316      	movs	r3, #22
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	e7e7      	b.n	8009d98 <_raise_r+0x12>
 8009dc8:	2400      	movs	r4, #0
 8009dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4798      	blx	r3
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7e0      	b.n	8009d98 <_raise_r+0x12>
	...

08009dd8 <raise>:
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <raise+0xc>)
 8009dda:	4601      	mov	r1, r0
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	f7ff bfd2 	b.w	8009d86 <_raise_r>
 8009de2:	bf00      	nop
 8009de4:	20000064 	.word	0x20000064

08009de8 <_kill_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	; (8009e08 <_kill_r+0x20>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	4611      	mov	r1, r2
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	f7f8 fe49 	bl	8002a8c <_kill>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	d102      	bne.n	8009e04 <_kill_r+0x1c>
 8009dfe:	682b      	ldr	r3, [r5, #0]
 8009e00:	b103      	cbz	r3, 8009e04 <_kill_r+0x1c>
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	200005cc 	.word	0x200005cc

08009e0c <_getpid_r>:
 8009e0c:	f7f8 be36 	b.w	8002a7c <_getpid>

08009e10 <_init>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	bf00      	nop
 8009e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e16:	bc08      	pop	{r3}
 8009e18:	469e      	mov	lr, r3
 8009e1a:	4770      	bx	lr

08009e1c <_fini>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

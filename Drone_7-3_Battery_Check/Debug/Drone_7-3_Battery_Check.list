
Drone_7-3_Battery_Check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800a368  0800a368  0001a368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ec  0800a8ec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f4  0800a8f4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000004b0  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000684  20000684  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000178df  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e38  00000000  00000000  00037b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001728  00000000  00000000  0003b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011f1  00000000  00000000  0003d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006a53  00000000  00000000  0003e279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d7d9  00000000  00000000  00044ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000deff1  00000000  00000000  000624a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007080  00000000  00000000  00141498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00148518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a350 	.word	0x0800a350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a350 	.word	0x0800a350

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f023 0210 	bic.w	r2, r3, #16
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d101      	bne.n	8000f28 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	330c      	adds	r3, #12
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f007 fac2 	bl	80085d4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001064:	f7ff ffa0 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff85 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff ff82 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff ff7f 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800107a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800107e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001090:	2305      	movs	r3, #5
 8001092:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800109a:	f006 fb36 	bl	800770a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010a6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ba:	2318      	movs	r3, #24
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4834      	ldr	r0, [pc, #208]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010d2:	f006 fbbe 	bl	8007852 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4832      	ldr	r0, [pc, #200]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f7ff fef3 	bl	8000ec4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010e4:	f7ff ff9b 	bl	800101e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	482c      	ldr	r0, [pc, #176]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ee:	f7ff ff96 	bl	800101e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	482d      	ldr	r0, [pc, #180]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 80010f8:	f7ff ff91 	bl	800101e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001118:	f006 faf7 	bl	800770a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001138:	f006 fae7 	bl	800770a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 8001158:	f006 fad7 	bl	800770a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001170:	f006 facb 	bl	800770a <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001176:	f7ff fe95 	bl	8000ea4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001180:	f7ff ff3f 	bl	8001002 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 800118a:	f7ff ff3a 	bl	8001002 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001194:	f7ff ff35 	bl	8001002 <LL_GPIO_SetOutputPin>
}
 8001198:	bf00      	nop
 800119a:	3740      	adds	r7, #64	; 0x40
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020000 	.word	0x40020000

080011b0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011b6:	f7ff ff41 	bl	800103c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <BNO080_Initialization+0xc4>)
 80011bc:	f007 f8c4 	bl	8008348 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <BNO080_Initialization+0xc8>)
 80011c6:	f7ff ff1c 	bl	8001002 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <BNO080_Initialization+0xcc>)
 80011d0:	f7ff ff17 	bl	8001002 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <BNO080_Initialization+0xd0>)
 80011da:	f7ff ff20 	bl	800101e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f002 f8de 	bl	80033a0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <BNO080_Initialization+0xd0>)
 80011ea:	f7ff ff0a 	bl	8001002 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011ee:	f000 f8d7 	bl	80013a0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011f2:	f000 f8d5 	bl	80013a0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f6:	f000 f8f7 	bl	80013e8 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011fa:	f000 f8d1 	bl	80013a0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 f8f3 	bl	80013e8 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <BNO080_Initialization+0xd4>)
 8001204:	22f9      	movs	r2, #249	; 0xf9
 8001206:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <BNO080_Initialization+0xd4>)
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800120e:	2102      	movs	r1, #2
 8001210:	2002      	movs	r0, #2
 8001212:	f000 f959 	bl	80014c8 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001216:	f000 f8c3 	bl	80013a0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800121a:	f000 f8e5 	bl	80013e8 <BNO080_receivePacket>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d11b      	bne.n	800125c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <BNO080_Initialization+0xd8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <BNO080_Initialization+0xd8>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <BNO080_Initialization+0xd8>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	4618      	mov	r0, r3
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <BNO080_Initialization+0xd8>)
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <BNO080_Initialization+0xdc>)
 8001240:	f007 f882 	bl	8008348 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <BNO080_Initialization+0xd4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2bf8      	cmp	r3, #248	; 0xf8
 800124a:	d107      	bne.n	800125c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <BNO080_Initialization+0xe0>)
 8001254:	f007 f878 	bl	8008348 <iprintf>
			return (0);
 8001258:	2300      	movs	r3, #0
 800125a:	e007      	b.n	800126c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <BNO080_Initialization+0xd4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	22f8      	movs	r2, #248	; 0xf8
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <BNO080_Initialization+0xe4>)
 8001266:	f007 f86f 	bl	8008348 <iprintf>
	return (1); //Something went wrong
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800a368 	.word	0x0800a368
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000
 8001280:	40020800 	.word	0x40020800
 8001284:	200001f4 	.word	0x200001f4
 8001288:	200001f0 	.word	0x200001f0
 800128c:	0800a37c 	.word	0x0800a37c
 8001290:	0800a394 	.word	0x0800a394
 8001294:	0800a3b4 	.word	0x0800a3b4

08001298 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a2:	bf00      	nop
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <SPI2_SendByte+0x40>)
 80012a6:	f7ff fe33 	bl	8000f10 <LL_SPI_IsActiveFlag_TXE>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f9      	beq.n	80012a4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <SPI2_SendByte+0x40>)
 80012b6:	f7ff fe4c 	bl	8000f52 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ba:	bf00      	nop
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe14 	bl	8000eea <LL_SPI_IsActiveFlag_RXNE>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <SPI2_SendByte+0x40>)
 80012ca:	f7ff fe34 	bl	8000f36 <LL_SPI_ReceiveData8>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40003800 	.word	0x40003800

080012dc <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	2005      	movs	r0, #5
 80012ee:	f000 f805 	bl	80012fc <BNO080_setFeatureCommand>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800130c:	22fd      	movs	r2, #253	; 0xfd
 800130e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800132e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001338:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001342:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	0e1b      	lsrs	r3, r3, #24
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800134c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800136c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001376:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0c1b      	lsrs	r3, r3, #16
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001380:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0e1b      	lsrs	r3, r3, #24
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800138a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800138c:	2111      	movs	r1, #17
 800138e:	2002      	movs	r0, #2
 8001390:	f000 f89a 	bl	80014c8 <BNO080_sendPacket>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001f4 	.word	0x200001f4

080013a0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e00c      	b.n	80013c6 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <BNO080_waitForSPI+0x40>)
 80013b2:	f7ff fe11 	bl	8000fd8 <LL_GPIO_IsInputPinSet>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013bc:	2301      	movs	r3, #1
 80013be:	e00a      	b.n	80013d6 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d1ee      	bne.n	80013ac <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <BNO080_waitForSPI+0x44>)
 80013d0:	f007 f820 	bl	8008414 <puts>
	return (0);
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020800 	.word	0x40020800
 80013e4:	0800a400 	.word	0x0800a400

080013e8 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	4831      	ldr	r0, [pc, #196]	; (80014b8 <BNO080_receivePacket+0xd0>)
 80013f4:	f7ff fdf0 	bl	8000fd8 <LL_GPIO_IsInputPinSet>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80013fe:	2300      	movs	r3, #0
 8001400:	e056      	b.n	80014b0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001406:	482d      	ldr	r0, [pc, #180]	; (80014bc <BNO080_receivePacket+0xd4>)
 8001408:	f7ff fe09 	bl	800101e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff43 	bl	8001298 <SPI2_SendByte>
 8001412:	4603      	mov	r3, r0
 8001414:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff3e 	bl	8001298 <SPI2_SendByte>
 800141c:	4603      	mov	r3, r0
 800141e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff39 	bl	8001298 <SPI2_SendByte>
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff ff34 	bl	8001298 <SPI2_SendByte>
 8001430:	4603      	mov	r3, r0
 8001432:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <BNO080_receivePacket+0xd8>)
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001440:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800145a:	893b      	ldrh	r3, [r7, #8]
 800145c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001460:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001462:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800146a:	2300      	movs	r3, #0
 800146c:	e020      	b.n	80014b0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	3b04      	subs	r3, #4
 8001472:	b29b      	uxth	r3, r3
 8001474:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e00e      	b.n	800149a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 800147c:	20ff      	movs	r0, #255	; 0xff
 800147e:	f7ff ff0b 	bl	8001298 <SPI2_SendByte>
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	d803      	bhi.n	8001494 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <BNO080_receivePacket+0xdc>)
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	3301      	adds	r3, #1
 8001498:	81fb      	strh	r3, [r7, #14]
 800149a:	89fa      	ldrh	r2, [r7, #14]
 800149c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbeb      	blt.n	800147c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <BNO080_receivePacket+0xd4>)
 80014aa:	f7ff fdaa 	bl	8001002 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	200001f4 	.word	0x200001f4

080014c8 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	3304      	adds	r3, #4
 80014dc:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014de:	f7ff ff5f 	bl	80013a0 <BNO080_waitForSPI>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014e8:	2300      	movs	r3, #0
 80014ea:	e032      	b.n	8001552 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	481a      	ldr	r0, [pc, #104]	; (800155c <BNO080_sendPacket+0x94>)
 80014f2:	f7ff fd94 	bl	800101e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fecd 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	121b      	asrs	r3, r3, #8
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fec7 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec3 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <BNO080_sendPacket+0x98>)
 8001516:	5cd2      	ldrb	r2, [r2, r3]
 8001518:	1c51      	adds	r1, r2, #1
 800151a:	b2c8      	uxtb	r0, r1
 800151c:	4910      	ldr	r1, [pc, #64]	; (8001560 <BNO080_sendPacket+0x98>)
 800151e:	54c8      	strb	r0, [r1, r3]
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff feb9 	bl	8001298 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e008      	b.n	800153e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <BNO080_sendPacket+0x9c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff feb0 	bl	8001298 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3f2      	bcc.n	800152c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <BNO080_sendPacket+0x94>)
 800154c:	f7ff fd59 	bl	8001002 <LL_GPIO_SetOutputPin>

	return (1);
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020400 	.word	0x40020400
 8001560:	20000274 	.word	0x20000274
 8001564:	200001f4 	.word	0x200001f4

08001568 <LL_SPI_Enable>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_SPI_SetStandard>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 0210 	bic.w	r2, r3, #16
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	605a      	str	r2, [r3, #4]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_SPI_IsActiveFlag_RXNE>:
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_SPI_IsActiveFlag_TXE>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d101      	bne.n	80015ec <LL_SPI_IsActiveFlag_TXE+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_SPI_ReceiveData8>:
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	330c      	adds	r3, #12
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_SPI_TransmitData8>:
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	330c      	adds	r3, #12
 8001626:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <LL_AHB1_GRP1_EnableClock>:
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4013      	ands	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40023800 	.word	0x40023800

0800166c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <LL_APB2_GRP1_EnableClock+0x2c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40023800 	.word	0x40023800

0800169c <LL_GPIO_SetOutputPin>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	619a      	str	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_GPIO_ResetOutputPin>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	2228      	movs	r2, #40	; 0x28
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 ff74 	bl	80085d4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80016fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001700:	f7ff ffb4 	bl	800166c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff ff99 	bl	800163c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800170a:	2004      	movs	r0, #4
 800170c:	f7ff ff96 	bl	800163c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001710:	23e0      	movs	r3, #224	; 0xe0
 8001712:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001714:	2302      	movs	r3, #2
 8001716:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001724:	2305      	movs	r3, #5
 8001726:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4825      	ldr	r0, [pc, #148]	; (80017c4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800172e:	f005 ffec 	bl	800770a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001736:	f44f 7382 	mov.w	r3, #260	; 0x104
 800173a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001740:	2302      	movs	r3, #2
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001744:	2301      	movs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800174e:	2310      	movs	r3, #16
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800175a:	230a      	movs	r3, #10
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	4619      	mov	r1, r3
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001766:	f006 f874 	bl	8007852 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800176a:	2100      	movs	r1, #0
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800176e:	f7ff ff0b 	bl	8001588 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001772:	2110      	movs	r1, #16
 8001774:	4815      	ldr	r0, [pc, #84]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001776:	f7ff ff9f 	bl	80016b8 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800177a:	2310      	movs	r3, #16
 800177c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800177e:	2301      	movs	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800178e:	463b      	mov	r3, r7
 8001790:	4619      	mov	r1, r3
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001794:	f005 ffb9 	bl	800770a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001798:	2320      	movs	r3, #32
 800179a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017aa:	f005 ffae 	bl	800770a <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017b0:	f7ff feda 	bl	8001568 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017b4:	2110      	movs	r1, #16
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017b8:	f7ff ff70 	bl	800169c <LL_GPIO_SetOutputPin>
}
 80017bc:	bf00      	nop
 80017be:	3740      	adds	r7, #64	; 0x40
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40013000 	.word	0x40013000
 80017cc:	40020800 	.word	0x40020800

080017d0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017da:	bf00      	nop
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <SPI1_SendByte+0x40>)
 80017de:	f7ff fef9 	bl	80015d4 <LL_SPI_IsActiveFlag_TXE>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f9      	beq.n	80017dc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <SPI1_SendByte+0x40>)
 80017ee:	f7ff ff12 	bl	8001616 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80017f2:	bf00      	nop
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <SPI1_SendByte+0x40>)
 80017f6:	f7ff feda 	bl	80015ae <LL_SPI_IsActiveFlag_RXNE>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f9      	beq.n	80017f4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <SPI1_SendByte+0x40>)
 8001802:	f7ff fefa 	bl	80015fa <LL_SPI_ReceiveData8>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40013000 	.word	0x40013000

08001814 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800181e:	2110      	movs	r1, #16
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <ICM20602_Readbyte+0x3c>)
 8001822:	f7ff ff49 	bl	80016b8 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ffce 	bl	80017d0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff ffcb 	bl	80017d0 <SPI1_SendByte>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800183e:	2110      	movs	r1, #16
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <ICM20602_Readbyte+0x3c>)
 8001842:	f7ff ff2b 	bl	800169c <LL_GPIO_SetOutputPin>
	
	return val;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40020800 	.word	0x40020800

08001854 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	460a      	mov	r2, r1
 800185e:	71fb      	strb	r3, [r7, #7]
 8001860:	4613      	mov	r3, r2
 8001862:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001864:	2110      	movs	r1, #16
 8001866:	480b      	ldr	r0, [pc, #44]	; (8001894 <ICM20602_Writebyte+0x40>)
 8001868:	f7ff ff26 	bl	80016b8 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ffab 	bl	80017d0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ffa7 	bl	80017d0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001882:	2110      	movs	r1, #16
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <ICM20602_Writebyte+0x40>)
 8001886:	f7ff ff09 	bl	800169c <LL_GPIO_SetOutputPin>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40020800 	.word	0x40020800

08001898 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80018b4:	f7ff ff10 	bl	80016d8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80018b8:	4833      	ldr	r0, [pc, #204]	; (8001988 <ICM20602_Initialization+0xf0>)
 80018ba:	f006 fd45 	bl	8008348 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80018be:	2075      	movs	r0, #117	; 0x75
 80018c0:	f7ff ffa8 	bl	8001814 <ICM20602_Readbyte>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d105      	bne.n	80018da <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	4619      	mov	r1, r3
 80018d2:	482e      	ldr	r0, [pc, #184]	; (800198c <ICM20602_Initialization+0xf4>)
 80018d4:	f006 fd38 	bl	8008348 <iprintf>
 80018d8:	e012      	b.n	8001900 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d00f      	beq.n	8001900 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80018e0:	2075      	movs	r0, #117	; 0x75
 80018e2:	f7ff ff97 	bl	8001814 <ICM20602_Readbyte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b12      	cmp	r3, #18
 80018ee:	d007      	beq.n	8001900 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2212      	movs	r2, #18
 80018f4:	4619      	mov	r1, r3
 80018f6:	4826      	ldr	r0, [pc, #152]	; (8001990 <ICM20602_Initialization+0xf8>)
 80018f8:	f006 fd26 	bl	8008348 <iprintf>
			return 1; //ERROR
 80018fc:	2301      	movs	r3, #1
 80018fe:	e03f      	b.n	8001980 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	206b      	movs	r0, #107	; 0x6b
 8001904:	f7ff ffa6 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001908:	2032      	movs	r0, #50	; 0x32
 800190a:	f001 fd49 	bl	80033a0 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800190e:	2101      	movs	r1, #1
 8001910:	206b      	movs	r0, #107	; 0x6b
 8001912:	f7ff ff9f 	bl	8001854 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001916:	2032      	movs	r0, #50	; 0x32
 8001918:	f001 fd42 	bl	80033a0 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800191c:	2138      	movs	r1, #56	; 0x38
 800191e:	206c      	movs	r0, #108	; 0x6c
 8001920:	f7ff ff98 	bl	8001854 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001924:	2032      	movs	r0, #50	; 0x32
 8001926:	f001 fd3b 	bl	80033a0 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800192a:	2100      	movs	r1, #0
 800192c:	2019      	movs	r0, #25
 800192e:	f7ff ff91 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001932:	2032      	movs	r0, #50	; 0x32
 8001934:	f001 fd34 	bl	80033a0 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001938:	2105      	movs	r1, #5
 800193a:	201a      	movs	r0, #26
 800193c:	f7ff ff8a 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001940:	2032      	movs	r0, #50	; 0x32
 8001942:	f001 fd2d 	bl	80033a0 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001946:	2118      	movs	r1, #24
 8001948:	201b      	movs	r0, #27
 800194a:	f7ff ff83 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f001 fd26 	bl	80033a0 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001954:	2118      	movs	r1, #24
 8001956:	201c      	movs	r0, #28
 8001958:	f7ff ff7c 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 800195c:	2032      	movs	r0, #50	; 0x32
 800195e:	f001 fd1f 	bl	80033a0 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001962:	2103      	movs	r1, #3
 8001964:	201d      	movs	r0, #29
 8001966:	f7ff ff75 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 800196a:	2032      	movs	r0, #50	; 0x32
 800196c:	f001 fd18 	bl	80033a0 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001970:	2101      	movs	r1, #1
 8001972:	2038      	movs	r0, #56	; 0x38
 8001974:	f7ff ff6e 	bl	8001854 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001978:	2032      	movs	r0, #50	; 0x32
 800197a:	f001 fd11 	bl	80033a0 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	0800a414 	.word	0x0800a414
 800198c:	0800a42c 	.word	0x0800a42c
 8001990:	0800a450 	.word	0x0800a450

08001994 <LL_SPI_Enable>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_SPI_SetStandard>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 0210 	bic.w	r2, r3, #16
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_SPI_IsActiveFlag_RXNE>:
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_SPI_IsActiveFlag_TXE>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d101      	bne.n	8001a18 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_SPI_ReceiveData8>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	330c      	adds	r3, #12
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_SPI_TransmitData8>:
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	330c      	adds	r3, #12
 8001a52:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	701a      	strb	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <LL_AHB1_GRP1_EnableClock>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800

08001a98 <LL_APB1_GRP1_EnableClock>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <LL_GPIO_SetOutputPin>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_GPIO_ResetOutputPin>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b090      	sub	sp, #64	; 0x40
 8001b08:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	2228      	movs	r2, #40	; 0x28
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f006 fd5e 	bl	80085d4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b2c:	f7ff ffb4 	bl	8001a98 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f7ff ff99 	bl	8001a68 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001b36:	2338      	movs	r3, #56	; 0x38
 8001b38:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b54:	f005 fdd9 	bl	800770a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b60:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b74:	2308      	movs	r3, #8
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001b80:	230a      	movs	r3, #10
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b8c:	f005 fe61 	bl	8007852 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001b90:	2100      	movs	r1, #0
 8001b92:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b94:	f7ff ff0e 	bl	80019b4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b9c:	f7ff ffa2 	bl	8001ae4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bba:	f005 fda6 	bl	800770a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bd0:	f005 fd9b 	bl	800770a <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bd6:	f7ff fedd 	bl	8001994 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bde:	f7ff ff73 	bl	8001ac8 <LL_GPIO_SetOutputPin>
}
 8001be2:	bf00      	nop
 8001be4:	3740      	adds	r7, #64	; 0x40
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40003c00 	.word	0x40003c00

08001bf4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001bfe:	bf00      	nop
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c02:	f7ff fefd 	bl	8001a00 <LL_SPI_IsActiveFlag_TXE>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f9      	beq.n	8001c00 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c12:	f7ff ff16 	bl	8001a42 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c16:	bf00      	nop
 8001c18:	4806      	ldr	r0, [pc, #24]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c1a:	f7ff fede 	bl	80019da <LL_SPI_IsActiveFlag_RXNE>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f9      	beq.n	8001c18 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c26:	f7ff fefe 	bl	8001a26 <LL_SPI_ReceiveData8>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40003c00 	.word	0x40003c00

08001c38 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LPS22HH_Readbyte+0x3c>)
 8001c46:	f7ff ff4d 	bl	8001ae4 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ffce 	bl	8001bf4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ffcb 	bl	8001bf4 <SPI3_SendByte>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <LPS22HH_Readbyte+0x3c>)
 8001c66:	f7ff ff2f 	bl	8001ac8 <LL_GPIO_SetOutputPin>
	
	return val;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40020400 	.word	0x40020400

08001c78 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460a      	mov	r2, r1
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LPS22HH_Writebyte+0x40>)
 8001c8c:	f7ff ff2a 	bl	8001ae4 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ffab 	bl	8001bf4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ffa7 	bl	8001bf4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <LPS22HH_Writebyte+0x40>)
 8001caa:	f7ff ff0d 	bl	8001ac8 <LL_GPIO_SetOutputPin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40020400 	.word	0x40020400

08001cbc <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001cc6:	f7ff ff1d 	bl	8001b04 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001cca:	4841      	ldr	r0, [pc, #260]	; (8001dd0 <LPS22HH_Initialization+0x114>)
 8001ccc:	f006 fb3c 	bl	8008348 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001cd0:	200f      	movs	r0, #15
 8001cd2:	f7ff ffb1 	bl	8001c38 <LPS22HH_Readbyte>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2bb3      	cmp	r3, #179	; 0xb3
 8001cde:	d105      	bne.n	8001cec <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	483b      	ldr	r0, [pc, #236]	; (8001dd4 <LPS22HH_Initialization+0x118>)
 8001ce6:	f006 fb2f 	bl	8008348 <iprintf>
 8001cea:	e012      	b.n	8001d12 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2bb3      	cmp	r3, #179	; 0xb3
 8001cf0:	d00f      	beq.n	8001d12 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff ffa0 	bl	8001c38 <LPS22HH_Readbyte>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2bb3      	cmp	r3, #179	; 0xb3
 8001d00:	d007      	beq.n	8001d12 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	22b3      	movs	r2, #179	; 0xb3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4833      	ldr	r0, [pc, #204]	; (8001dd8 <LPS22HH_Initialization+0x11c>)
 8001d0a:	f006 fb1d 	bl	8008348 <iprintf>
			return 1; //ERROR
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e059      	b.n	8001dc6 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001d12:	2104      	movs	r1, #4
 8001d14:	2011      	movs	r0, #17
 8001d16:	f7ff ffaf 	bl	8001c78 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001d1a:	2011      	movs	r0, #17
 8001d1c:	f7ff ff8c 	bl	8001c38 <LPS22HH_Readbyte>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f7      	bne.n	8001d1a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d2a:	2010      	movs	r0, #16
 8001d2c:	f7ff ff84 	bl	8001c38 <LPS22HH_Readbyte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2010      	movs	r0, #16
 8001d42:	f7ff ff99 	bl	8001c78 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d4a:	2010      	movs	r0, #16
 8001d4c:	f7ff ff74 	bl	8001c38 <LPS22HH_Readbyte>
 8001d50:	4603      	mov	r3, r0
 8001d52:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d54:	2010      	movs	r0, #16
 8001d56:	f7ff ff6f 	bl	8001c38 <LPS22HH_Readbyte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	f043 030c 	orr.w	r3, r3, #12
 8001d64:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f7ff ff84 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d70:	2010      	movs	r0, #16
 8001d72:	f7ff ff61 	bl	8001c38 <LPS22HH_Readbyte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	4619      	mov	r1, r3
 8001d86:	2010      	movs	r0, #16
 8001d88:	f7ff ff76 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001d8c:	2011      	movs	r0, #17
 8001d8e:	f7ff ff53 	bl	8001c38 <LPS22HH_Readbyte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	4619      	mov	r1, r3
 8001da2:	2011      	movs	r0, #17
 8001da4:	f7ff ff68 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001da8:	2012      	movs	r0, #18
 8001daa:	f7ff ff45 	bl	8001c38 <LPS22HH_Readbyte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	2012      	movs	r0, #18
 8001dc0:	f7ff ff5a 	bl	8001c78 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	0800a47c 	.word	0x0800a47c
 8001dd4:	0800a490 	.word	0x0800a490
 8001dd8:	0800a4b4 	.word	0x0800a4b4

08001ddc <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <M8N_UART4_initialization+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001de8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dec:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <M8N_UART4_initialization+0x4c>)
 8001e14:	f004 faa2 	bl	800635c <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8001e1e:	f000 fc81 	bl	8002724 <Error_Handler>
	  }
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000045c 	.word	0x2000045c
 8001e2c:	40004c00 	.word	0x40004c00

08001e30 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e00c      	b.n	8001e5c <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4807      	ldr	r0, [pc, #28]	; (8001e70 <M8N_TransmitData+0x40>)
 8001e52:	f004 fad3 	bl	80063fc <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbee      	blt.n	8001e42 <M8N_TransmitData+0x12>
	}
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000045c 	.word	0x2000045c

08001e74 <M8N_initialization>:

void M8N_initialization(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8001e78:	f7ff ffb0 	bl	8001ddc <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8001e7c:	211c      	movs	r1, #28
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <M8N_initialization+0x40>)
 8001e80:	f7ff ffd6 	bl	8001e30 <M8N_TransmitData>
	HAL_Delay(100);
 8001e84:	2064      	movs	r0, #100	; 0x64
 8001e86:	f001 fa8b 	bl	80033a0 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <M8N_initialization+0x44>)
 8001e8e:	f7ff ffcf 	bl	8001e30 <M8N_TransmitData>
	HAL_Delay(100);
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	f001 fa84 	bl	80033a0 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8001e98:	210e      	movs	r1, #14
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <M8N_initialization+0x48>)
 8001e9c:	f7ff ffc8 	bl	8001e30 <M8N_TransmitData>
	HAL_Delay(100);
 8001ea0:	2064      	movs	r0, #100	; 0x64
 8001ea2:	f001 fa7d 	bl	80033a0 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8001ea6:	2115      	movs	r1, #21
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <M8N_initialization+0x4c>)
 8001eaa:	f7ff ffc1 	bl	8001e30 <M8N_TransmitData>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0800a504 	.word	0x0800a504
 8001eb8:	0800a520 	.word	0x0800a520
 8001ebc:	0800a530 	.word	0x0800a530
 8001ec0:	0800a540 	.word	0x0800a540

08001ec4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <MX_ADC1_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ede:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <MX_ADC1_Init+0xa0>)
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f26:	f001 fa5f 	bl	80033e8 <HAL_ADC_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f30:	f000 fbf8 	bl	8002724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f34:	2308      	movs	r3, #8
 8001f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f46:	f001 fbc1 	bl	80036cc <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f50:	f000 fbe8 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000027c 	.word	0x2000027c
 8001f60:	40012000 	.word	0x40012000
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_ADC_MspInit+0xd8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d156      	bne.n	8002038 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481c      	ldr	r0, [pc, #112]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001fd6:	f002 fb2d 	bl	8004634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001fde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ffe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8002002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002006:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_ADC_MspInit+0xe4>)
 800200a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800200e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <HAL_ADC_MspInit+0xe4>)
 800201e:	f001 ff07 	bl	8003e30 <HAL_DMA_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002028:	f000 fb7c 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
 8002032:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40012000 	.word	0x40012000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020400 	.word	0x40020400
 800204c:	200002c4 	.word	0x200002c4
 8002050:	40026410 	.word	0x40026410

08002054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_DMA_Init+0x3c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <MX_DMA_Init+0x3c>)
 8002064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_DMA_Init+0x3c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2038      	movs	r0, #56	; 0x38
 800207c:	f001 fea1 	bl	8003dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002080:	2038      	movs	r0, #56	; 0x38
 8002082:	f001 feba 	bl	8003dfa <HAL_NVIC_EnableIRQ>

}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <MX_GPIO_Init+0x168>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a52      	ldr	r2, [pc, #328]	; (80021fc <MX_GPIO_Init+0x168>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <MX_GPIO_Init+0x168>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <MX_GPIO_Init+0x168>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <MX_GPIO_Init+0x168>)
 80020d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <MX_GPIO_Init+0x168>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b45      	ldr	r3, [pc, #276]	; (80021fc <MX_GPIO_Init+0x168>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a44      	ldr	r2, [pc, #272]	; (80021fc <MX_GPIO_Init+0x168>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <MX_GPIO_Init+0x168>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <MX_GPIO_Init+0x168>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <MX_GPIO_Init+0x168>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <MX_GPIO_Init+0x168>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <MX_GPIO_Init+0x168>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <MX_GPIO_Init+0x168>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <MX_GPIO_Init+0x168>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213c:	4830      	ldr	r0, [pc, #192]	; (8002200 <MX_GPIO_Init+0x16c>)
 800213e:	f002 fc15 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8002142:	2200      	movs	r2, #0
 8002144:	f240 2117 	movw	r1, #535	; 0x217
 8002148:	482d      	ldr	r0, [pc, #180]	; (8002200 <MX_GPIO_Init+0x16c>)
 800214a:	f002 fc0f 	bl	800496c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002154:	482b      	ldr	r0, [pc, #172]	; (8002204 <MX_GPIO_Init+0x170>)
 8002156:	f002 fc09 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4829      	ldr	r0, [pc, #164]	; (8002208 <MX_GPIO_Init+0x174>)
 8002162:	f002 fc03 	bl	800496c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 8002166:	f242 2317 	movw	r3, #8727	; 0x2217
 800216a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4820      	ldr	r0, [pc, #128]	; (8002200 <MX_GPIO_Init+0x16c>)
 8002180:	f002 fa58 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8002184:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4819      	ldr	r0, [pc, #100]	; (8002200 <MX_GPIO_Init+0x16c>)
 800219a:	f002 fa4b 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800219e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4813      	ldr	r0, [pc, #76]	; (8002204 <MX_GPIO_Init+0x170>)
 80021b8:	f002 fa3c 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <MX_GPIO_Init+0x174>)
 80021d6:	f002 fa2d 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_GPIO_Init+0x170>)
 80021ee:	f002 fa21 	bl	8004634 <HAL_GPIO_Init>

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020800 	.word	0x40020800
 8002204:	40020400 	.word	0x40020400
 8002208:	40020000 	.word	0x40020000

0800220c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_I2C1_Init+0x50>)
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <MX_I2C1_Init+0x54>)
 8002214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_I2C1_Init+0x50>)
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <MX_I2C1_Init+0x58>)
 800221a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_I2C1_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_I2C1_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_I2C1_Init+0x50>)
 800222a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <MX_I2C1_Init+0x50>)
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_I2C1_Init+0x50>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <MX_I2C1_Init+0x50>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_I2C1_Init+0x50>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_I2C1_Init+0x50>)
 800224a:	f002 fba9 	bl	80049a0 <HAL_I2C_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002254:	f000 fa66 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000324 	.word	0x20000324
 8002260:	40005400 	.word	0x40005400
 8002264:	00061a80 	.word	0x00061a80

08002268 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_I2C_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12c      	bne.n	80022e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022b8:	2304      	movs	r3, #4
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <HAL_I2C_MspInit+0x8c>)
 80022c4:	f002 f9b6 	bl	8004634 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 80022d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_I2C_MspInit+0x88>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40005400 	.word	0x40005400
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400

080022f8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�????? 방식?��?��?�� ?��?��?���????? ?��번에 많�? ?��?�� 보내질때 ??�????? 방식?? ???��?��?��?���????? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�????? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <_write+0x24>)
 800230e:	f004 f900 	bl	8006512 <HAL_UART_Transmit_IT>
	return len;
 8002312:	687b      	ldr	r3, [r7, #4]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200004ec 	.word	0x200004ec

08002320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b08f      	sub	sp, #60	; 0x3c
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <main+0x134>)
 8002338:	1d3c      	adds	r4, r7, #4
 800233a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800233c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f000 ffbc 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002344:	f000 f8a0 	bl	8002488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002348:	f7ff fea4 	bl	8002094 <MX_GPIO_Init>
  MX_DMA_Init();
 800234c:	f7ff fe82 	bl	8002054 <MX_DMA_Init>
  MX_TIM3_Init();
 8002350:	f000 fc76 	bl	8002c40 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002354:	f000 fe74 	bl	8003040 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002358:	f000 fa96 	bl	8002888 <MX_SPI2_Init>
  MX_SPI1_Init();
 800235c:	f000 fa42 	bl	80027e4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002360:	f000 fae6 	bl	8002930 <MX_SPI3_Init>
  MX_UART4_Init();
 8002364:	f000 fe18 	bl	8002f98 <MX_UART4_Init>
  MX_UART5_Init();
 8002368:	f000 fe40 	bl	8002fec <MX_UART5_Init>
  MX_TIM5_Init();
 800236c:	f000 fcde 	bl	8002d2c <MX_TIM5_Init>
  MX_I2C1_Init();
 8002370:	f7ff ff4c 	bl	800220c <MX_I2C1_Init>
  MX_ADC1_Init();
 8002374:	f7ff fda6 	bl	8001ec4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	M8N_initialization();
 8002378:	f7ff fd7c 	bl	8001e74 <M8N_initialization>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 800237c:	2201      	movs	r2, #1
 800237e:	4936      	ldr	r1, [pc, #216]	; (8002458 <main+0x138>)
 8002380:	4836      	ldr	r0, [pc, #216]	; (800245c <main+0x13c>)
 8002382:	f004 f8fc 	bl	800657e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8002386:	2201      	movs	r2, #1
 8002388:	4935      	ldr	r1, [pc, #212]	; (8002460 <main+0x140>)
 800238a:	4836      	ldr	r0, [pc, #216]	; (8002464 <main+0x144>)
 800238c:	f004 f8f7 	bl	800657e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8002390:	2201      	movs	r2, #1
 8002392:	4935      	ldr	r1, [pc, #212]	; (8002468 <main+0x148>)
 8002394:	4835      	ldr	r0, [pc, #212]	; (800246c <main+0x14c>)
 8002396:	f004 f8f2 	bl	800657e <HAL_UART_Receive_IT>

	BNO080_Initialization();
 800239a:	f7fe ff09 	bl	80011b0 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 800239e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80023a2:	f7fe ff9b 	bl	80012dc <BNO080_enableRotationVector>

	ICM20602_Initialization();
 80023a6:	f7ff fa77 	bl	8001898 <ICM20602_Initialization>
	LPS22HH_Initialization();
 80023aa:	f7ff fc87 	bl	8001cbc <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80023ae:	2100      	movs	r1, #0
 80023b0:	482f      	ldr	r0, [pc, #188]	; (8002470 <main+0x150>)
 80023b2:	f003 f979 	bl	80056a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80023b6:	2104      	movs	r1, #4
 80023b8:	482d      	ldr	r0, [pc, #180]	; (8002470 <main+0x150>)
 80023ba:	f003 f975 	bl	80056a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80023be:	2108      	movs	r1, #8
 80023c0:	482b      	ldr	r0, [pc, #172]	; (8002470 <main+0x150>)
 80023c2:	f003 f971 	bl	80056a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80023c6:	210c      	movs	r1, #12
 80023c8:	4829      	ldr	r0, [pc, #164]	; (8002470 <main+0x150>)
 80023ca:	f003 f96d 	bl	80056a8 <HAL_TIM_PWM_Start>

	// pdata는 데이터를 저장할 주소
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80023ce:	1cbb      	adds	r3, r7, #2
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	4827      	ldr	r0, [pc, #156]	; (8002474 <main+0x154>)
 80023d6:	f001 f84b 	bl	8003470 <HAL_ADC_Start_DMA>
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(70);
//	}


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80023da:	210c      	movs	r1, #12
 80023dc:	4826      	ldr	r0, [pc, #152]	; (8002478 <main+0x158>)
 80023de:	f003 f963 	bl	80056a8 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <main+0x158>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f000 ffd7 	bl	80033a0 <HAL_Delay>
	htim3.Instance->PSC = 1500;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <main+0x158>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	f000 ffcf 	bl	80033a0 <HAL_Delay>
	htim3.Instance->PSC = 1000;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <main+0x158>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f000 ffc7 	bl	80033a0 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002412:	210c      	movs	r1, #12
 8002414:	4818      	ldr	r0, [pc, #96]	; (8002478 <main+0x158>)
 8002416:	f003 fa0f 	bl	8005838 <HAL_TIM_PWM_Stop>

	printf("start\n");
 800241a:	4818      	ldr	r0, [pc, #96]	; (800247c <main+0x15c>)
 800241c:	f005 fffa 	bl	8008414 <puts>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	batVolt = adcVal * 0.003619f;
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002480 <main+0x160>
 800242e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002432:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	printf("%d\t%.2f\n",adcVal, batVolt);
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	461c      	mov	r4, r3
 800243a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800243c:	f7fe f884 	bl	8000548 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4621      	mov	r1, r4
 8002446:	480f      	ldr	r0, [pc, #60]	; (8002484 <main+0x164>)
 8002448:	f005 ff7e 	bl	8008348 <iprintf>
	HAL_Delay(100);
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	f000 ffa7 	bl	80033a0 <HAL_Delay>
	batVolt = adcVal * 0.003619f;
 8002452:	e7e5      	b.n	8002420 <main+0x100>
 8002454:	0800a4f4 	.word	0x0800a4f4
 8002458:	20000378 	.word	0x20000378
 800245c:	200004ec 	.word	0x200004ec
 8002460:	2000037a 	.word	0x2000037a
 8002464:	2000045c 	.word	0x2000045c
 8002468:	20000379 	.word	0x20000379
 800246c:	200004a4 	.word	0x200004a4
 8002470:	20000414 	.word	0x20000414
 8002474:	2000027c 	.word	0x2000027c
 8002478:	200003cc 	.word	0x200003cc
 800247c:	0800a4e0 	.word	0x0800a4e0
 8002480:	3b6d2cbf 	.word	0x3b6d2cbf
 8002484:	0800a4e8 	.word	0x0800a4e8

08002488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b094      	sub	sp, #80	; 0x50
 800248c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248e:	f107 0320 	add.w	r3, r7, #32
 8002492:	2230      	movs	r2, #48	; 0x30
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f006 f89c 	bl	80085d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <SystemClock_Config+0xcc>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <SystemClock_Config+0xcc>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <SystemClock_Config+0xcc>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <SystemClock_Config+0xd0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a21      	ldr	r2, [pc, #132]	; (8002558 <SystemClock_Config+0xd0>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <SystemClock_Config+0xd0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ee:	2302      	movs	r3, #2
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024f8:	2304      	movs	r3, #4
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024fc:	23a8      	movs	r3, #168	; 0xa8
 80024fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002500:	2302      	movs	r3, #2
 8002502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002504:	2304      	movs	r3, #4
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fb8b 	bl	8004c28 <HAL_RCC_OscConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002518:	f000 f904 	bl	8002724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251c:	230f      	movs	r3, #15
 800251e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002528:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800252c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800252e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002532:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2105      	movs	r1, #5
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fdec 	bl	8005118 <HAL_RCC_ClockConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002546:	f000 f8ed 	bl	8002724 <Error_Handler>
  }
}
 800254a:	bf00      	nop
 800254c:	3750      	adds	r7, #80	; 0x50
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40007000 	.word	0x40007000

0800255c <HAL_UART_RxCpltCallback>:
		}
	}
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if (huart->Instance == UART5) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <HAL_UART_RxCpltCallback+0x18c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d154      	bne.n	8002618 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 800256e:	2201      	movs	r2, #1
 8002570:	495e      	ldr	r1, [pc, #376]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 8002572:	485f      	ldr	r0, [pc, #380]	; (80026f0 <HAL_UART_RxCpltCallback+0x194>)
 8002574:	f004 f803 	bl	800657e <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8002578:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b1f      	cmp	r3, #31
 800257e:	d02e      	beq.n	80025de <HAL_UART_RxCpltCallback+0x82>
 8002580:	2b1f      	cmp	r3, #31
 8002582:	dc3a      	bgt.n	80025fa <HAL_UART_RxCpltCallback+0x9e>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_UART_RxCpltCallback+0x32>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d012      	beq.n	80025b2 <HAL_UART_RxCpltCallback+0x56>
 800258c:	e035      	b.n	80025fa <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			if (uart5_rxData == 0x20) {
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b20      	cmp	r3, #32
 8002594:	d13f      	bne.n	8002616 <HAL_UART_RxCpltCallback+0xba>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 800259e:	7819      	ldrb	r1, [r3, #0]
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_UART_RxCpltCallback+0x19c>)
 80025a2:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025ae:	701a      	strb	r2, [r3, #0]
			}
			break;
 80025b0:	e031      	b.n	8002616 <HAL_UART_RxCpltCallback+0xba>

		case 1:
			if (uart5_rxData == 0x40) {
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d10d      	bne.n	80025d6 <HAL_UART_RxCpltCallback+0x7a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80025ba:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 80025c2:	7819      	ldrb	r1, [r3, #0]
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_UART_RxCpltCallback+0x19c>)
 80025c6:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 80025c8:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025d2:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 80025d4:	e020      	b.n	8002618 <HAL_UART_RxCpltCallback+0xbc>
				cnt_ibus = 0;
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
			break;
 80025dc:	e01c      	b.n	8002618 <HAL_UART_RxCpltCallback+0xbc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80025de:	4b45      	ldr	r3, [pc, #276]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 80025e6:	7819      	ldrb	r1, [r3, #0]
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_UART_RxCpltCallback+0x19c>)
 80025ea:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 80025ec:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_UART_RxCpltCallback+0x1a0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
			break;
 80025f8:	e00e      	b.n	8002618 <HAL_UART_RxCpltCallback+0xbc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_UART_RxCpltCallback+0x190>)
 8002602:	7819      	ldrb	r1, [r3, #0]
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_UART_RxCpltCallback+0x19c>)
 8002606:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_UART_RxCpltCallback+0x198>)
 8002612:	701a      	strb	r2, [r3, #0]
			break;
 8002614:	e000      	b.n	8002618 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002616:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_UART_RxCpltCallback+0x1a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d153      	bne.n	80026ca <HAL_UART_RxCpltCallback+0x16e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8002622:	2201      	movs	r2, #1
 8002624:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 8002626:	4838      	ldr	r0, [pc, #224]	; (8002708 <HAL_UART_RxCpltCallback+0x1ac>)
 8002628:	f003 ffa9 	bl	800657e <HAL_UART_Receive_IT>

		//GPS�????? ?��?�� ?��?��받�? ?��?��?���????? 바로 com?���????? 보내�?????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b23      	cmp	r3, #35	; 0x23
 8002632:	d02e      	beq.n	8002692 <HAL_UART_RxCpltCallback+0x136>
 8002634:	2b23      	cmp	r3, #35	; 0x23
 8002636:	dc39      	bgt.n	80026ac <HAL_UART_RxCpltCallback+0x150>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_UART_RxCpltCallback+0xe6>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d012      	beq.n	8002666 <HAL_UART_RxCpltCallback+0x10a>
 8002640:	e034      	b.n	80026ac <HAL_UART_RxCpltCallback+0x150>
		case 0:
			if (uart4_rxData == 0xb5) {
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2bb5      	cmp	r3, #181	; 0xb5
 8002648:	d13e      	bne.n	80026c8 <HAL_UART_RxCpltCallback+0x16c>
				m8n_rx_buf[cnt] = uart4_rxData;
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <HAL_UART_RxCpltCallback+0x1b4>)
 8002656:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 8002662:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002664:	e030      	b.n	80026c8 <HAL_UART_RxCpltCallback+0x16c>
		case 1:
			if (uart4_rxData == 0x62) {
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b62      	cmp	r3, #98	; 0x62
 800266c:	d10d      	bne.n	800268a <HAL_UART_RxCpltCallback+0x12e>
				m8n_rx_buf[cnt] = uart4_rxData;
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 8002676:	7819      	ldrb	r1, [r3, #0]
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_UART_RxCpltCallback+0x1b4>)
 800267a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 8002686:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8002688:	e01f      	b.n	80026ca <HAL_UART_RxCpltCallback+0x16e>
				cnt = 0;
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
			break;
 8002690:	e01b      	b.n	80026ca <HAL_UART_RxCpltCallback+0x16e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 800269a:	7819      	ldrb	r1, [r3, #0]
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_RxCpltCallback+0x1b4>)
 800269e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_UART_RxCpltCallback+0x1b8>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_UART_RxCpltCallback+0x1a8>)
 80026b4:	7819      	ldrb	r1, [r3, #0]
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_UART_RxCpltCallback+0x1b4>)
 80026b8:	5499      	strb	r1, [r3, r2]
			cnt++;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_UART_RxCpltCallback+0x1b0>)
 80026c4:	701a      	strb	r2, [r3, #0]
			break;
 80026c6:	e000      	b.n	80026ca <HAL_UART_RxCpltCallback+0x16e>
			break;
 80026c8:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_UART_RxCpltCallback+0x1bc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d104      	bne.n	80026de <HAL_UART_RxCpltCallback+0x182>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	4911      	ldr	r1, [pc, #68]	; (800271c <HAL_UART_RxCpltCallback+0x1c0>)
 80026d8:	4811      	ldr	r0, [pc, #68]	; (8002720 <HAL_UART_RxCpltCallback+0x1c4>)
 80026da:	f003 ff50 	bl	800657e <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40005000 	.word	0x40005000
 80026ec:	20000379 	.word	0x20000379
 80026f0:	200004a4 	.word	0x200004a4
 80026f4:	200003c5 	.word	0x200003c5
 80026f8:	200003a4 	.word	0x200003a4
 80026fc:	200003c4 	.word	0x200003c4
 8002700:	40004c00 	.word	0x40004c00
 8002704:	2000037a 	.word	0x2000037a
 8002708:	2000045c 	.word	0x2000045c
 800270c:	200003c6 	.word	0x200003c6
 8002710:	2000037c 	.word	0x2000037c
 8002714:	200003a0 	.word	0x200003a0
 8002718:	40011400 	.word	0x40011400
 800271c:	20000378 	.word	0x20000378
 8002720:	200004ec 	.word	0x200004ec

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>

0800272e <LL_SPI_SetStandard>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 0210 	bic.w	r2, r3, #16
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_AHB1_GRP1_EnableClock>:
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800275e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4013      	ands	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40023800 	.word	0x40023800

08002784 <LL_APB1_GRP1_EnableClock>:
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800278e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4313      	orrs	r3, r2
 8002796:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800279a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023800 	.word	0x40023800

080027b4 <LL_APB2_GRP1_EnableClock>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40023800 	.word	0x40023800

080027e4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b090      	sub	sp, #64	; 0x40
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	2228      	movs	r2, #40	; 0x28
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 feee 	bl	80085d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	463b      	mov	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002808:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800280c:	f7ff ffd2 	bl	80027b4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002810:	2001      	movs	r0, #1
 8002812:	f7ff ff9f 	bl	8002754 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002816:	23e0      	movs	r3, #224	; 0xe0
 8002818:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800281a:	2302      	movs	r3, #2
 800281c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800282a:	2305      	movs	r3, #5
 800282c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	463b      	mov	r3, r7
 8002830:	4619      	mov	r1, r3
 8002832:	4813      	ldr	r0, [pc, #76]	; (8002880 <MX_SPI1_Init+0x9c>)
 8002834:	f004 ff69 	bl	800770a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800283c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002840:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002846:	2302      	movs	r3, #2
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800284a:	2301      	movs	r3, #1
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800284e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002854:	2310      	movs	r3, #16
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002860:	230a      	movs	r3, #10
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_SPI1_Init+0xa0>)
 800286c:	f004 fff1 	bl	8007852 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002870:	2100      	movs	r1, #0
 8002872:	4804      	ldr	r0, [pc, #16]	; (8002884 <MX_SPI1_Init+0xa0>)
 8002874:	f7ff ff5b 	bl	800272e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3740      	adds	r7, #64	; 0x40
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40020000 	.word	0x40020000
 8002884:	40013000 	.word	0x40013000

08002888 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800288e:	f107 0318 	add.w	r3, r7, #24
 8002892:	2228      	movs	r2, #40	; 0x28
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fe9c 	bl	80085d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	463b      	mov	r3, r7
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]
 80028aa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80028ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028b0:	f7ff ff68 	bl	8002784 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7ff ff4d 	bl	8002754 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80028ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028c0:	2302      	movs	r3, #2
 80028c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80028d0:	2305      	movs	r3, #5
 80028d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	463b      	mov	r3, r7
 80028d6:	4619      	mov	r1, r3
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <MX_SPI2_Init+0xa0>)
 80028da:	f004 ff16 	bl	800770a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028e6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80028ec:	2302      	movs	r3, #2
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80028fa:	2318      	movs	r3, #24
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028fe:	2300      	movs	r3, #0
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002906:	230a      	movs	r3, #10
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800290a:	f107 0318 	add.w	r3, r7, #24
 800290e:	4619      	mov	r1, r3
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <MX_SPI2_Init+0xa4>)
 8002912:	f004 ff9e 	bl	8007852 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002916:	2100      	movs	r1, #0
 8002918:	4804      	ldr	r0, [pc, #16]	; (800292c <MX_SPI2_Init+0xa4>)
 800291a:	f7ff ff08 	bl	800272e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	3740      	adds	r7, #64	; 0x40
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40020400 	.word	0x40020400
 800292c:	40003800 	.word	0x40003800

08002930 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002936:	f107 0318 	add.w	r3, r7, #24
 800293a:	2228      	movs	r2, #40	; 0x28
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f005 fe48 	bl	80085d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002954:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002958:	f7ff ff14 	bl	8002784 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800295c:	2002      	movs	r0, #2
 800295e:	f7ff fef9 	bl	8002754 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002962:	2338      	movs	r3, #56	; 0x38
 8002964:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002966:	2302      	movs	r3, #2
 8002968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002976:	2306      	movs	r3, #6
 8002978:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	463b      	mov	r3, r7
 800297c:	4619      	mov	r1, r3
 800297e:	4813      	ldr	r0, [pc, #76]	; (80029cc <MX_SPI3_Init+0x9c>)
 8002980:	f004 fec3 	bl	800770a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002988:	f44f 7382 	mov.w	r3, #260	; 0x104
 800298c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002992:	2302      	movs	r3, #2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002996:	2301      	movs	r3, #1
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800299a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80029a0:	2308      	movs	r3, #8
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80029a4:	2300      	movs	r3, #0
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80029ac:	230a      	movs	r3, #10
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4806      	ldr	r0, [pc, #24]	; (80029d0 <MX_SPI3_Init+0xa0>)
 80029b8:	f004 ff4b 	bl	8007852 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80029bc:	2100      	movs	r1, #0
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <MX_SPI3_Init+0xa0>)
 80029c0:	f7ff feb5 	bl	800272e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	3740      	adds	r7, #64	; 0x40
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40003c00 	.word	0x40003c00

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <HAL_MspInit+0x4c>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_MspInit+0x4c>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_MspInit+0x4c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler+0x4>

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <MemManage_Handler+0x4>

08002a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a70:	f000 fc76 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <UART4_IRQHandler+0x10>)
 8002a7e:	f003 fda3 	bl	80065c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000045c 	.word	0x2000045c

08002a8c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <UART5_IRQHandler+0x10>)
 8002a92:	f003 fd99 	bl	80065c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200004a4 	.word	0x200004a4

08002aa0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <DMA2_Stream0_IRQHandler+0x10>)
 8002aa6:	f001 fb5b 	bl	8004160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200002c4 	.word	0x200002c4

08002ab4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <USART6_IRQHandler+0x10>)
 8002aba:	f003 fd85 	bl	80065c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200004ec 	.word	0x200004ec

08002ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return 1;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_kill>:

int _kill(int pid, int sig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ae2:	f005 fdc9 	bl	8008678 <__errno>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2216      	movs	r2, #22
 8002aea:	601a      	str	r2, [r3, #0]
  return -1;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_exit>:

void _exit (int status)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffe7 	bl	8002ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b0a:	e7fe      	b.n	8002b0a <_exit+0x12>

08002b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e00a      	b.n	8002b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b1e:	f3af 8000 	nop.w
 8002b22:	4601      	mov	r1, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	b2ca      	uxtb	r2, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dbf0      	blt.n	8002b1e <_read+0x12>
  }

  return len;
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_isatty>:

int _isatty(int file)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <_sbrk+0x5c>)
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <_sbrk+0x60>)
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_sbrk+0x64>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <_sbrk+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be0:	f005 fd4a 	bl	8008678 <__errno>
 8002be4:	4603      	mov	r3, r0
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e009      	b.n	8002c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <_sbrk+0x64>)
 8002c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20020000 	.word	0x20020000
 8002c10:	00000400 	.word	0x00000400
 8002c14:	200003c8 	.word	0x200003c8
 8002c18:	20000688 	.word	0x20000688

08002c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <SystemInit+0x20>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <SystemInit+0x20>)
 8002c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	; 0x38
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	615a      	str	r2, [r3, #20]
 8002c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <MX_TIM3_Init+0xe8>)
 8002c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c86:	2214      	movs	r2, #20
 8002c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c96:	4823      	ldr	r0, [pc, #140]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002c98:	f002 fc5e 	bl	8005558 <HAL_TIM_Base_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ca2:	f7ff fd3f 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	481c      	ldr	r0, [pc, #112]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002cb4:	f002 fef2 	bl	8005a9c <HAL_TIM_ConfigClockSource>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002cbe:	f7ff fd31 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc2:	4818      	ldr	r0, [pc, #96]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002cc4:	f002 fc97 	bl	80055f6 <HAL_TIM_PWM_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002cce:	f7ff fd29 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cda:	f107 0320 	add.w	r3, r7, #32
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4810      	ldr	r0, [pc, #64]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002ce2:	f003 fabf 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002cec:	f7ff fd1a 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf0:	2360      	movs	r3, #96	; 0x60
 8002cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	220c      	movs	r2, #12
 8002d04:	4619      	mov	r1, r3
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002d08:	f002 fe06 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002d12:	f7ff fd07 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d16:	4803      	ldr	r0, [pc, #12]	; (8002d24 <MX_TIM3_Init+0xe4>)
 8002d18:	f000 f8dc 	bl	8002ed4 <HAL_TIM_MspPostInit>

}
 8002d1c:	bf00      	nop
 8002d1e:	3738      	adds	r7, #56	; 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200003cc 	.word	0x200003cc
 8002d28:	40000400 	.word	0x40000400

08002d2c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d5e:	4a40      	ldr	r2, [pc, #256]	; (8002e60 <MX_TIM5_Init+0x134>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d68:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d70:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002d74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d7c:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d82:	4836      	ldr	r0, [pc, #216]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002d84:	f002 fbe8 	bl	8005558 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002d8e:	f7ff fcc9 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	482f      	ldr	r0, [pc, #188]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002da0:	f002 fe7c 	bl	8005a9c <HAL_TIM_ConfigClockSource>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002daa:	f7ff fcbb 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002dae:	482b      	ldr	r0, [pc, #172]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002db0:	f002 fc21 	bl	80055f6 <HAL_TIM_PWM_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002dba:	f7ff fcb3 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dc6:	f107 0320 	add.w	r3, r7, #32
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4823      	ldr	r0, [pc, #140]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002dce:	f003 fa49 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002dd8:	f7ff fca4 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ddc:	2360      	movs	r3, #96	; 0x60
 8002dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002de8:	2304      	movs	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2200      	movs	r2, #0
 8002df0:	4619      	mov	r1, r3
 8002df2:	481a      	ldr	r0, [pc, #104]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002df4:	f002 fd90 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002dfe:	f7ff fc91 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2204      	movs	r2, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4814      	ldr	r0, [pc, #80]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002e0a:	f002 fd85 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002e14:	f7ff fc86 	bl	8002724 <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8002e18:	f647 330b 	movw	r3, #31499	; 0x7b0b
 8002e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2208      	movs	r2, #8
 8002e22:	4619      	mov	r1, r3
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002e26:	f002 fd77 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8002e30:	f7ff fc78 	bl	8002724 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4807      	ldr	r0, [pc, #28]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002e40:	f002 fd6a 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8002e4a:	f7ff fc6b 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e4e:	4803      	ldr	r0, [pc, #12]	; (8002e5c <MX_TIM5_Init+0x130>)
 8002e50:	f000 f840 	bl	8002ed4 <HAL_TIM_MspPostInit>

}
 8002e54:	bf00      	nop
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000414 	.word	0x20000414
 8002e60:	40000c00 	.word	0x40000c00

08002e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <HAL_TIM_Base_MspInit+0x64>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e92:	e012      	b.n	8002eba <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_TIM_Base_MspInit+0x6c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10d      	bne.n	8002eba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_TIM_Base_MspInit+0x68>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40000c00 	.word	0x40000c00

08002ed4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_TIM_MspPostInit+0xb0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d11e      	bne.n	8002f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f12:	2302      	movs	r3, #2
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f22:	2302      	movs	r3, #2
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4817      	ldr	r0, [pc, #92]	; (8002f8c <HAL_TIM_MspPostInit+0xb8>)
 8002f2e:	f001 fb81 	bl	8004634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f32:	e022      	b.n	8002f7a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <HAL_TIM_MspPostInit+0xbc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d11d      	bne.n	8002f7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_TIM_MspPostInit+0xb4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f5a:	230f      	movs	r3, #15
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	4807      	ldr	r0, [pc, #28]	; (8002f94 <HAL_TIM_MspPostInit+0xc0>)
 8002f76:	f001 fb5d 	bl	8004634 <HAL_GPIO_Init>
}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40020000 	.word	0x40020000

08002f98 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <MX_UART4_Init+0x50>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fa8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_UART4_Init+0x4c>)
 8002fd0:	f003 f9c4 	bl	800635c <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002fda:	f7ff fba3 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000045c 	.word	0x2000045c
 8002fe8:	40004c00 	.word	0x40004c00

08002fec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_UART5_Init+0x4c>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <MX_UART5_Init+0x50>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_UART5_Init+0x4c>)
 8002ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ffc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_UART5_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_UART5_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <MX_UART5_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_UART5_Init+0x4c>)
 8003012:	2204      	movs	r2, #4
 8003014:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <MX_UART5_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_UART5_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	; (8003038 <MX_UART5_Init+0x4c>)
 8003024:	f003 f99a 	bl	800635c <HAL_UART_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800302e:	f7ff fb79 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200004a4 	.word	0x200004a4
 800303c:	40005000 	.word	0x40005000

08003040 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <MX_USART6_UART_Init+0x50>)
 8003048:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_USART6_UART_Init+0x4c>)
 800304c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003050:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_USART6_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <MX_USART6_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_USART6_UART_Init+0x4c>)
 8003078:	f003 f970 	bl	800635c <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003082:	f7ff fb4f 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200004ec 	.word	0x200004ec
 8003090:	40011400 	.word	0x40011400

08003094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08e      	sub	sp, #56	; 0x38
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a67      	ldr	r2, [pc, #412]	; (8003250 <HAL_UART_MspInit+0x1bc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d135      	bne.n	8003122 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	4b66      	ldr	r3, [pc, #408]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a65      	ldr	r2, [pc, #404]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a5e      	ldr	r2, [pc, #376]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80030ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fc:	2303      	movs	r3, #3
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003100:	2308      	movs	r3, #8
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003108:	4619      	mov	r1, r3
 800310a:	4853      	ldr	r0, [pc, #332]	; (8003258 <HAL_UART_MspInit+0x1c4>)
 800310c:	f001 fa92 	bl	8004634 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	2034      	movs	r0, #52	; 0x34
 8003116:	f000 fe54 	bl	8003dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800311a:	2034      	movs	r0, #52	; 0x34
 800311c:	f000 fe6d 	bl	8003dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003120:	e091      	b.n	8003246 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==UART5)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_UART_MspInit+0x1c8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d153      	bne.n	80031d4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a47      	ldr	r2, [pc, #284]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313a:	6413      	str	r3, [r2, #64]	; 0x40
 800313c:	4b45      	ldr	r3, [pc, #276]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a39      	ldr	r2, [pc, #228]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003192:	2308      	movs	r3, #8
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	482e      	ldr	r0, [pc, #184]	; (8003258 <HAL_UART_MspInit+0x1c4>)
 800319e:	f001 fa49 	bl	8004634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a2:	2304      	movs	r3, #4
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031b2:	2308      	movs	r3, #8
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ba:	4619      	mov	r1, r3
 80031bc:	4828      	ldr	r0, [pc, #160]	; (8003260 <HAL_UART_MspInit+0x1cc>)
 80031be:	f001 fa39 	bl	8004634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2035      	movs	r0, #53	; 0x35
 80031c8:	f000 fdfb 	bl	8003dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80031cc:	2035      	movs	r0, #53	; 0x35
 80031ce:	f000 fe14 	bl	8003dfa <HAL_NVIC_EnableIRQ>
}
 80031d2:	e038      	b.n	8003246 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_UART_MspInit+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d133      	bne.n	8003246 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_UART_MspInit+0x1c0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003226:	2308      	movs	r3, #8
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_UART_MspInit+0x1c4>)
 8003232:	f001 f9ff 	bl	8004634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	2047      	movs	r0, #71	; 0x47
 800323c:	f000 fdc1 	bl	8003dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003240:	2047      	movs	r0, #71	; 0x47
 8003242:	f000 fdda 	bl	8003dfa <HAL_NVIC_EnableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3738      	adds	r7, #56	; 0x38
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40004c00 	.word	0x40004c00
 8003254:	40023800 	.word	0x40023800
 8003258:	40020800 	.word	0x40020800
 800325c:	40005000 	.word	0x40005000
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40011400 	.word	0x40011400

08003268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800326c:	f7ff fcd6 	bl	8002c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003270:	480c      	ldr	r0, [pc, #48]	; (80032a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003272:	490d      	ldr	r1, [pc, #52]	; (80032a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003278:	e002      	b.n	8003280 <LoopCopyDataInit>

0800327a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800327c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327e:	3304      	adds	r3, #4

08003280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003284:	d3f9      	bcc.n	800327a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003288:	4c0a      	ldr	r4, [pc, #40]	; (80032b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800328a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800328c:	e001      	b.n	8003292 <LoopFillZerobss>

0800328e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003290:	3204      	adds	r2, #4

08003292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003294:	d3fb      	bcc.n	800328e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003296:	f005 f9f5 	bl	8008684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329a:	f7ff f841 	bl	8002320 <main>
  bx  lr    
 800329e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80032ac:	0800a8fc 	.word	0x0800a8fc
  ldr r2, =_sbss
 80032b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80032b4:	20000684 	.word	0x20000684

080032b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC_IRQHandler>
	...

080032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_Init+0x40>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_Init+0x40>)
 80032c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_Init+0x40>)
 80032d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_Init+0x40>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e4:	2003      	movs	r0, #3
 80032e6:	f000 fd61 	bl	8003dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ea:	200f      	movs	r0, #15
 80032ec:	f000 f808 	bl	8003300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fb70 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x54>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_InitTick+0x58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003316:	fbb3 f3f1 	udiv	r3, r3, r1
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fd79 	bl	8003e16 <HAL_SYSTICK_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00e      	b.n	800334c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d80a      	bhi.n	800334a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003334:	2200      	movs	r2, #0
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f000 fd41 	bl	8003dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003340:	4a06      	ldr	r2, [pc, #24]	; (800335c <HAL_InitTick+0x5c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000000 	.word	0x20000000
 8003358:	20000008 	.word	0x20000008
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_IncTick+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_IncTick+0x24>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_IncTick+0x24>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008
 8003384:	20000534 	.word	0x20000534

08003388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return uwTick;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_GetTick+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000534 	.word	0x20000534

080033a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff ffee 	bl	8003388 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d005      	beq.n	80033c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_Delay+0x44>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c6:	bf00      	nop
 80033c8:	f7ff ffde 	bl	8003388 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d8f7      	bhi.n	80033c8 <HAL_Delay+0x28>
  {
  }
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e033      	b.n	8003466 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fdae 	bl	8001f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d118      	bne.n	8003458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800342e:	f023 0302 	bic.w	r3, r3, #2
 8003432:	f043 0202 	orr.w	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa68 	bl	8003910 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
 8003456:	e001      	b.n	800345c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_ADC_Start_DMA+0x1e>
 800348a:	2302      	movs	r3, #2
 800348c:	e0e9      	b.n	8003662 <HAL_ADC_Start_DMA+0x1f2>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d018      	beq.n	80034d6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034b4:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_ADC_Start_DMA+0x1fc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6d      	ldr	r2, [pc, #436]	; (8003670 <HAL_ADC_Start_DMA+0x200>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9a      	lsrs	r2, r3, #18
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	d107      	bne.n	80034f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 80a1 	bne.w	8003648 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003530:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d106      	bne.n	8003554 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f023 0206 	bic.w	r2, r3, #6
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
 8003552:	e002      	b.n	800355a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003562:	4b44      	ldr	r3, [pc, #272]	; (8003674 <HAL_ADC_Start_DMA+0x204>)
 8003564:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4a43      	ldr	r2, [pc, #268]	; (8003678 <HAL_ADC_Start_DMA+0x208>)
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a42      	ldr	r2, [pc, #264]	; (800367c <HAL_ADC_Start_DMA+0x20c>)
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4a41      	ldr	r2, [pc, #260]	; (8003680 <HAL_ADC_Start_DMA+0x210>)
 800357c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003586:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003596:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	334c      	adds	r3, #76	; 0x4c
 80035b2:	4619      	mov	r1, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f000 fce8 	bl	8003f8c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d12a      	bne.n	800361e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <HAL_ADC_Start_DMA+0x214>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d015      	beq.n	80035fe <HAL_ADC_Start_DMA+0x18e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <HAL_ADC_Start_DMA+0x218>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_Start_DMA+0x178>
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_ADC_Start_DMA+0x204>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_ADC_Start_DMA+0x21c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d136      	bne.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_ADC_Start_DMA+0x204>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d130      	bne.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d129      	bne.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	e020      	b.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_ADC_Start_DMA+0x214>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d11b      	bne.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d114      	bne.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	e00b      	b.n	8003660 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f043 0210 	orr.w	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000000 	.word	0x20000000
 8003670:	431bde83 	.word	0x431bde83
 8003674:	40012300 	.word	0x40012300
 8003678:	08003b09 	.word	0x08003b09
 800367c:	08003bc3 	.word	0x08003bc3
 8003680:	08003bdf 	.word	0x08003bdf
 8003684:	40012000 	.word	0x40012000
 8003688:	40012100 	.word	0x40012100
 800368c:	40012200 	.word	0x40012200

08003690 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e105      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x228>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d925      	bls.n	8003744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	3b1e      	subs	r3, #30
 800370e:	2207      	movs	r2, #7
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43da      	mvns	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	400a      	ands	r2, r1
 800371c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68d9      	ldr	r1, [r3, #12]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	4603      	mov	r3, r0
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4403      	add	r3, r0
 8003736:	3b1e      	subs	r3, #30
 8003738:	409a      	lsls	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e022      	b.n	800378a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6919      	ldr	r1, [r3, #16]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	2207      	movs	r2, #7
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	400a      	ands	r2, r1
 8003766:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6919      	ldr	r1, [r3, #16]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	4603      	mov	r3, r0
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4403      	add	r3, r0
 8003780:	409a      	lsls	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d824      	bhi.n	80037dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	3b05      	subs	r3, #5
 80037a4:	221f      	movs	r2, #31
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	400a      	ands	r2, r1
 80037b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b05      	subs	r3, #5
 80037ce:	fa00 f203 	lsl.w	r2, r0, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34
 80037da:	e04c      	b.n	8003876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d824      	bhi.n	800382e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3b23      	subs	r3, #35	; 0x23
 80037f6:	221f      	movs	r2, #31
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43da      	mvns	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	400a      	ands	r2, r1
 8003804:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3b23      	subs	r3, #35	; 0x23
 8003820:	fa00 f203 	lsl.w	r2, r0, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
 800382c:	e023      	b.n	8003876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	3b41      	subs	r3, #65	; 0x41
 8003840:	221f      	movs	r2, #31
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	400a      	ands	r2, r1
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	3b41      	subs	r3, #65	; 0x41
 800386a:	fa00 f203 	lsl.w	r2, r0, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_ADC_ConfigChannel+0x234>)
 8003878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a21      	ldr	r2, [pc, #132]	; (8003904 <HAL_ADC_ConfigChannel+0x238>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1cc>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b12      	cmp	r3, #18
 800388a:	d105      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_ADC_ConfigChannel+0x238>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d123      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x21e>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d003      	beq.n	80038b2 <HAL_ADC_ConfigChannel+0x1e6>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b11      	cmp	r3, #17
 80038b0:	d11b      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d111      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_ADC_ConfigChannel+0x23c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_ADC_ConfigChannel+0x240>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	0c9a      	lsrs	r2, r3, #18
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f9      	bne.n	80038de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40012300 	.word	0x40012300
 8003904:	40012000 	.word	0x40012000
 8003908:	20000000 	.word	0x20000000
 800390c:	431bde83 	.word	0x431bde83

08003910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003918:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <ADC_Init+0x1f0>)
 800391a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	021a      	lsls	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <ADC_Init+0x1f4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6899      	ldr	r1, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	e00f      	b.n	8003a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0202 	bic.w	r2, r2, #2
 8003a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7e1b      	ldrb	r3, [r3, #24]
 8003a28:	005a      	lsls	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	3b01      	subs	r3, #1
 8003a68:	035a      	lsls	r2, r3, #13
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	e007      	b.n	8003a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	051a      	lsls	r2, r3, #20
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ac6:	025a      	lsls	r2, r3, #9
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	029a      	lsls	r2, r3, #10
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40012300 	.word	0x40012300
 8003b04:	0f000001 	.word	0x0f000001

08003b08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13c      	bne.n	8003b9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d12b      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d127      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d119      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0220 	bic.w	r2, r2, #32
 8003b6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fd7b 	bl	8003690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b9a:	e00e      	b.n	8003bba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fd85 	bl	80036b8 <HAL_ADC_ErrorCallback>
}
 8003bae:	e004      	b.n	8003bba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fd67 	bl	80036a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fd5a 	bl	80036b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	60d3      	str	r3, [r2, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <__NVIC_EnableIRQ+0x38>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	db0a      	blt.n	8003cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <__NVIC_SetPriority+0x4c>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd4:	e00a      	b.n	8003cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4908      	ldr	r1, [pc, #32]	; (8003cfc <__NVIC_SetPriority+0x50>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	440b      	add	r3, r1
 8003cea:	761a      	strb	r2, [r3, #24]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf28      	it	cs
 8003d1e:	2304      	movcs	r3, #4
 8003d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d902      	bls.n	8003d30 <NVIC_EncodePriority+0x30>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3b03      	subs	r3, #3
 8003d2e:	e000      	b.n	8003d32 <NVIC_EncodePriority+0x32>
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	401a      	ands	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	4313      	orrs	r3, r2
         );
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d78:	d301      	bcc.n	8003d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00f      	b.n	8003d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <SysTick_Config+0x40>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d86:	210f      	movs	r1, #15
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	f7ff ff8e 	bl	8003cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <SysTick_Config+0x40>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <SysTick_Config+0x40>)
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	e000e010 	.word	0xe000e010

08003dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff29 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd4:	f7ff ff3e 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff8e 	bl	8003d00 <NVIC_EncodePriority>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff5d 	bl	8003cac <__NVIC_SetPriority>
}
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff31 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffa2 	bl	8003d68 <SysTick_Config>
 8003e24:	4603      	mov	r3, r0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff faa4 	bl	8003388 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e099      	b.n	8003f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6c:	e00f      	b.n	8003e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e6e:	f7ff fa8b 	bl	8003388 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d908      	bls.n	8003e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e078      	b.n	8003f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e8      	bne.n	8003e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <HAL_DMA_Init+0x158>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d107      	bne.n	8003ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0307 	bic.w	r3, r3, #7
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d117      	bne.n	8003f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb01 	bl	800453c <DMA_CheckFifoParam>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e016      	b.n	8003f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fab8 	bl	80044d0 <DMA_CalcBaseAndBitshift>
 8003f60:	4603      	mov	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	223f      	movs	r2, #63	; 0x3f
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	f010803f 	.word	0xf010803f

08003f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Start_IT+0x26>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e040      	b.n	8004034 <HAL_DMA_Start_IT+0xa8>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d12f      	bne.n	8004026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa4a 	bl	8004474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	223f      	movs	r2, #63	; 0x3f
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0216 	orr.w	r2, r2, #22
 8003ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0208 	orr.w	r2, r2, #8
 8004012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e005      	b.n	8004032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7ff f99d 	bl	8003388 <HAL_GetTick>
 800404e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d008      	beq.n	800406e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e052      	b.n	8004114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0216 	bic.w	r2, r2, #22
 800407c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800408c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <HAL_DMA_Abort+0x62>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0208 	bic.w	r2, r2, #8
 80040ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040be:	e013      	b.n	80040e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c0:	f7ff f962 	bl	8003388 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d90c      	bls.n	80040e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e015      	b.n	8004114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e4      	bne.n	80040c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	223f      	movs	r2, #63	; 0x3f
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d004      	beq.n	800413a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2280      	movs	r2, #128	; 0x80
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e00c      	b.n	8004154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2205      	movs	r2, #5
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800416c:	4b8e      	ldr	r3, [pc, #568]	; (80043a8 <HAL_DMA_IRQHandler+0x248>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a8e      	ldr	r2, [pc, #568]	; (80043ac <HAL_DMA_IRQHandler+0x24c>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	2208      	movs	r2, #8
 800418c:	409a      	lsls	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0204 	bic.w	r2, r2, #4
 80041b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	2208      	movs	r2, #8
 80041ba:	409a      	lsls	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	2201      	movs	r2, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f043 0202 	orr.w	r2, r3, #2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	2204      	movs	r2, #4
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	2204      	movs	r2, #4
 8004226:	409a      	lsls	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	2210      	movs	r2, #16
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d043      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03c      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2210      	movs	r2, #16
 800425c:	409a      	lsls	r2, r3
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d018      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d024      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
 800428e:	e01f      	b.n	80042d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
 80042a0:	e016      	b.n	80042d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0208 	bic.w	r2, r2, #8
 80042be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	2220      	movs	r2, #32
 80042d6:	409a      	lsls	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 808f 	beq.w	8004400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8087 	beq.w	8004400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	2220      	movs	r2, #32
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b05      	cmp	r3, #5
 8004308:	d136      	bne.n	8004378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0216 	bic.w	r2, r2, #22
 8004318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_DMA_IRQHandler+0x1da>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0208 	bic.w	r2, r2, #8
 8004348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	223f      	movs	r2, #63	; 0x3f
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d07e      	beq.n	800446c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
        }
        return;
 8004376:	e079      	b.n	800446c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	2b00      	cmp	r3, #0
 800439a:	d031      	beq.n	8004400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
 80043a4:	e02c      	b.n	8004400 <HAL_DMA_IRQHandler+0x2a0>
 80043a6:	bf00      	nop
 80043a8:	20000000 	.word	0x20000000
 80043ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d023      	beq.n	8004400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
 80043c0:	e01e      	b.n	8004400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10f      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0210 	bic.w	r2, r2, #16
 80043de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d032      	beq.n	800446e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d022      	beq.n	800445a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2205      	movs	r2, #5
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3301      	adds	r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	d307      	bcc.n	8004448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f2      	bne.n	800442c <HAL_DMA_IRQHandler+0x2cc>
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
 800446a:	e000      	b.n	800446e <HAL_DMA_IRQHandler+0x30e>
        return;
 800446c:	bf00      	nop
    }
  }
}
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d108      	bne.n	80044b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044b2:	e007      	b.n	80044c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	60da      	str	r2, [r3, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	3b10      	subs	r3, #16
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <DMA_CalcBaseAndBitshift+0x64>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044ea:	4a13      	ldr	r2, [pc, #76]	; (8004538 <DMA_CalcBaseAndBitshift+0x68>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d909      	bls.n	8004512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	659a      	str	r2, [r3, #88]	; 0x58
 8004510:	e007      	b.n	8004522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	aaaaaaab 	.word	0xaaaaaaab
 8004538:	0800a570 	.word	0x0800a570

0800453c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11f      	bne.n	8004596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d856      	bhi.n	800460a <DMA_CheckFifoParam+0xce>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <DMA_CheckFifoParam+0x28>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004575 	.word	0x08004575
 8004568:	08004587 	.word	0x08004587
 800456c:	08004575 	.word	0x08004575
 8004570:	0800460b 	.word	0x0800460b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d046      	beq.n	800460e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004584:	e043      	b.n	800460e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800458e:	d140      	bne.n	8004612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e03d      	b.n	8004612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459e:	d121      	bne.n	80045e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d837      	bhi.n	8004616 <DMA_CheckFifoParam+0xda>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <DMA_CheckFifoParam+0x70>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045c3 	.word	0x080045c3
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	080045d5 	.word	0x080045d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      break;
 80045c0:	e030      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d025      	beq.n	800461a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d2:	e022      	b.n	800461a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045dc:	d11f      	bne.n	800461e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045e2:	e01c      	b.n	800461e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d903      	bls.n	80045f2 <DMA_CheckFifoParam+0xb6>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d003      	beq.n	80045f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045f0:	e018      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
      break;
 80045f6:	e015      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e00b      	b.n	8004622 <DMA_CheckFifoParam+0xe6>
      break;
 800460a:	bf00      	nop
 800460c:	e00a      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
 8004610:	e008      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;
 8004612:	bf00      	nop
 8004614:	e006      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
 8004618:	e004      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;   
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
    }
  } 
  
  return status; 
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e16b      	b.n	8004928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004650:	2201      	movs	r2, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	f040 815a 	bne.w	8004922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d005      	beq.n	8004686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004682:	2b02      	cmp	r3, #2
 8004684:	d130      	bne.n	80046e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046bc:	2201      	movs	r2, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0201 	and.w	r2, r3, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d017      	beq.n	8004724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d123      	bne.n	8004778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	220f      	movs	r2, #15
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	08da      	lsrs	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3208      	adds	r2, #8
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80b4 	beq.w	8004922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b60      	ldr	r3, [pc, #384]	; (8004940 <HAL_GPIO_Init+0x30c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a5f      	ldr	r2, [pc, #380]	; (8004940 <HAL_GPIO_Init+0x30c>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_GPIO_Init+0x30c>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d6:	4a5b      	ldr	r2, [pc, #364]	; (8004944 <HAL_GPIO_Init+0x310>)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4013      	ands	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a52      	ldr	r2, [pc, #328]	; (8004948 <HAL_GPIO_Init+0x314>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02b      	beq.n	800485a <HAL_GPIO_Init+0x226>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a51      	ldr	r2, [pc, #324]	; (800494c <HAL_GPIO_Init+0x318>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d025      	beq.n	8004856 <HAL_GPIO_Init+0x222>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a50      	ldr	r2, [pc, #320]	; (8004950 <HAL_GPIO_Init+0x31c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01f      	beq.n	8004852 <HAL_GPIO_Init+0x21e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4f      	ldr	r2, [pc, #316]	; (8004954 <HAL_GPIO_Init+0x320>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d019      	beq.n	800484e <HAL_GPIO_Init+0x21a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4e      	ldr	r2, [pc, #312]	; (8004958 <HAL_GPIO_Init+0x324>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_GPIO_Init+0x216>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a4d      	ldr	r2, [pc, #308]	; (800495c <HAL_GPIO_Init+0x328>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00d      	beq.n	8004846 <HAL_GPIO_Init+0x212>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <HAL_GPIO_Init+0x32c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <HAL_GPIO_Init+0x20e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a4b      	ldr	r2, [pc, #300]	; (8004964 <HAL_GPIO_Init+0x330>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_GPIO_Init+0x20a>
 800483a:	2307      	movs	r3, #7
 800483c:	e00e      	b.n	800485c <HAL_GPIO_Init+0x228>
 800483e:	2308      	movs	r3, #8
 8004840:	e00c      	b.n	800485c <HAL_GPIO_Init+0x228>
 8004842:	2306      	movs	r3, #6
 8004844:	e00a      	b.n	800485c <HAL_GPIO_Init+0x228>
 8004846:	2305      	movs	r3, #5
 8004848:	e008      	b.n	800485c <HAL_GPIO_Init+0x228>
 800484a:	2304      	movs	r3, #4
 800484c:	e006      	b.n	800485c <HAL_GPIO_Init+0x228>
 800484e:	2303      	movs	r3, #3
 8004850:	e004      	b.n	800485c <HAL_GPIO_Init+0x228>
 8004852:	2302      	movs	r3, #2
 8004854:	e002      	b.n	800485c <HAL_GPIO_Init+0x228>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_GPIO_Init+0x228>
 800485a:	2300      	movs	r3, #0
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	f002 0203 	and.w	r2, r2, #3
 8004862:	0092      	lsls	r2, r2, #2
 8004864:	4093      	lsls	r3, r2
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800486c:	4935      	ldr	r1, [pc, #212]	; (8004944 <HAL_GPIO_Init+0x310>)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	3302      	adds	r3, #2
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_GPIO_Init+0x334>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800489e:	4a32      	ldr	r2, [pc, #200]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_GPIO_Init+0x334>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800491c:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_GPIO_Init+0x334>)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	f67f ae90 	bls.w	8004650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	40013800 	.word	0x40013800
 8004948:	40020000 	.word	0x40020000
 800494c:	40020400 	.word	0x40020400
 8004950:	40020800 	.word	0x40020800
 8004954:	40020c00 	.word	0x40020c00
 8004958:	40021000 	.word	0x40021000
 800495c:	40021400 	.word	0x40021400
 8004960:	40021800 	.word	0x40021800
 8004964:	40021c00 	.word	0x40021c00
 8004968:	40013c00 	.word	0x40013c00

0800496c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	807b      	strh	r3, [r7, #2]
 8004978:	4613      	mov	r3, r2
 800497a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800497c:	787b      	ldrb	r3, [r7, #1]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004988:	e003      	b.n	8004992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800498a:	887b      	ldrh	r3, [r7, #2]
 800498c:	041a      	lsls	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	619a      	str	r2, [r3, #24]
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e12b      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fc4e 	bl	8002268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a04:	f000 fd80 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8004a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a81      	ldr	r2, [pc, #516]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d807      	bhi.n	8004a24 <HAL_I2C_Init+0x84>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a80      	ldr	r2, [pc, #512]	; (8004c18 <HAL_I2C_Init+0x278>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf94      	ite	ls
 8004a1c:	2301      	movls	r3, #1
 8004a1e:	2300      	movhi	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e006      	b.n	8004a32 <HAL_I2C_Init+0x92>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a7d      	ldr	r2, [pc, #500]	; (8004c1c <HAL_I2C_Init+0x27c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bf94      	ite	ls
 8004a2c:	2301      	movls	r3, #1
 8004a2e:	2300      	movhi	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0e7      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a78      	ldr	r2, [pc, #480]	; (8004c20 <HAL_I2C_Init+0x280>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d802      	bhi.n	8004a74 <HAL_I2C_Init+0xd4>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3301      	adds	r3, #1
 8004a72:	e009      	b.n	8004a88 <HAL_I2C_Init+0xe8>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a69      	ldr	r2, [pc, #420]	; (8004c24 <HAL_I2C_Init+0x284>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	3301      	adds	r3, #1
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	495c      	ldr	r1, [pc, #368]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	d819      	bhi.n	8004adc <HAL_I2C_Init+0x13c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e59      	subs	r1, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004abc:	400b      	ands	r3, r1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_I2C_Init+0x138>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1e59      	subs	r1, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	e051      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e04f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d111      	bne.n	8004b08 <HAL_I2C_Init+0x168>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e58      	subs	r0, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e012      	b.n	8004b2e <HAL_I2C_Init+0x18e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Init+0x196>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e022      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <HAL_I2C_Init+0x1bc>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e58      	subs	r0, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	440b      	add	r3, r1
 8004b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	e00f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	0099      	lsls	r1, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6809      	ldr	r1, [r1, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6911      	ldr	r1, [r2, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	000186a0 	.word	0x000186a0
 8004c18:	001e847f 	.word	0x001e847f
 8004c1c:	003d08ff 	.word	0x003d08ff
 8004c20:	431bde83 	.word	0x431bde83
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e267      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d075      	beq.n	8004d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d112      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5e:	4b82      	ldr	r3, [pc, #520]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	4b7e      	ldr	r3, [pc, #504]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05b      	beq.n	8004d30 <HAL_RCC_OscConfig+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d157      	bne.n	8004d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e242      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x74>
 8004c8e:	4b76      	ldr	r3, [pc, #472]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a75      	ldr	r2, [pc, #468]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e01d      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x98>
 8004ca6:	4b70      	ldr	r3, [pc, #448]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6f      	ldr	r2, [pc, #444]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b6d      	ldr	r3, [pc, #436]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6c      	ldr	r2, [pc, #432]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a68      	ldr	r2, [pc, #416]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fe fb52 	bl	8003388 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fe fb4e 	bl	8003388 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	; 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e207      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xc0>
 8004d06:	e014      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fe fb3e 	bl	8003388 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fe fb3a 	bl	8003388 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1f3      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0xe8>
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d063      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d11c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d56:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d001      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e1c7      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4937      	ldr	r1, [pc, #220]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	e03a      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <HAL_RCC_OscConfig+0x244>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe faf3 	bl	8003388 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fe faef 	bl	8003388 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e1a8      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4925      	ldr	r1, [pc, #148]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
 8004dd8:	e015      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_OscConfig+0x244>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fad2 	bl	8003388 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fe face 	bl	8003388 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e187      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d036      	beq.n	8004e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_RCC_OscConfig+0x248>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fe fab2 	bl	8003388 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fe faae 	bl	8003388 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e167      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x200>
 8004e46:	e01b      	b.n	8004e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_OscConfig+0x248>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fa9b 	bl	8003388 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	e00e      	b.n	8004e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fe fa97 	bl	8003388 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d907      	bls.n	8004e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e150      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	42470000 	.word	0x42470000
 8004e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e74:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ea      	bne.n	8004e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8097 	beq.w	8004fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e92:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10f      	bne.n	8004ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b7a      	ldr	r3, [pc, #488]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b77      	ldr	r3, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d118      	bne.n	8004efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eca:	4b74      	ldr	r3, [pc, #464]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a73      	ldr	r2, [pc, #460]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed6:	f7fe fa57 	bl	8003388 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ede:	f7fe fa53 	bl	8003388 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e10c      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	4b6a      	ldr	r3, [pc, #424]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2ea>
 8004f04:	4b64      	ldr	r3, [pc, #400]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	4a63      	ldr	r2, [pc, #396]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f10:	e01c      	b.n	8004f4c <HAL_RCC_OscConfig+0x324>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x30c>
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f20:	f043 0304 	orr.w	r3, r3, #4
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4a5b      	ldr	r2, [pc, #364]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0x324>
 8004f34:	4b58      	ldr	r3, [pc, #352]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a57      	ldr	r2, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	4b55      	ldr	r3, [pc, #340]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a54      	ldr	r2, [pc, #336]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f023 0304 	bic.w	r3, r3, #4
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fe fa18 	bl	8003388 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fe fa14 	bl	8003388 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0cb      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f72:	4b49      	ldr	r3, [pc, #292]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ee      	beq.n	8004f5c <HAL_RCC_OscConfig+0x334>
 8004f7e:	e014      	b.n	8004faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f80:	f7fe fa02 	bl	8003388 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fe f9fe 	bl	8003388 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0b5      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1ee      	bne.n	8004f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb0:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	4a38      	ldr	r2, [pc, #224]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a1 	beq.w	8005108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fc6:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d05c      	beq.n	800508c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d141      	bne.n	800505e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f9d2 	bl	8003388 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fe f9ce 	bl	8003388 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e087      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fe f9a7 	bl	8003388 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fe f9a3 	bl	8003388 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e05c      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x416>
 800505c:	e054      	b.n	8005108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fe f990 	bl	8003388 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506c:	f7fe f98c 	bl	8003388 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e045      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x444>
 800508a:	e03d      	b.n	8005108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e038      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
 80050a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a4:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x4ec>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d028      	beq.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d121      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d11a      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	3b01      	subs	r3, #1
 80050ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800

08005118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0cc      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d90c      	bls.n	8005154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b63      	ldr	r3, [pc, #396]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b8      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a58      	ldr	r2, [pc, #352]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800518e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	494d      	ldr	r1, [pc, #308]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d044      	beq.n	8005238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d6:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e06f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e067      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4934      	ldr	r1, [pc, #208]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005208:	f7fe f8be 	bl	8003388 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fe f8ba 	bl	8003388 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e04f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d20c      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e032      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4916      	ldr	r1, [pc, #88]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f821 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	490a      	ldr	r1, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f81e 	bl	8003300 <HAL_InitTick>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023c00 	.word	0x40023c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	0800a558 	.word	0x0800a558
 80052dc:	20000000 	.word	0x20000000
 80052e0:	20000004 	.word	0x20000004

080052e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e8:	b094      	sub	sp, #80	; 0x50
 80052ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
 80052f0:	2300      	movs	r3, #0
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	2300      	movs	r3, #0
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052fc:	4b79      	ldr	r3, [pc, #484]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b08      	cmp	r3, #8
 8005306:	d00d      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x40>
 8005308:	2b08      	cmp	r3, #8
 800530a:	f200 80e1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x34>
 8005312:	2b04      	cmp	r3, #4
 8005314:	d003      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x3a>
 8005316:	e0db      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b73      	ldr	r3, [pc, #460]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800531c:	e0db      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800531e:	4b73      	ldr	r3, [pc, #460]	; (80054ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005322:	e0d8      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005324:	4b6f      	ldr	r3, [pc, #444]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532e:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d063      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	2200      	movs	r2, #0
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
 8005344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	f04f 0000 	mov.w	r0, #0
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	0159      	lsls	r1, r3, #5
 8005364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005368:	0150      	lsls	r0, r2, #5
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4621      	mov	r1, r4
 8005370:	1a51      	subs	r1, r2, r1
 8005372:	6139      	str	r1, [r7, #16]
 8005374:	4629      	mov	r1, r5
 8005376:	eb63 0301 	sbc.w	r3, r3, r1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005388:	4659      	mov	r1, fp
 800538a:	018b      	lsls	r3, r1, #6
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005392:	4651      	mov	r1, sl
 8005394:	018a      	lsls	r2, r1, #6
 8005396:	4651      	mov	r1, sl
 8005398:	ebb2 0801 	subs.w	r8, r2, r1
 800539c:	4659      	mov	r1, fp
 800539e:	eb63 0901 	sbc.w	r9, r3, r1
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	eb18 0303 	adds.w	r3, r8, r3
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	462b      	mov	r3, r5
 80053c4:	eb49 0303 	adc.w	r3, r9, r3
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053d6:	4629      	mov	r1, r5
 80053d8:	024b      	lsls	r3, r1, #9
 80053da:	4621      	mov	r1, r4
 80053dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e0:	4621      	mov	r1, r4
 80053e2:	024a      	lsls	r2, r1, #9
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	2200      	movs	r2, #0
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053f4:	f7fb fbd8 	bl	8000ba8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005400:	e058      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005402:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	2200      	movs	r2, #0
 800540a:	4618      	mov	r0, r3
 800540c:	4611      	mov	r1, r2
 800540e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f04f 0000 	mov.w	r0, #0
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	0159      	lsls	r1, r3, #5
 800542a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800542e:	0150      	lsls	r0, r2, #5
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4641      	mov	r1, r8
 8005436:	ebb2 0a01 	subs.w	sl, r2, r1
 800543a:	4649      	mov	r1, r9
 800543c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800544c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005454:	ebb2 040a 	subs.w	r4, r2, sl
 8005458:	eb63 050b 	sbc.w	r5, r3, fp
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	464b      	mov	r3, r9
 8005478:	eb45 0303 	adc.w	r3, r5, r3
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549e:	2200      	movs	r2, #0
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	61fa      	str	r2, [r7, #28]
 80054a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a8:	f7fb fb7e 	bl	8000ba8 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3750      	adds	r7, #80	; 0x50
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	007a1200 	.word	0x007a1200

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000000 	.word	0x20000000

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	; (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0800a568 	.word	0x0800a568

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4903      	ldr	r1, [pc, #12]	; (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0800a568 	.word	0x0800a568

08005558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e041      	b.n	80055ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fd fc70 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f000 fb48 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e041      	b.n	800568c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f839 	bl	8005694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f000 faf9 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_TIM_PWM_Start+0x24>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e022      	b.n	8005712 <HAL_TIM_PWM_Start+0x6a>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d109      	bne.n	80056e6 <HAL_TIM_PWM_Start+0x3e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e015      	b.n	8005712 <HAL_TIM_PWM_Start+0x6a>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d109      	bne.n	8005700 <HAL_TIM_PWM_Start+0x58>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e008      	b.n	8005712 <HAL_TIM_PWM_Start+0x6a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e07c      	b.n	8005814 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <HAL_TIM_PWM_Start+0x82>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005728:	e013      	b.n	8005752 <HAL_TIM_PWM_Start+0xaa>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b04      	cmp	r3, #4
 800572e:	d104      	bne.n	800573a <HAL_TIM_PWM_Start+0x92>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005738:	e00b      	b.n	8005752 <HAL_TIM_PWM_Start+0xaa>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0xa2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005748:	e003      	b.n	8005752 <HAL_TIM_PWM_Start+0xaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2201      	movs	r2, #1
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fd5c 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_TIM_PWM_Start+0x174>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIM_PWM_Start+0xcc>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <HAL_TIM_PWM_Start+0x178>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <HAL_TIM_PWM_Start+0xd0>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_TIM_PWM_Start+0xd2>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_TIM_PWM_Start+0x174>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d01d      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_TIM_PWM_Start+0x17c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_TIM_PWM_Start+0x180>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_TIM_PWM_Start+0x184>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_TIM_PWM_Start+0x178>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_TIM_PWM_Start+0x188>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIM_PWM_Start+0x136>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <HAL_TIM_PWM_Start+0x18c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d111      	bne.n	8005802 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d010      	beq.n	8005812 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	e007      	b.n	8005812 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40014000 	.word	0x40014000
 8005834:	40001800 	.word	0x40001800

08005838 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fce4 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2e      	ldr	r2, [pc, #184]	; (8005910 <HAL_TIM_PWM_Stop+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_PWM_Stop+0x2c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <HAL_TIM_PWM_Stop+0xdc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_TIM_PWM_Stop+0x30>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_TIM_PWM_Stop+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	f241 1311 	movw	r3, #4369	; 0x1111
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_TIM_PWM_Stop+0x66>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	f240 4344 	movw	r3, #1092	; 0x444
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <HAL_TIM_PWM_Stop+0x66>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <HAL_TIM_PWM_Stop+0x96>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	f240 4344 	movw	r3, #1092	; 0x444
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_PWM_Stop+0x96>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Stop+0xa6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Stop+0xce>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Stop+0xb6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Stop+0xce>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Stop+0xc6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Stop+0xce>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40010000 	.word	0x40010000
 8005914:	40010400 	.word	0x40010400

08005918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005932:	2302      	movs	r3, #2
 8005934:	e0ae      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b0c      	cmp	r3, #12
 8005942:	f200 809f 	bhi.w	8005a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005981 	.word	0x08005981
 8005950:	08005a85 	.word	0x08005a85
 8005954:	08005a85 	.word	0x08005a85
 8005958:	08005a85 	.word	0x08005a85
 800595c:	080059c1 	.word	0x080059c1
 8005960:	08005a85 	.word	0x08005a85
 8005964:	08005a85 	.word	0x08005a85
 8005968:	08005a85 	.word	0x08005a85
 800596c:	08005a03 	.word	0x08005a03
 8005970:	08005a85 	.word	0x08005a85
 8005974:	08005a85 	.word	0x08005a85
 8005978:	08005a85 	.word	0x08005a85
 800597c:	08005a43 	.word	0x08005a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f9fc 	bl	8005d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0208 	orr.w	r2, r2, #8
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0204 	bic.w	r2, r2, #4
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	619a      	str	r2, [r3, #24]
      break;
 80059be:	e064      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fa4c 	bl	8005e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	619a      	str	r2, [r3, #24]
      break;
 8005a00:	e043      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 faa1 	bl	8005f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0208 	orr.w	r2, r2, #8
 8005a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0204 	bic.w	r2, r2, #4
 8005a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	61da      	str	r2, [r3, #28]
      break;
 8005a40:	e023      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 faf5 	bl	8006038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	021a      	lsls	r2, r3, #8
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	61da      	str	r2, [r3, #28]
      break;
 8005a82:	e002      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	75fb      	strb	r3, [r7, #23]
      break;
 8005a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e0b4      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x186>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af0:	d03e      	beq.n	8005b70 <HAL_TIM_ConfigClockSource+0xd4>
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af6:	f200 8087 	bhi.w	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afe:	f000 8086 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x172>
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	d87f      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b70      	cmp	r3, #112	; 0x70
 8005b0a:	d01a      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0xa6>
 8005b0c:	2b70      	cmp	r3, #112	; 0x70
 8005b0e:	d87b      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b60      	cmp	r3, #96	; 0x60
 8005b12:	d050      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b14:	2b60      	cmp	r3, #96	; 0x60
 8005b16:	d877      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b50      	cmp	r3, #80	; 0x50
 8005b1a:	d03c      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0xfa>
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d873      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d058      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d86f      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b30      	cmp	r3, #48	; 0x30
 8005b2a:	d064      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b2c:	2b30      	cmp	r3, #48	; 0x30
 8005b2e:	d86b      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d060      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d867      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05c      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d05a      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b40:	e062      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b52:	f000 fb41 	bl	80061d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	609a      	str	r2, [r3, #8]
      break;
 8005b6e:	e04f      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b80:	f000 fb2a 	bl	80061d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b92:	609a      	str	r2, [r3, #8]
      break;
 8005b94:	e03c      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fa9e 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2150      	movs	r1, #80	; 0x50
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 faf7 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e02c      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fabd 	bl	8006142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2160      	movs	r1, #96	; 0x60
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fae7 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e01c      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 fa7e 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fad7 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e00c      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 face 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005c06:	e003      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c0c:	e000      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a46      	ldr	r2, [pc, #280]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a43      	ldr	r2, [pc, #268]	; (8005d5c <TIM_Base_SetConfig+0x130>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a42      	ldr	r2, [pc, #264]	; (8005d60 <TIM_Base_SetConfig+0x134>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a41      	ldr	r2, [pc, #260]	; (8005d64 <TIM_Base_SetConfig+0x138>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <TIM_Base_SetConfig+0x13c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a35      	ldr	r2, [pc, #212]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d027      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a32      	ldr	r2, [pc, #200]	; (8005d5c <TIM_Base_SetConfig+0x130>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d023      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a31      	ldr	r2, [pc, #196]	; (8005d60 <TIM_Base_SetConfig+0x134>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01f      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a30      	ldr	r2, [pc, #192]	; (8005d64 <TIM_Base_SetConfig+0x138>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <TIM_Base_SetConfig+0x13c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d017      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2e      	ldr	r2, [pc, #184]	; (8005d6c <TIM_Base_SetConfig+0x140>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <TIM_Base_SetConfig+0x144>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <TIM_Base_SetConfig+0x148>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <TIM_Base_SetConfig+0x14c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <TIM_Base_SetConfig+0x150>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0x154>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d108      	bne.n	8005cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <TIM_Base_SetConfig+0x13c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d103      	bne.n	8005d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40010400 	.word	0x40010400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800
 8005d78:	40001800 	.word	0x40001800
 8005d7c:	40001c00 	.word	0x40001c00
 8005d80:	40002000 	.word	0x40002000

08005d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f023 0201 	bic.w	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0302 	bic.w	r3, r3, #2
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <TIM_OC1_SetConfig+0xd8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC1_SetConfig+0x64>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <TIM_OC1_SetConfig+0xdc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10c      	bne.n	8005e02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0308 	bic.w	r3, r3, #8
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <TIM_OC1_SetConfig+0xd8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC1_SetConfig+0x8e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <TIM_OC1_SetConfig+0xdc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0210 	bic.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0320 	bic.w	r3, r3, #32
 8005eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a22      	ldr	r2, [pc, #136]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x68>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10d      	bne.n	8005ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x94>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a21      	ldr	r2, [pc, #132]	; (8006030 <TIM_OC3_SetConfig+0xe0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x66>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <TIM_OC3_SetConfig+0xe4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10d      	bne.n	8005fd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	; (8006030 <TIM_OC3_SetConfig+0xe0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x92>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a15      	ldr	r2, [pc, #84]	; (8006034 <TIM_OC3_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d113      	bne.n	800600a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <TIM_OC4_SetConfig+0xa4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC4_SetConfig+0x68>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <TIM_OC4_SetConfig+0xa8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 030a 	bic.w	r3, r3, #10
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	f043 0307 	orr.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	43db      	mvns	r3, r3
 800623a:	401a      	ands	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e05a      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d01d      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e042      	b.n	80063f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc fe86 	bl	8003094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800639e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fdf3 	bl	8006f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b20      	cmp	r3, #32
 800641a:	d175      	bne.n	8006508 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Transmit+0x2c>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e06e      	b.n	800650a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2221      	movs	r2, #33	; 0x21
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800643a:	f7fc ffa5 	bl	8003388 <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d108      	bne.n	8006468 <HAL_UART_Transmit+0x6c>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e003      	b.n	8006470 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006470:	e02e      	b.n	80064d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2180      	movs	r1, #128	; 0x80
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fb55 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e03a      	b.n	800650a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	3302      	adds	r3, #2
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e007      	b.n	80064c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	3301      	adds	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1cb      	bne.n	8006472 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2140      	movs	r1, #64	; 0x40
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fb21 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e006      	b.n	800650a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e000      	b.n	800650a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	4613      	mov	r3, r2
 800651e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b20      	cmp	r3, #32
 800652a:	d121      	bne.n	8006570 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_UART_Transmit_IT+0x26>
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e01a      	b.n	8006572 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800656a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e000      	b.n	8006572 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006570:	2302      	movs	r3, #2
  }
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	4613      	mov	r3, r2
 800658a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b20      	cmp	r3, #32
 8006596:	d112      	bne.n	80065be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_UART_Receive_IT+0x26>
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e00b      	b.n	80065c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	461a      	mov	r2, r3
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fb12 	bl	8006bde <UART_Start_Receive_IT>
 80065ba:	4603      	mov	r3, r0
 80065bc:	e000      	b.n	80065c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b0ba      	sub	sp, #232	; 0xe8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10f      	bne.n	800662e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_UART_IRQHandler+0x66>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fbf2 	bl	8006e10 <UART_Receive_IT>
      return;
 800662c:	e25b      	b.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800662e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80de 	beq.w	80067f4 <HAL_UART_IRQHandler+0x22c>
 8006638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006648:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80d1 	beq.w	80067f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <HAL_UART_IRQHandler+0xae>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_UART_IRQHandler+0xd2>
 8006682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f043 0202 	orr.w	r2, r3, #2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0xf6>
 80066a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d011      	beq.n	80066ee <HAL_UART_IRQHandler+0x126>
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 81f2 	beq.w	8006adc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_UART_IRQHandler+0x14e>
 8006704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fb7d 	bl	8006e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b40      	cmp	r3, #64	; 0x40
 8006722:	bf0c      	ite	eq
 8006724:	2301      	moveq	r3, #1
 8006726:	2300      	movne	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <HAL_UART_IRQHandler+0x17a>
 800673a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d04f      	beq.n	80067e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa85 	bl	8006c52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d141      	bne.n	80067da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800676c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800678e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800679a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1d9      	bne.n	8006756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	4a7e      	ldr	r2, [pc, #504]	; (80069a8 <HAL_UART_IRQHandler+0x3e0>)
 80067b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd fcb0 	bl	800411c <HAL_DMA_Abort_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e00e      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f994 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e00a      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f990 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	e006      	b.n	80067f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f98c 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80067ee:	e175      	b.n	8006adc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	bf00      	nop
    return;
 80067f2:	e173      	b.n	8006adc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	f040 814f 	bne.w	8006a9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8148 	beq.w	8006a9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800680c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8141 	beq.w	8006a9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	f040 80b6 	bne.w	80069ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800684c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8145 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800685a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685e:	429a      	cmp	r2, r3
 8006860:	f080 813e 	bcs.w	8006ae0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800686a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	f000 8088 	beq.w	800698a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d9      	bne.n	800687a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e1      	bne.n	80068c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800692c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e3      	bne.n	8006902 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695a:	f023 0310 	bic.w	r3, r3, #16
 800695e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800696c:	65ba      	str	r2, [r7, #88]	; 0x58
 800696e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800697a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e3      	bne.n	8006948 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	4618      	mov	r0, r3
 8006986:	f7fd fb59 	bl	800403c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006998:	b29b      	uxth	r3, r3
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8b7 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a6:	e09b      	b.n	8006ae0 <HAL_UART_IRQHandler+0x518>
 80069a8:	08006d19 	.word	0x08006d19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 808e 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8089 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	330c      	adds	r3, #12
 80069d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069f6:	647a      	str	r2, [r7, #68]	; 0x44
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e3      	bne.n	80069d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a74:	61fa      	str	r2, [r7, #28]
 8006a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	617b      	str	r3, [r7, #20]
   return(result);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e3      	bne.n	8006a50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f83d 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a9a:	e023      	b.n	8006ae4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_UART_IRQHandler+0x4f4>
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f943 	bl	8006d40 <UART_Transmit_IT>
    return;
 8006aba:	e014      	b.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f983 	bl	8006de0 <UART_EndTransmit_IT>
    return;
 8006ada:	e004      	b.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006adc:	bf00      	nop
 8006ade:	e002      	b.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ae0:	bf00      	nop
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ae4:	bf00      	nop
  }
}
 8006ae6:	37e8      	adds	r7, #232	; 0xe8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3c:	e03b      	b.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d037      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fc fc1f 	bl	8003388 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e03a      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d023      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d020      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d01d      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d116      	bne.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f857 	bl	8006c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2208      	movs	r2, #8
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e00f      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d0b4      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	4613      	mov	r3, r2
 8006bea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	; 0x22
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695a      	ldr	r2, [r3, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0220 	orr.w	r2, r2, #32
 8006c42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b095      	sub	sp, #84	; 0x54
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c7a:	643a      	str	r2, [r7, #64]	; 0x40
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d119      	bne.n	8006cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cea:	61ba      	str	r2, [r7, #24]
 8006cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d0c:	bf00      	nop
 8006d0e:	3754      	adds	r7, #84	; 0x54
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff fee4 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b21      	cmp	r3, #33	; 0x21
 8006d52:	d13e      	bne.n	8006dd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d114      	bne.n	8006d88 <UART_Transmit_IT+0x48>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d110      	bne.n	8006d88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	1c9a      	adds	r2, r3, #2
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	621a      	str	r2, [r3, #32]
 8006d86:	e008      	b.n	8006d9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6211      	str	r1, [r2, #32]
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4619      	mov	r1, r3
 8006da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fe73 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08c      	sub	sp, #48	; 0x30
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b22      	cmp	r3, #34	; 0x22
 8006e22:	f040 80ae 	bne.w	8006f82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2e:	d117      	bne.n	8006e60 <UART_Receive_IT+0x50>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d113      	bne.n	8006e60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	1c9a      	adds	r2, r3, #2
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e5e:	e026      	b.n	8006eae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e72:	d007      	beq.n	8006e84 <UART_Receive_IT+0x74>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <UART_Receive_IT+0x82>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d106      	bne.n	8006e92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e008      	b.n	8006ea4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d15d      	bne.n	8006f7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0220 	bic.w	r2, r2, #32
 8006ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d135      	bne.n	8006f74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f023 0310 	bic.w	r3, r3, #16
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2e:	623a      	str	r2, [r7, #32]
 8006f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	69f9      	ldr	r1, [r7, #28]
 8006f34:	6a3a      	ldr	r2, [r7, #32]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e5      	bne.n	8006f0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d10a      	bne.n	8006f66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff fdd1 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
 8006f72:	e002      	b.n	8006f7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fb faf1 	bl	800255c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e002      	b.n	8006f84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3730      	adds	r7, #48	; 0x30
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b0c0      	sub	sp, #256	; 0x100
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	68d9      	ldr	r1, [r3, #12]
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	ea40 0301 	orr.w	r3, r0, r1
 8006fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fe4:	f021 010c 	bic.w	r1, r1, #12
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007006:	6999      	ldr	r1, [r3, #24]
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	ea40 0301 	orr.w	r3, r0, r1
 8007012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b8f      	ldr	r3, [pc, #572]	; (8007258 <UART_SetConfig+0x2cc>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d005      	beq.n	800702c <UART_SetConfig+0xa0>
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b8d      	ldr	r3, [pc, #564]	; (800725c <UART_SetConfig+0x2d0>)
 8007028:	429a      	cmp	r2, r3
 800702a:	d104      	bne.n	8007036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fe fa80 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8007030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007034:	e003      	b.n	800703e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007036:	f7fe fa67 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 800703a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007048:	f040 810c 	bne.w	8007264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800704c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007050:	2200      	movs	r2, #0
 8007052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800705a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	1891      	adds	r1, r2, r2
 8007064:	65b9      	str	r1, [r7, #88]	; 0x58
 8007066:	415b      	adcs	r3, r3
 8007068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800706a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800706e:	4621      	mov	r1, r4
 8007070:	eb12 0801 	adds.w	r8, r2, r1
 8007074:	4629      	mov	r1, r5
 8007076:	eb43 0901 	adc.w	r9, r3, r1
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800708a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800708e:	4690      	mov	r8, r2
 8007090:	4699      	mov	r9, r3
 8007092:	4623      	mov	r3, r4
 8007094:	eb18 0303 	adds.w	r3, r8, r3
 8007098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800709c:	462b      	mov	r3, r5
 800709e:	eb49 0303 	adc.w	r3, r9, r3
 80070a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ba:	460b      	mov	r3, r1
 80070bc:	18db      	adds	r3, r3, r3
 80070be:	653b      	str	r3, [r7, #80]	; 0x50
 80070c0:	4613      	mov	r3, r2
 80070c2:	eb42 0303 	adc.w	r3, r2, r3
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54
 80070c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070d0:	f7f9 fd6a 	bl	8000ba8 <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4b61      	ldr	r3, [pc, #388]	; (8007260 <UART_SetConfig+0x2d4>)
 80070da:	fba3 2302 	umull	r2, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	011c      	lsls	r4, r3, #4
 80070e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	1891      	adds	r1, r2, r2
 80070fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80070fc:	415b      	adcs	r3, r3
 80070fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007104:	4641      	mov	r1, r8
 8007106:	eb12 0a01 	adds.w	sl, r2, r1
 800710a:	4649      	mov	r1, r9
 800710c:	eb43 0b01 	adc.w	fp, r3, r1
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800711c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007124:	4692      	mov	sl, r2
 8007126:	469b      	mov	fp, r3
 8007128:	4643      	mov	r3, r8
 800712a:	eb1a 0303 	adds.w	r3, sl, r3
 800712e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007132:	464b      	mov	r3, r9
 8007134:	eb4b 0303 	adc.w	r3, fp, r3
 8007138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800714c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007150:	460b      	mov	r3, r1
 8007152:	18db      	adds	r3, r3, r3
 8007154:	643b      	str	r3, [r7, #64]	; 0x40
 8007156:	4613      	mov	r3, r2
 8007158:	eb42 0303 	adc.w	r3, r2, r3
 800715c:	647b      	str	r3, [r7, #68]	; 0x44
 800715e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007166:	f7f9 fd1f 	bl	8000ba8 <__aeabi_uldivmod>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4611      	mov	r1, r2
 8007170:	4b3b      	ldr	r3, [pc, #236]	; (8007260 <UART_SetConfig+0x2d4>)
 8007172:	fba3 2301 	umull	r2, r3, r3, r1
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	2264      	movs	r2, #100	; 0x64
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	1acb      	subs	r3, r1, r3
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007186:	4b36      	ldr	r3, [pc, #216]	; (8007260 <UART_SetConfig+0x2d4>)
 8007188:	fba3 2302 	umull	r2, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007194:	441c      	add	r4, r3
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719a:	2200      	movs	r2, #0
 800719c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	1891      	adds	r1, r2, r2
 80071ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80071b0:	415b      	adcs	r3, r3
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071b8:	4641      	mov	r1, r8
 80071ba:	1851      	adds	r1, r2, r1
 80071bc:	6339      	str	r1, [r7, #48]	; 0x30
 80071be:	4649      	mov	r1, r9
 80071c0:	414b      	adcs	r3, r1
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071d0:	4659      	mov	r1, fp
 80071d2:	00cb      	lsls	r3, r1, #3
 80071d4:	4651      	mov	r1, sl
 80071d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071da:	4651      	mov	r1, sl
 80071dc:	00ca      	lsls	r2, r1, #3
 80071de:	4610      	mov	r0, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	4642      	mov	r2, r8
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ec:	464b      	mov	r3, r9
 80071ee:	460a      	mov	r2, r1
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800720c:	460b      	mov	r3, r1
 800720e:	18db      	adds	r3, r3, r3
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
 8007212:	4613      	mov	r3, r2
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800721e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007222:	f7f9 fcc1 	bl	8000ba8 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <UART_SetConfig+0x2d4>)
 800722c:	fba3 1302 	umull	r1, r3, r3, r2
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	2164      	movs	r1, #100	; 0x64
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	3332      	adds	r3, #50	; 0x32
 800723e:	4a08      	ldr	r2, [pc, #32]	; (8007260 <UART_SetConfig+0x2d4>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	f003 0207 	and.w	r2, r3, #7
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4422      	add	r2, r4
 8007252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007254:	e106      	b.n	8007464 <UART_SetConfig+0x4d8>
 8007256:	bf00      	nop
 8007258:	40011000 	.word	0x40011000
 800725c:	40011400 	.word	0x40011400
 8007260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800726e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007276:	4642      	mov	r2, r8
 8007278:	464b      	mov	r3, r9
 800727a:	1891      	adds	r1, r2, r2
 800727c:	6239      	str	r1, [r7, #32]
 800727e:	415b      	adcs	r3, r3
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
 8007282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007286:	4641      	mov	r1, r8
 8007288:	1854      	adds	r4, r2, r1
 800728a:	4649      	mov	r1, r9
 800728c:	eb43 0501 	adc.w	r5, r3, r1
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	00eb      	lsls	r3, r5, #3
 800729a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729e:	00e2      	lsls	r2, r4, #3
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	18e3      	adds	r3, r4, r3
 80072a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072ac:	464b      	mov	r3, r9
 80072ae:	eb45 0303 	adc.w	r3, r5, r3
 80072b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072d2:	4629      	mov	r1, r5
 80072d4:	008b      	lsls	r3, r1, #2
 80072d6:	4621      	mov	r1, r4
 80072d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072dc:	4621      	mov	r1, r4
 80072de:	008a      	lsls	r2, r1, #2
 80072e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072e4:	f7f9 fc60 	bl	8000ba8 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4b60      	ldr	r3, [pc, #384]	; (8007470 <UART_SetConfig+0x4e4>)
 80072ee:	fba3 2302 	umull	r2, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	011c      	lsls	r4, r3, #4
 80072f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	1891      	adds	r1, r2, r2
 800730e:	61b9      	str	r1, [r7, #24]
 8007310:	415b      	adcs	r3, r3
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007318:	4641      	mov	r1, r8
 800731a:	1851      	adds	r1, r2, r1
 800731c:	6139      	str	r1, [r7, #16]
 800731e:	4649      	mov	r1, r9
 8007320:	414b      	adcs	r3, r1
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007330:	4659      	mov	r1, fp
 8007332:	00cb      	lsls	r3, r1, #3
 8007334:	4651      	mov	r1, sl
 8007336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733a:	4651      	mov	r1, sl
 800733c:	00ca      	lsls	r2, r1, #3
 800733e:	4610      	mov	r0, r2
 8007340:	4619      	mov	r1, r3
 8007342:	4603      	mov	r3, r0
 8007344:	4642      	mov	r2, r8
 8007346:	189b      	adds	r3, r3, r2
 8007348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800734c:	464b      	mov	r3, r9
 800734e:	460a      	mov	r2, r1
 8007350:	eb42 0303 	adc.w	r3, r2, r3
 8007354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	67bb      	str	r3, [r7, #120]	; 0x78
 8007362:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007370:	4649      	mov	r1, r9
 8007372:	008b      	lsls	r3, r1, #2
 8007374:	4641      	mov	r1, r8
 8007376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737a:	4641      	mov	r1, r8
 800737c:	008a      	lsls	r2, r1, #2
 800737e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007382:	f7f9 fc11 	bl	8000ba8 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4611      	mov	r1, r2
 800738c:	4b38      	ldr	r3, [pc, #224]	; (8007470 <UART_SetConfig+0x4e4>)
 800738e:	fba3 2301 	umull	r2, r3, r3, r1
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2264      	movs	r2, #100	; 0x64
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	1acb      	subs	r3, r1, r3
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	3332      	adds	r3, #50	; 0x32
 80073a0:	4a33      	ldr	r2, [pc, #204]	; (8007470 <UART_SetConfig+0x4e4>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ac:	441c      	add	r4, r3
 80073ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073b2:	2200      	movs	r2, #0
 80073b4:	673b      	str	r3, [r7, #112]	; 0x70
 80073b6:	677a      	str	r2, [r7, #116]	; 0x74
 80073b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	1891      	adds	r1, r2, r2
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	415b      	adcs	r3, r3
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073cc:	4641      	mov	r1, r8
 80073ce:	1851      	adds	r1, r2, r1
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	4649      	mov	r1, r9
 80073d4:	414b      	adcs	r3, r1
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073e4:	4659      	mov	r1, fp
 80073e6:	00cb      	lsls	r3, r1, #3
 80073e8:	4651      	mov	r1, sl
 80073ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ee:	4651      	mov	r1, sl
 80073f0:	00ca      	lsls	r2, r1, #3
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	4642      	mov	r2, r8
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80073fe:	464b      	mov	r3, r9
 8007400:	460a      	mov	r2, r1
 8007402:	eb42 0303 	adc.w	r3, r2, r3
 8007406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
 8007412:	667a      	str	r2, [r7, #100]	; 0x64
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007420:	4649      	mov	r1, r9
 8007422:	008b      	lsls	r3, r1, #2
 8007424:	4641      	mov	r1, r8
 8007426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800742a:	4641      	mov	r1, r8
 800742c:	008a      	lsls	r2, r1, #2
 800742e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007432:	f7f9 fbb9 	bl	8000ba8 <__aeabi_uldivmod>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <UART_SetConfig+0x4e4>)
 800743c:	fba3 1302 	umull	r1, r3, r3, r2
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	2164      	movs	r1, #100	; 0x64
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	3332      	adds	r3, #50	; 0x32
 800744e:	4a08      	ldr	r2, [pc, #32]	; (8007470 <UART_SetConfig+0x4e4>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4422      	add	r2, r4
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800746a:	46bd      	mov	sp, r7
 800746c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007470:	51eb851f 	.word	0x51eb851f

08007474 <LL_GPIO_SetPinMode>:
{
 8007474:	b480      	push	{r7}
 8007476:	b08b      	sub	sp, #44	; 0x2c
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	fa93 f3a3 	rbit	r3, r3
 800748e:	613b      	str	r3, [r7, #16]
  return result;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800749a:	2320      	movs	r3, #32
 800749c:	e003      	b.n	80074a6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2103      	movs	r1, #3
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	401a      	ands	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	fa93 f3a3 	rbit	r3, r3
 80074bc:	61fb      	str	r3, [r7, #28]
  return result;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80074c8:	2320      	movs	r3, #32
 80074ca:	e003      	b.n	80074d4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	fab3 f383 	clz	r3, r3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	fa01 f303 	lsl.w	r3, r1, r3
 80074dc:	431a      	orrs	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	372c      	adds	r7, #44	; 0x2c
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <LL_GPIO_SetPinOutputType>:
{
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <LL_GPIO_SetPinSpeed>:
{
 800751e:	b480      	push	{r7}
 8007520:	b08b      	sub	sp, #44	; 0x2c
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	fa93 f3a3 	rbit	r3, r3
 8007538:	613b      	str	r3, [r7, #16]
  return result;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007544:	2320      	movs	r3, #32
 8007546:	e003      	b.n	8007550 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	fab3 f383 	clz	r3, r3
 800754e:	b2db      	uxtb	r3, r3
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	2103      	movs	r1, #3
 8007554:	fa01 f303 	lsl.w	r3, r1, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	401a      	ands	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	61fb      	str	r3, [r7, #28]
  return result;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007572:	2320      	movs	r3, #32
 8007574:	e003      	b.n	800757e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	fab3 f383 	clz	r3, r3
 800757c:	b2db      	uxtb	r3, r3
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	431a      	orrs	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	372c      	adds	r7, #44	; 0x2c
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <LL_GPIO_SetPinPull>:
{
 8007598:	b480      	push	{r7}
 800759a:	b08b      	sub	sp, #44	; 0x2c
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	fa93 f3a3 	rbit	r3, r3
 80075b2:	613b      	str	r3, [r7, #16]
  return result;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80075be:	2320      	movs	r3, #32
 80075c0:	e003      	b.n	80075ca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	fab3 f383 	clz	r3, r3
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	2103      	movs	r1, #3
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	43db      	mvns	r3, r3
 80075d4:	401a      	ands	r2, r3
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	fa93 f3a3 	rbit	r3, r3
 80075e0:	61fb      	str	r3, [r7, #28]
  return result;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80075ec:	2320      	movs	r3, #32
 80075ee:	e003      	b.n	80075f8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	60da      	str	r2, [r3, #12]
}
 8007606:	bf00      	nop
 8007608:	372c      	adds	r7, #44	; 0x2c
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_GPIO_SetAFPin_0_7>:
{
 8007612:	b480      	push	{r7}
 8007614:	b08b      	sub	sp, #44	; 0x2c
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1a      	ldr	r2, [r3, #32]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	fa93 f3a3 	rbit	r3, r3
 800762c:	613b      	str	r3, [r7, #16]
  return result;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007638:	2320      	movs	r3, #32
 800763a:	e003      	b.n	8007644 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	fab3 f383 	clz	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	210f      	movs	r1, #15
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	43db      	mvns	r3, r3
 800764e:	401a      	ands	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	fa93 f3a3 	rbit	r3, r3
 800765a:	61fb      	str	r3, [r7, #28]
  return result;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007666:	2320      	movs	r3, #32
 8007668:	e003      	b.n	8007672 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	fab3 f383 	clz	r3, r3
 8007670:	b2db      	uxtb	r3, r3
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	431a      	orrs	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	621a      	str	r2, [r3, #32]
}
 8007680:	bf00      	nop
 8007682:	372c      	adds	r7, #44	; 0x2c
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <LL_GPIO_SetAFPin_8_15>:
{
 800768c:	b480      	push	{r7}
 800768e:	b08b      	sub	sp, #44	; 0x2c
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	fa93 f3a3 	rbit	r3, r3
 80076a8:	613b      	str	r3, [r7, #16]
  return result;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80076b4:	2320      	movs	r3, #32
 80076b6:	e003      	b.n	80076c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	fab3 f383 	clz	r3, r3
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	210f      	movs	r1, #15
 80076c4:	fa01 f303 	lsl.w	r3, r1, r3
 80076c8:	43db      	mvns	r3, r3
 80076ca:	401a      	ands	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	0a1b      	lsrs	r3, r3, #8
 80076d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	fa93 f3a3 	rbit	r3, r3
 80076d8:	61fb      	str	r3, [r7, #28]
  return result;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80076e4:	2320      	movs	r3, #32
 80076e6:	e003      	b.n	80076f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	fab3 f383 	clz	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	fa01 f303 	lsl.w	r3, r1, r3
 80076f8:	431a      	orrs	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80076fe:	bf00      	nop
 8007700:	372c      	adds	r7, #44	; 0x2c
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b08a      	sub	sp, #40	; 0x28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8007718:	2300      	movs	r3, #0
 800771a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	fa93 f3a3 	rbit	r3, r3
 8007728:	617b      	str	r3, [r7, #20]
  return result;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <LL_GPIO_Init+0x2e>
    return 32U;
 8007734:	2320      	movs	r3, #32
 8007736:	e003      	b.n	8007740 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	fab3 f383 	clz	r3, r3
 800773e:	b2db      	uxtb	r3, r3
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007742:	e057      	b.n	80077f4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	2101      	movs	r1, #1
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	fa01 f303 	lsl.w	r3, r1, r3
 8007750:	4013      	ands	r3, r2
 8007752:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d049      	beq.n	80077ee <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d003      	beq.n	800776a <LL_GPIO_Init+0x60>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d10d      	bne.n	8007786 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	461a      	mov	r2, r3
 8007770:	6a39      	ldr	r1, [r7, #32]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fed3 	bl	800751e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	461a      	mov	r2, r3
 800777e:	6a39      	ldr	r1, [r7, #32]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff feb4 	bl	80074ee <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	461a      	mov	r2, r3
 800778c:	6a39      	ldr	r1, [r7, #32]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff ff02 	bl	8007598 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d121      	bne.n	80077e0 <LL_GPIO_Init+0xd6>
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	fa93 f3a3 	rbit	r3, r3
 80077a6:	60bb      	str	r3, [r7, #8]
  return result;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <LL_GPIO_Init+0xac>
    return 32U;
 80077b2:	2320      	movs	r3, #32
 80077b4:	e003      	b.n	80077be <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	fab3 f383 	clz	r3, r3
 80077bc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80077be:	2b07      	cmp	r3, #7
 80077c0:	d807      	bhi.n	80077d2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6a39      	ldr	r1, [r7, #32]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff ff21 	bl	8007612 <LL_GPIO_SetAFPin_0_7>
 80077d0:	e006      	b.n	80077e0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6a39      	ldr	r1, [r7, #32]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff ff56 	bl	800768c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6a39      	ldr	r1, [r7, #32]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fe43 	bl	8007474 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	3301      	adds	r3, #1
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1a0      	bne.n	8007744 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3728      	adds	r7, #40	; 0x28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <LL_SPI_IsEnabled>:
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d101      	bne.n	8007824 <LL_SPI_IsEnabled+0x18>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <LL_SPI_IsEnabled+0x1a>
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <LL_SPI_SetCRCPolynomial>:
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	611a      	str	r2, [r3, #16]
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ffd3 	bl	800780c <LL_SPI_IsEnabled>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d139      	bne.n	80078e0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007874:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	6811      	ldr	r1, [r2, #0]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	6852      	ldr	r2, [r2, #4]
 8007880:	4311      	orrs	r1, r2
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	6892      	ldr	r2, [r2, #8]
 8007886:	4311      	orrs	r1, r2
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	68d2      	ldr	r2, [r2, #12]
 800788c:	4311      	orrs	r1, r2
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	6912      	ldr	r2, [r2, #16]
 8007892:	4311      	orrs	r1, r2
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	6952      	ldr	r2, [r2, #20]
 8007898:	4311      	orrs	r1, r2
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	6992      	ldr	r2, [r2, #24]
 800789e:	4311      	orrs	r1, r2
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	69d2      	ldr	r2, [r2, #28]
 80078a4:	4311      	orrs	r1, r2
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	6a12      	ldr	r2, [r2, #32]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f023 0204 	bic.w	r2, r3, #4
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d105      	bne.n	80078dc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff ffab 	bl	8007832 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	61da      	str	r2, [r3, #28]
  return status;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <__cvt>:
 80078f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fa:	ec55 4b10 	vmov	r4, r5, d0
 80078fe:	2d00      	cmp	r5, #0
 8007900:	460e      	mov	r6, r1
 8007902:	4619      	mov	r1, r3
 8007904:	462b      	mov	r3, r5
 8007906:	bfbb      	ittet	lt
 8007908:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800790c:	461d      	movlt	r5, r3
 800790e:	2300      	movge	r3, #0
 8007910:	232d      	movlt	r3, #45	; 0x2d
 8007912:	700b      	strb	r3, [r1, #0]
 8007914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007916:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800791a:	4691      	mov	r9, r2
 800791c:	f023 0820 	bic.w	r8, r3, #32
 8007920:	bfbc      	itt	lt
 8007922:	4622      	movlt	r2, r4
 8007924:	4614      	movlt	r4, r2
 8007926:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800792a:	d005      	beq.n	8007938 <__cvt+0x42>
 800792c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007930:	d100      	bne.n	8007934 <__cvt+0x3e>
 8007932:	3601      	adds	r6, #1
 8007934:	2102      	movs	r1, #2
 8007936:	e000      	b.n	800793a <__cvt+0x44>
 8007938:	2103      	movs	r1, #3
 800793a:	ab03      	add	r3, sp, #12
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	ab02      	add	r3, sp, #8
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	ec45 4b10 	vmov	d0, r4, r5
 8007946:	4653      	mov	r3, sl
 8007948:	4632      	mov	r2, r6
 800794a:	f000 ff4d 	bl	80087e8 <_dtoa_r>
 800794e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007952:	4607      	mov	r7, r0
 8007954:	d102      	bne.n	800795c <__cvt+0x66>
 8007956:	f019 0f01 	tst.w	r9, #1
 800795a:	d022      	beq.n	80079a2 <__cvt+0xac>
 800795c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007960:	eb07 0906 	add.w	r9, r7, r6
 8007964:	d110      	bne.n	8007988 <__cvt+0x92>
 8007966:	783b      	ldrb	r3, [r7, #0]
 8007968:	2b30      	cmp	r3, #48	; 0x30
 800796a:	d10a      	bne.n	8007982 <__cvt+0x8c>
 800796c:	2200      	movs	r2, #0
 800796e:	2300      	movs	r3, #0
 8007970:	4620      	mov	r0, r4
 8007972:	4629      	mov	r1, r5
 8007974:	f7f9 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007978:	b918      	cbnz	r0, 8007982 <__cvt+0x8c>
 800797a:	f1c6 0601 	rsb	r6, r6, #1
 800797e:	f8ca 6000 	str.w	r6, [sl]
 8007982:	f8da 3000 	ldr.w	r3, [sl]
 8007986:	4499      	add	r9, r3
 8007988:	2200      	movs	r2, #0
 800798a:	2300      	movs	r3, #0
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	f7f9 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007994:	b108      	cbz	r0, 800799a <__cvt+0xa4>
 8007996:	f8cd 900c 	str.w	r9, [sp, #12]
 800799a:	2230      	movs	r2, #48	; 0x30
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	454b      	cmp	r3, r9
 80079a0:	d307      	bcc.n	80079b2 <__cvt+0xbc>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079a6:	1bdb      	subs	r3, r3, r7
 80079a8:	4638      	mov	r0, r7
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	b004      	add	sp, #16
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	1c59      	adds	r1, r3, #1
 80079b4:	9103      	str	r1, [sp, #12]
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e7f0      	b.n	800799c <__cvt+0xa6>

080079ba <__exponent>:
 80079ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079bc:	4603      	mov	r3, r0
 80079be:	2900      	cmp	r1, #0
 80079c0:	bfb8      	it	lt
 80079c2:	4249      	neglt	r1, r1
 80079c4:	f803 2b02 	strb.w	r2, [r3], #2
 80079c8:	bfb4      	ite	lt
 80079ca:	222d      	movlt	r2, #45	; 0x2d
 80079cc:	222b      	movge	r2, #43	; 0x2b
 80079ce:	2909      	cmp	r1, #9
 80079d0:	7042      	strb	r2, [r0, #1]
 80079d2:	dd2a      	ble.n	8007a2a <__exponent+0x70>
 80079d4:	f10d 0207 	add.w	r2, sp, #7
 80079d8:	4617      	mov	r7, r2
 80079da:	260a      	movs	r6, #10
 80079dc:	4694      	mov	ip, r2
 80079de:	fb91 f5f6 	sdiv	r5, r1, r6
 80079e2:	fb06 1415 	mls	r4, r6, r5, r1
 80079e6:	3430      	adds	r4, #48	; 0x30
 80079e8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80079ec:	460c      	mov	r4, r1
 80079ee:	2c63      	cmp	r4, #99	; 0x63
 80079f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80079f4:	4629      	mov	r1, r5
 80079f6:	dcf1      	bgt.n	80079dc <__exponent+0x22>
 80079f8:	3130      	adds	r1, #48	; 0x30
 80079fa:	f1ac 0402 	sub.w	r4, ip, #2
 80079fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a02:	1c41      	adds	r1, r0, #1
 8007a04:	4622      	mov	r2, r4
 8007a06:	42ba      	cmp	r2, r7
 8007a08:	d30a      	bcc.n	8007a20 <__exponent+0x66>
 8007a0a:	f10d 0209 	add.w	r2, sp, #9
 8007a0e:	eba2 020c 	sub.w	r2, r2, ip
 8007a12:	42bc      	cmp	r4, r7
 8007a14:	bf88      	it	hi
 8007a16:	2200      	movhi	r2, #0
 8007a18:	4413      	add	r3, r2
 8007a1a:	1a18      	subs	r0, r3, r0
 8007a1c:	b003      	add	sp, #12
 8007a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a24:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007a28:	e7ed      	b.n	8007a06 <__exponent+0x4c>
 8007a2a:	2330      	movs	r3, #48	; 0x30
 8007a2c:	3130      	adds	r1, #48	; 0x30
 8007a2e:	7083      	strb	r3, [r0, #2]
 8007a30:	70c1      	strb	r1, [r0, #3]
 8007a32:	1d03      	adds	r3, r0, #4
 8007a34:	e7f1      	b.n	8007a1a <__exponent+0x60>
	...

08007a38 <_printf_float>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b02 	vpush	{d8}
 8007a40:	b08d      	sub	sp, #52	; 0x34
 8007a42:	460c      	mov	r4, r1
 8007a44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a48:	4616      	mov	r6, r2
 8007a4a:	461f      	mov	r7, r3
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	f000 fdc9 	bl	80085e4 <_localeconv_r>
 8007a52:	f8d0 a000 	ldr.w	sl, [r0]
 8007a56:	4650      	mov	r0, sl
 8007a58:	f7f8 fc0a 	bl	8000270 <strlen>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	f8d8 3000 	ldr.w	r3, [r8]
 8007a68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a6c:	3307      	adds	r3, #7
 8007a6e:	f023 0307 	bic.w	r3, r3, #7
 8007a72:	f103 0208 	add.w	r2, r3, #8
 8007a76:	f8c8 2000 	str.w	r2, [r8]
 8007a7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a88:	ee08 0a10 	vmov	s16, r0
 8007a8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <_printf_float+0x2d8>)
 8007a96:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9a:	f7f9 f847 	bl	8000b2c <__aeabi_dcmpun>
 8007a9e:	bb88      	cbnz	r0, 8007b04 <_printf_float+0xcc>
 8007aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa4:	4b9a      	ldr	r3, [pc, #616]	; (8007d10 <_printf_float+0x2d8>)
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	f7f9 f821 	bl	8000af0 <__aeabi_dcmple>
 8007aae:	bb48      	cbnz	r0, 8007b04 <_printf_float+0xcc>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	f7f9 f810 	bl	8000adc <__aeabi_dcmplt>
 8007abc:	b110      	cbz	r0, 8007ac4 <_printf_float+0x8c>
 8007abe:	232d      	movs	r3, #45	; 0x2d
 8007ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac4:	4a93      	ldr	r2, [pc, #588]	; (8007d14 <_printf_float+0x2dc>)
 8007ac6:	4b94      	ldr	r3, [pc, #592]	; (8007d18 <_printf_float+0x2e0>)
 8007ac8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007acc:	bf94      	ite	ls
 8007ace:	4690      	movls	r8, r2
 8007ad0:	4698      	movhi	r8, r3
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	f023 0304 	bic.w	r3, r3, #4
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	f04f 0900 	mov.w	r9, #0
 8007ae2:	9700      	str	r7, [sp, #0]
 8007ae4:	4633      	mov	r3, r6
 8007ae6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 f9da 	bl	8007ea4 <_printf_common>
 8007af0:	3001      	adds	r0, #1
 8007af2:	f040 8090 	bne.w	8007c16 <_printf_float+0x1de>
 8007af6:	f04f 30ff 	mov.w	r0, #4294967295
 8007afa:	b00d      	add	sp, #52	; 0x34
 8007afc:	ecbd 8b02 	vpop	{d8}
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	4642      	mov	r2, r8
 8007b06:	464b      	mov	r3, r9
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	f7f9 f80e 	bl	8000b2c <__aeabi_dcmpun>
 8007b10:	b140      	cbz	r0, 8007b24 <_printf_float+0xec>
 8007b12:	464b      	mov	r3, r9
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfbc      	itt	lt
 8007b18:	232d      	movlt	r3, #45	; 0x2d
 8007b1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b1e:	4a7f      	ldr	r2, [pc, #508]	; (8007d1c <_printf_float+0x2e4>)
 8007b20:	4b7f      	ldr	r3, [pc, #508]	; (8007d20 <_printf_float+0x2e8>)
 8007b22:	e7d1      	b.n	8007ac8 <_printf_float+0x90>
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b2a:	9206      	str	r2, [sp, #24]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	d13f      	bne.n	8007bb0 <_printf_float+0x178>
 8007b30:	2306      	movs	r3, #6
 8007b32:	6063      	str	r3, [r4, #4]
 8007b34:	9b05      	ldr	r3, [sp, #20]
 8007b36:	6861      	ldr	r1, [r4, #4]
 8007b38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	ab0a      	add	r3, sp, #40	; 0x28
 8007b42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b46:	ab09      	add	r3, sp, #36	; 0x24
 8007b48:	ec49 8b10 	vmov	d0, r8, r9
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7ff fece 	bl	80078f6 <__cvt>
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b5e:	2b47      	cmp	r3, #71	; 0x47
 8007b60:	4680      	mov	r8, r0
 8007b62:	d108      	bne.n	8007b76 <_printf_float+0x13e>
 8007b64:	1cc8      	adds	r0, r1, #3
 8007b66:	db02      	blt.n	8007b6e <_printf_float+0x136>
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	dd41      	ble.n	8007bf2 <_printf_float+0x1ba>
 8007b6e:	f1ab 0302 	sub.w	r3, fp, #2
 8007b72:	fa5f fb83 	uxtb.w	fp, r3
 8007b76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b7a:	d820      	bhi.n	8007bbe <_printf_float+0x186>
 8007b7c:	3901      	subs	r1, #1
 8007b7e:	465a      	mov	r2, fp
 8007b80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b84:	9109      	str	r1, [sp, #36]	; 0x24
 8007b86:	f7ff ff18 	bl	80079ba <__exponent>
 8007b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8c:	1813      	adds	r3, r2, r0
 8007b8e:	2a01      	cmp	r2, #1
 8007b90:	4681      	mov	r9, r0
 8007b92:	6123      	str	r3, [r4, #16]
 8007b94:	dc02      	bgt.n	8007b9c <_printf_float+0x164>
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	07d2      	lsls	r2, r2, #31
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_float+0x168>
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d09c      	beq.n	8007ae2 <_printf_float+0xaa>
 8007ba8:	232d      	movs	r3, #45	; 0x2d
 8007baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bae:	e798      	b.n	8007ae2 <_printf_float+0xaa>
 8007bb0:	9a06      	ldr	r2, [sp, #24]
 8007bb2:	2a47      	cmp	r2, #71	; 0x47
 8007bb4:	d1be      	bne.n	8007b34 <_printf_float+0xfc>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1bc      	bne.n	8007b34 <_printf_float+0xfc>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7b9      	b.n	8007b32 <_printf_float+0xfa>
 8007bbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bc2:	d118      	bne.n	8007bf6 <_printf_float+0x1be>
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	dd0b      	ble.n	8007be2 <_printf_float+0x1aa>
 8007bca:	6121      	str	r1, [r4, #16]
 8007bcc:	b913      	cbnz	r3, 8007bd4 <_printf_float+0x19c>
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	07d0      	lsls	r0, r2, #31
 8007bd2:	d502      	bpl.n	8007bda <_printf_float+0x1a2>
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	440b      	add	r3, r1
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bdc:	f04f 0900 	mov.w	r9, #0
 8007be0:	e7de      	b.n	8007ba0 <_printf_float+0x168>
 8007be2:	b913      	cbnz	r3, 8007bea <_printf_float+0x1b2>
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	07d2      	lsls	r2, r2, #31
 8007be8:	d501      	bpl.n	8007bee <_printf_float+0x1b6>
 8007bea:	3302      	adds	r3, #2
 8007bec:	e7f4      	b.n	8007bd8 <_printf_float+0x1a0>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e7f2      	b.n	8007bd8 <_printf_float+0x1a0>
 8007bf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	db05      	blt.n	8007c08 <_printf_float+0x1d0>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	6121      	str	r1, [r4, #16]
 8007c00:	07d8      	lsls	r0, r3, #31
 8007c02:	d5ea      	bpl.n	8007bda <_printf_float+0x1a2>
 8007c04:	1c4b      	adds	r3, r1, #1
 8007c06:	e7e7      	b.n	8007bd8 <_printf_float+0x1a0>
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	bfd4      	ite	le
 8007c0c:	f1c1 0202 	rsble	r2, r1, #2
 8007c10:	2201      	movgt	r2, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	e7e0      	b.n	8007bd8 <_printf_float+0x1a0>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	055a      	lsls	r2, r3, #21
 8007c1a:	d407      	bmi.n	8007c2c <_printf_float+0x1f4>
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	4642      	mov	r2, r8
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	d12c      	bne.n	8007c84 <_printf_float+0x24c>
 8007c2a:	e764      	b.n	8007af6 <_printf_float+0xbe>
 8007c2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c30:	f240 80e0 	bls.w	8007df4 <_printf_float+0x3bc>
 8007c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f7f8 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d034      	beq.n	8007cae <_printf_float+0x276>
 8007c44:	4a37      	ldr	r2, [pc, #220]	; (8007d24 <_printf_float+0x2ec>)
 8007c46:	2301      	movs	r3, #1
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af51 	beq.w	8007af6 <_printf_float+0xbe>
 8007c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	db02      	blt.n	8007c62 <_printf_float+0x22a>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	07d8      	lsls	r0, r3, #31
 8007c60:	d510      	bpl.n	8007c84 <_printf_float+0x24c>
 8007c62:	ee18 3a10 	vmov	r3, s16
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af41 	beq.w	8007af6 <_printf_float+0xbe>
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	f104 091a 	add.w	r9, r4, #26
 8007c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4543      	cmp	r3, r8
 8007c82:	dc09      	bgt.n	8007c98 <_printf_float+0x260>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	f100 8107 	bmi.w	8007e9a <_printf_float+0x462>
 8007c8c:	68e0      	ldr	r0, [r4, #12]
 8007c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c90:	4298      	cmp	r0, r3
 8007c92:	bfb8      	it	lt
 8007c94:	4618      	movlt	r0, r3
 8007c96:	e730      	b.n	8007afa <_printf_float+0xc2>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	464a      	mov	r2, r9
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	f43f af27 	beq.w	8007af6 <_printf_float+0xbe>
 8007ca8:	f108 0801 	add.w	r8, r8, #1
 8007cac:	e7e6      	b.n	8007c7c <_printf_float+0x244>
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dc39      	bgt.n	8007d28 <_printf_float+0x2f0>
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <_printf_float+0x2ec>)
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af19 	beq.w	8007af6 <_printf_float+0xbe>
 8007cc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d102      	bne.n	8007cd2 <_printf_float+0x29a>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d5d8      	bpl.n	8007c84 <_printf_float+0x24c>
 8007cd2:	ee18 3a10 	vmov	r3, s16
 8007cd6:	4652      	mov	r2, sl
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af09 	beq.w	8007af6 <_printf_float+0xbe>
 8007ce4:	f04f 0900 	mov.w	r9, #0
 8007ce8:	f104 0a1a 	add.w	sl, r4, #26
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	425b      	negs	r3, r3
 8007cf0:	454b      	cmp	r3, r9
 8007cf2:	dc01      	bgt.n	8007cf8 <_printf_float+0x2c0>
 8007cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf6:	e792      	b.n	8007c1e <_printf_float+0x1e6>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f aef7 	beq.w	8007af6 <_printf_float+0xbe>
 8007d08:	f109 0901 	add.w	r9, r9, #1
 8007d0c:	e7ee      	b.n	8007cec <_printf_float+0x2b4>
 8007d0e:	bf00      	nop
 8007d10:	7fefffff 	.word	0x7fefffff
 8007d14:	0800a578 	.word	0x0800a578
 8007d18:	0800a57c 	.word	0x0800a57c
 8007d1c:	0800a580 	.word	0x0800a580
 8007d20:	0800a584 	.word	0x0800a584
 8007d24:	0800a588 	.word	0x0800a588
 8007d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	bfa8      	it	ge
 8007d30:	461a      	movge	r2, r3
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	4691      	mov	r9, r2
 8007d36:	dc37      	bgt.n	8007da8 <_printf_float+0x370>
 8007d38:	f04f 0b00 	mov.w	fp, #0
 8007d3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d40:	f104 021a 	add.w	r2, r4, #26
 8007d44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	eba3 0309 	sub.w	r3, r3, r9
 8007d4c:	455b      	cmp	r3, fp
 8007d4e:	dc33      	bgt.n	8007db8 <_printf_float+0x380>
 8007d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d54:	429a      	cmp	r2, r3
 8007d56:	db3b      	blt.n	8007dd0 <_printf_float+0x398>
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	07da      	lsls	r2, r3, #31
 8007d5c:	d438      	bmi.n	8007dd0 <_printf_float+0x398>
 8007d5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d62:	eba2 0903 	sub.w	r9, r2, r3
 8007d66:	9b05      	ldr	r3, [sp, #20]
 8007d68:	1ad2      	subs	r2, r2, r3
 8007d6a:	4591      	cmp	r9, r2
 8007d6c:	bfa8      	it	ge
 8007d6e:	4691      	movge	r9, r2
 8007d70:	f1b9 0f00 	cmp.w	r9, #0
 8007d74:	dc35      	bgt.n	8007de2 <_printf_float+0x3aa>
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d7e:	f104 0a1a 	add.w	sl, r4, #26
 8007d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	eba3 0309 	sub.w	r3, r3, r9
 8007d8c:	4543      	cmp	r3, r8
 8007d8e:	f77f af79 	ble.w	8007c84 <_printf_float+0x24c>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4652      	mov	r2, sl
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f43f aeaa 	beq.w	8007af6 <_printf_float+0xbe>
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	e7ec      	b.n	8007d82 <_printf_float+0x34a>
 8007da8:	4613      	mov	r3, r2
 8007daa:	4631      	mov	r1, r6
 8007dac:	4642      	mov	r2, r8
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	d1c0      	bne.n	8007d38 <_printf_float+0x300>
 8007db6:	e69e      	b.n	8007af6 <_printf_float+0xbe>
 8007db8:	2301      	movs	r3, #1
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	9205      	str	r2, [sp, #20]
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f ae97 	beq.w	8007af6 <_printf_float+0xbe>
 8007dc8:	9a05      	ldr	r2, [sp, #20]
 8007dca:	f10b 0b01 	add.w	fp, fp, #1
 8007dce:	e7b9      	b.n	8007d44 <_printf_float+0x30c>
 8007dd0:	ee18 3a10 	vmov	r3, s16
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d1be      	bne.n	8007d5e <_printf_float+0x326>
 8007de0:	e689      	b.n	8007af6 <_printf_float+0xbe>
 8007de2:	9a05      	ldr	r2, [sp, #20]
 8007de4:	464b      	mov	r3, r9
 8007de6:	4442      	add	r2, r8
 8007de8:	4631      	mov	r1, r6
 8007dea:	4628      	mov	r0, r5
 8007dec:	47b8      	blx	r7
 8007dee:	3001      	adds	r0, #1
 8007df0:	d1c1      	bne.n	8007d76 <_printf_float+0x33e>
 8007df2:	e680      	b.n	8007af6 <_printf_float+0xbe>
 8007df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df6:	2a01      	cmp	r2, #1
 8007df8:	dc01      	bgt.n	8007dfe <_printf_float+0x3c6>
 8007dfa:	07db      	lsls	r3, r3, #31
 8007dfc:	d53a      	bpl.n	8007e74 <_printf_float+0x43c>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4642      	mov	r2, r8
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f43f ae74 	beq.w	8007af6 <_printf_float+0xbe>
 8007e0e:	ee18 3a10 	vmov	r3, s16
 8007e12:	4652      	mov	r2, sl
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f ae6b 	beq.w	8007af6 <_printf_float+0xbe>
 8007e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e24:	2200      	movs	r2, #0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007e2c:	f7f8 fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e30:	b9d8      	cbnz	r0, 8007e6a <_printf_float+0x432>
 8007e32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e36:	f108 0201 	add.w	r2, r8, #1
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	d10e      	bne.n	8007e62 <_printf_float+0x42a>
 8007e44:	e657      	b.n	8007af6 <_printf_float+0xbe>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	f43f ae50 	beq.w	8007af6 <_printf_float+0xbe>
 8007e56:	f108 0801 	add.w	r8, r8, #1
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	dcf1      	bgt.n	8007e46 <_printf_float+0x40e>
 8007e62:	464b      	mov	r3, r9
 8007e64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e68:	e6da      	b.n	8007c20 <_printf_float+0x1e8>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0a1a 	add.w	sl, r4, #26
 8007e72:	e7f2      	b.n	8007e5a <_printf_float+0x422>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4642      	mov	r2, r8
 8007e78:	e7df      	b.n	8007e3a <_printf_float+0x402>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	464a      	mov	r2, r9
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae36 	beq.w	8007af6 <_printf_float+0xbe>
 8007e8a:	f108 0801 	add.w	r8, r8, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	4543      	cmp	r3, r8
 8007e96:	dcf0      	bgt.n	8007e7a <_printf_float+0x442>
 8007e98:	e6f8      	b.n	8007c8c <_printf_float+0x254>
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	f104 0919 	add.w	r9, r4, #25
 8007ea2:	e7f4      	b.n	8007e8e <_printf_float+0x456>

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4699      	mov	r9, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bfb8      	it	lt
 8007eb8:	4613      	movlt	r3, r2
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc26      	bgt.n	8007f3a <_printf_common+0x96>
 8007eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ef0:	1e13      	subs	r3, r2, #0
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42b      	bmi.n	8007f54 <_printf_common+0xb0>
 8007efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f00:	4649      	mov	r1, r9
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d01e      	beq.n	8007f48 <_printf_common+0xa4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	6922      	ldr	r2, [r4, #16]
 8007f0e:	f003 0306 	and.w	r3, r3, #6
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	bf02      	ittt	eq
 8007f16:	68e5      	ldreq	r5, [r4, #12]
 8007f18:	6833      	ldreq	r3, [r6, #0]
 8007f1a:	1aed      	subeq	r5, r5, r3
 8007f1c:	68a3      	ldr	r3, [r4, #8]
 8007f1e:	bf0c      	ite	eq
 8007f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f24:	2500      	movne	r5, #0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bfc4      	itt	gt
 8007f2a:	1a9b      	subgt	r3, r3, r2
 8007f2c:	18ed      	addgt	r5, r5, r3
 8007f2e:	2600      	movs	r6, #0
 8007f30:	341a      	adds	r4, #26
 8007f32:	42b5      	cmp	r5, r6
 8007f34:	d11a      	bne.n	8007f6c <_printf_common+0xc8>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e008      	b.n	8007f4c <_printf_common+0xa8>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4638      	mov	r0, r7
 8007f42:	47c0      	blx	r8
 8007f44:	3001      	adds	r0, #1
 8007f46:	d103      	bne.n	8007f50 <_printf_common+0xac>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7c6      	b.n	8007ee2 <_printf_common+0x3e>
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	2030      	movs	r0, #48	; 0x30
 8007f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5e:	4422      	add	r2, r4
 8007f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f68:	3302      	adds	r3, #2
 8007f6a:	e7c7      	b.n	8007efc <_printf_common+0x58>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4649      	mov	r1, r9
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0e6      	beq.n	8007f48 <_printf_common+0xa4>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7d9      	b.n	8007f32 <_printf_common+0x8e>
	...

08007f80 <_printf_i>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	7e0f      	ldrb	r7, [r1, #24]
 8007f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f88:	2f78      	cmp	r7, #120	; 0x78
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f96:	d807      	bhi.n	8007fa8 <_printf_i+0x28>
 8007f98:	2f62      	cmp	r7, #98	; 0x62
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x32>
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	f000 80d4 	beq.w	800814a <_printf_i+0x1ca>
 8007fa2:	2f58      	cmp	r7, #88	; 0x58
 8007fa4:	f000 80c0 	beq.w	8008128 <_printf_i+0x1a8>
 8007fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fb0:	e03a      	b.n	8008028 <_printf_i+0xa8>
 8007fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb6:	2b15      	cmp	r3, #21
 8007fb8:	d8f6      	bhi.n	8007fa8 <_printf_i+0x28>
 8007fba:	a101      	add	r1, pc, #4	; (adr r1, 8007fc0 <_printf_i+0x40>)
 8007fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	08007fa9 	.word	0x08007fa9
 8007fcc:	08007fa9 	.word	0x08007fa9
 8007fd0:	08007fa9 	.word	0x08007fa9
 8007fd4:	08007fa9 	.word	0x08007fa9
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007fa9 	.word	0x08007fa9
 8007fe0:	08007fa9 	.word	0x08007fa9
 8007fe4:	08007fa9 	.word	0x08007fa9
 8007fe8:	08007fa9 	.word	0x08007fa9
 8007fec:	08008131 	.word	0x08008131
 8007ff0:	08008059 	.word	0x08008059
 8007ff4:	080080eb 	.word	0x080080eb
 8007ff8:	08007fa9 	.word	0x08007fa9
 8007ffc:	08007fa9 	.word	0x08007fa9
 8008000:	08008153 	.word	0x08008153
 8008004:	08007fa9 	.word	0x08007fa9
 8008008:	08008059 	.word	0x08008059
 800800c:	08007fa9 	.word	0x08007fa9
 8008010:	08007fa9 	.word	0x08007fa9
 8008014:	080080f3 	.word	0x080080f3
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	602a      	str	r2, [r5, #0]
 8008020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008028:	2301      	movs	r3, #1
 800802a:	e09f      	b.n	800816c <_printf_i+0x1ec>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	682b      	ldr	r3, [r5, #0]
 8008030:	0607      	lsls	r7, r0, #24
 8008032:	f103 0104 	add.w	r1, r3, #4
 8008036:	6029      	str	r1, [r5, #0]
 8008038:	d501      	bpl.n	800803e <_printf_i+0xbe>
 800803a:	681e      	ldr	r6, [r3, #0]
 800803c:	e003      	b.n	8008046 <_printf_i+0xc6>
 800803e:	0646      	lsls	r6, r0, #25
 8008040:	d5fb      	bpl.n	800803a <_printf_i+0xba>
 8008042:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008046:	2e00      	cmp	r6, #0
 8008048:	da03      	bge.n	8008052 <_printf_i+0xd2>
 800804a:	232d      	movs	r3, #45	; 0x2d
 800804c:	4276      	negs	r6, r6
 800804e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008052:	485a      	ldr	r0, [pc, #360]	; (80081bc <_printf_i+0x23c>)
 8008054:	230a      	movs	r3, #10
 8008056:	e012      	b.n	800807e <_printf_i+0xfe>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	6820      	ldr	r0, [r4, #0]
 800805c:	1d19      	adds	r1, r3, #4
 800805e:	6029      	str	r1, [r5, #0]
 8008060:	0605      	lsls	r5, r0, #24
 8008062:	d501      	bpl.n	8008068 <_printf_i+0xe8>
 8008064:	681e      	ldr	r6, [r3, #0]
 8008066:	e002      	b.n	800806e <_printf_i+0xee>
 8008068:	0641      	lsls	r1, r0, #25
 800806a:	d5fb      	bpl.n	8008064 <_printf_i+0xe4>
 800806c:	881e      	ldrh	r6, [r3, #0]
 800806e:	4853      	ldr	r0, [pc, #332]	; (80081bc <_printf_i+0x23c>)
 8008070:	2f6f      	cmp	r7, #111	; 0x6f
 8008072:	bf0c      	ite	eq
 8008074:	2308      	moveq	r3, #8
 8008076:	230a      	movne	r3, #10
 8008078:	2100      	movs	r1, #0
 800807a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800807e:	6865      	ldr	r5, [r4, #4]
 8008080:	60a5      	str	r5, [r4, #8]
 8008082:	2d00      	cmp	r5, #0
 8008084:	bfa2      	ittt	ge
 8008086:	6821      	ldrge	r1, [r4, #0]
 8008088:	f021 0104 	bicge.w	r1, r1, #4
 800808c:	6021      	strge	r1, [r4, #0]
 800808e:	b90e      	cbnz	r6, 8008094 <_printf_i+0x114>
 8008090:	2d00      	cmp	r5, #0
 8008092:	d04b      	beq.n	800812c <_printf_i+0x1ac>
 8008094:	4615      	mov	r5, r2
 8008096:	fbb6 f1f3 	udiv	r1, r6, r3
 800809a:	fb03 6711 	mls	r7, r3, r1, r6
 800809e:	5dc7      	ldrb	r7, [r0, r7]
 80080a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080a4:	4637      	mov	r7, r6
 80080a6:	42bb      	cmp	r3, r7
 80080a8:	460e      	mov	r6, r1
 80080aa:	d9f4      	bls.n	8008096 <_printf_i+0x116>
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d10b      	bne.n	80080c8 <_printf_i+0x148>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	07de      	lsls	r6, r3, #31
 80080b4:	d508      	bpl.n	80080c8 <_printf_i+0x148>
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	4299      	cmp	r1, r3
 80080bc:	bfde      	ittt	le
 80080be:	2330      	movle	r3, #48	; 0x30
 80080c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080c8:	1b52      	subs	r2, r2, r5
 80080ca:	6122      	str	r2, [r4, #16]
 80080cc:	f8cd a000 	str.w	sl, [sp]
 80080d0:	464b      	mov	r3, r9
 80080d2:	aa03      	add	r2, sp, #12
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff fee4 	bl	8007ea4 <_printf_common>
 80080dc:	3001      	adds	r0, #1
 80080de:	d14a      	bne.n	8008176 <_printf_i+0x1f6>
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b004      	add	sp, #16
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	4833      	ldr	r0, [pc, #204]	; (80081c0 <_printf_i+0x240>)
 80080f4:	2778      	movs	r7, #120	; 0x78
 80080f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6829      	ldr	r1, [r5, #0]
 80080fe:	061f      	lsls	r7, r3, #24
 8008100:	f851 6b04 	ldr.w	r6, [r1], #4
 8008104:	d402      	bmi.n	800810c <_printf_i+0x18c>
 8008106:	065f      	lsls	r7, r3, #25
 8008108:	bf48      	it	mi
 800810a:	b2b6      	uxthmi	r6, r6
 800810c:	07df      	lsls	r7, r3, #31
 800810e:	bf48      	it	mi
 8008110:	f043 0320 	orrmi.w	r3, r3, #32
 8008114:	6029      	str	r1, [r5, #0]
 8008116:	bf48      	it	mi
 8008118:	6023      	strmi	r3, [r4, #0]
 800811a:	b91e      	cbnz	r6, 8008124 <_printf_i+0x1a4>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	f023 0320 	bic.w	r3, r3, #32
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	2310      	movs	r3, #16
 8008126:	e7a7      	b.n	8008078 <_printf_i+0xf8>
 8008128:	4824      	ldr	r0, [pc, #144]	; (80081bc <_printf_i+0x23c>)
 800812a:	e7e4      	b.n	80080f6 <_printf_i+0x176>
 800812c:	4615      	mov	r5, r2
 800812e:	e7bd      	b.n	80080ac <_printf_i+0x12c>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	6826      	ldr	r6, [r4, #0]
 8008134:	6961      	ldr	r1, [r4, #20]
 8008136:	1d18      	adds	r0, r3, #4
 8008138:	6028      	str	r0, [r5, #0]
 800813a:	0635      	lsls	r5, r6, #24
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	d501      	bpl.n	8008144 <_printf_i+0x1c4>
 8008140:	6019      	str	r1, [r3, #0]
 8008142:	e002      	b.n	800814a <_printf_i+0x1ca>
 8008144:	0670      	lsls	r0, r6, #25
 8008146:	d5fb      	bpl.n	8008140 <_printf_i+0x1c0>
 8008148:	8019      	strh	r1, [r3, #0]
 800814a:	2300      	movs	r3, #0
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	4615      	mov	r5, r2
 8008150:	e7bc      	b.n	80080cc <_printf_i+0x14c>
 8008152:	682b      	ldr	r3, [r5, #0]
 8008154:	1d1a      	adds	r2, r3, #4
 8008156:	602a      	str	r2, [r5, #0]
 8008158:	681d      	ldr	r5, [r3, #0]
 800815a:	6862      	ldr	r2, [r4, #4]
 800815c:	2100      	movs	r1, #0
 800815e:	4628      	mov	r0, r5
 8008160:	f7f8 f836 	bl	80001d0 <memchr>
 8008164:	b108      	cbz	r0, 800816a <_printf_i+0x1ea>
 8008166:	1b40      	subs	r0, r0, r5
 8008168:	6060      	str	r0, [r4, #4]
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	6123      	str	r3, [r4, #16]
 800816e:	2300      	movs	r3, #0
 8008170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008174:	e7aa      	b.n	80080cc <_printf_i+0x14c>
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	462a      	mov	r2, r5
 800817a:	4649      	mov	r1, r9
 800817c:	4640      	mov	r0, r8
 800817e:	47d0      	blx	sl
 8008180:	3001      	adds	r0, #1
 8008182:	d0ad      	beq.n	80080e0 <_printf_i+0x160>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	079b      	lsls	r3, r3, #30
 8008188:	d413      	bmi.n	80081b2 <_printf_i+0x232>
 800818a:	68e0      	ldr	r0, [r4, #12]
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	4298      	cmp	r0, r3
 8008190:	bfb8      	it	lt
 8008192:	4618      	movlt	r0, r3
 8008194:	e7a6      	b.n	80080e4 <_printf_i+0x164>
 8008196:	2301      	movs	r3, #1
 8008198:	4632      	mov	r2, r6
 800819a:	4649      	mov	r1, r9
 800819c:	4640      	mov	r0, r8
 800819e:	47d0      	blx	sl
 80081a0:	3001      	adds	r0, #1
 80081a2:	d09d      	beq.n	80080e0 <_printf_i+0x160>
 80081a4:	3501      	adds	r5, #1
 80081a6:	68e3      	ldr	r3, [r4, #12]
 80081a8:	9903      	ldr	r1, [sp, #12]
 80081aa:	1a5b      	subs	r3, r3, r1
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dcf2      	bgt.n	8008196 <_printf_i+0x216>
 80081b0:	e7eb      	b.n	800818a <_printf_i+0x20a>
 80081b2:	2500      	movs	r5, #0
 80081b4:	f104 0619 	add.w	r6, r4, #25
 80081b8:	e7f5      	b.n	80081a6 <_printf_i+0x226>
 80081ba:	bf00      	nop
 80081bc:	0800a58a 	.word	0x0800a58a
 80081c0:	0800a59b 	.word	0x0800a59b

080081c4 <std>:
 80081c4:	2300      	movs	r3, #0
 80081c6:	b510      	push	{r4, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	e9c0 3300 	strd	r3, r3, [r0]
 80081ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081d2:	6083      	str	r3, [r0, #8]
 80081d4:	8181      	strh	r1, [r0, #12]
 80081d6:	6643      	str	r3, [r0, #100]	; 0x64
 80081d8:	81c2      	strh	r2, [r0, #14]
 80081da:	6183      	str	r3, [r0, #24]
 80081dc:	4619      	mov	r1, r3
 80081de:	2208      	movs	r2, #8
 80081e0:	305c      	adds	r0, #92	; 0x5c
 80081e2:	f000 f9f7 	bl	80085d4 <memset>
 80081e6:	4b0d      	ldr	r3, [pc, #52]	; (800821c <std+0x58>)
 80081e8:	6263      	str	r3, [r4, #36]	; 0x24
 80081ea:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <std+0x5c>)
 80081ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <std+0x60>)
 80081f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081f2:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <std+0x64>)
 80081f4:	6323      	str	r3, [r4, #48]	; 0x30
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <std+0x68>)
 80081f8:	6224      	str	r4, [r4, #32]
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d006      	beq.n	800820c <std+0x48>
 80081fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008202:	4294      	cmp	r4, r2
 8008204:	d002      	beq.n	800820c <std+0x48>
 8008206:	33d0      	adds	r3, #208	; 0xd0
 8008208:	429c      	cmp	r4, r3
 800820a:	d105      	bne.n	8008218 <std+0x54>
 800820c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008214:	f000 ba5a 	b.w	80086cc <__retarget_lock_init_recursive>
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	08008425 	.word	0x08008425
 8008220:	08008447 	.word	0x08008447
 8008224:	0800847f 	.word	0x0800847f
 8008228:	080084a3 	.word	0x080084a3
 800822c:	20000538 	.word	0x20000538

08008230 <stdio_exit_handler>:
 8008230:	4a02      	ldr	r2, [pc, #8]	; (800823c <stdio_exit_handler+0xc>)
 8008232:	4903      	ldr	r1, [pc, #12]	; (8008240 <stdio_exit_handler+0x10>)
 8008234:	4803      	ldr	r0, [pc, #12]	; (8008244 <stdio_exit_handler+0x14>)
 8008236:	f000 b869 	b.w	800830c <_fwalk_sglue>
 800823a:	bf00      	nop
 800823c:	2000000c 	.word	0x2000000c
 8008240:	0800a059 	.word	0x0800a059
 8008244:	20000018 	.word	0x20000018

08008248 <cleanup_stdio>:
 8008248:	6841      	ldr	r1, [r0, #4]
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <cleanup_stdio+0x34>)
 800824c:	4299      	cmp	r1, r3
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	d001      	beq.n	8008258 <cleanup_stdio+0x10>
 8008254:	f001 ff00 	bl	800a058 <_fflush_r>
 8008258:	68a1      	ldr	r1, [r4, #8]
 800825a:	4b09      	ldr	r3, [pc, #36]	; (8008280 <cleanup_stdio+0x38>)
 800825c:	4299      	cmp	r1, r3
 800825e:	d002      	beq.n	8008266 <cleanup_stdio+0x1e>
 8008260:	4620      	mov	r0, r4
 8008262:	f001 fef9 	bl	800a058 <_fflush_r>
 8008266:	68e1      	ldr	r1, [r4, #12]
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <cleanup_stdio+0x3c>)
 800826a:	4299      	cmp	r1, r3
 800826c:	d004      	beq.n	8008278 <cleanup_stdio+0x30>
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008274:	f001 bef0 	b.w	800a058 <_fflush_r>
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	20000538 	.word	0x20000538
 8008280:	200005a0 	.word	0x200005a0
 8008284:	20000608 	.word	0x20000608

08008288 <global_stdio_init.part.0>:
 8008288:	b510      	push	{r4, lr}
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <global_stdio_init.part.0+0x30>)
 800828c:	4c0b      	ldr	r4, [pc, #44]	; (80082bc <global_stdio_init.part.0+0x34>)
 800828e:	4a0c      	ldr	r2, [pc, #48]	; (80082c0 <global_stdio_init.part.0+0x38>)
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	4620      	mov	r0, r4
 8008294:	2200      	movs	r2, #0
 8008296:	2104      	movs	r1, #4
 8008298:	f7ff ff94 	bl	80081c4 <std>
 800829c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80082a0:	2201      	movs	r2, #1
 80082a2:	2109      	movs	r1, #9
 80082a4:	f7ff ff8e 	bl	80081c4 <std>
 80082a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80082ac:	2202      	movs	r2, #2
 80082ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b2:	2112      	movs	r1, #18
 80082b4:	f7ff bf86 	b.w	80081c4 <std>
 80082b8:	20000670 	.word	0x20000670
 80082bc:	20000538 	.word	0x20000538
 80082c0:	08008231 	.word	0x08008231

080082c4 <__sfp_lock_acquire>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__sfp_lock_acquire+0x8>)
 80082c6:	f000 ba02 	b.w	80086ce <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	20000679 	.word	0x20000679

080082d0 <__sfp_lock_release>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__sfp_lock_release+0x8>)
 80082d2:	f000 b9fd 	b.w	80086d0 <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	20000679 	.word	0x20000679

080082dc <__sinit>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	4604      	mov	r4, r0
 80082e0:	f7ff fff0 	bl	80082c4 <__sfp_lock_acquire>
 80082e4:	6a23      	ldr	r3, [r4, #32]
 80082e6:	b11b      	cbz	r3, 80082f0 <__sinit+0x14>
 80082e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ec:	f7ff bff0 	b.w	80082d0 <__sfp_lock_release>
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__sinit+0x28>)
 80082f2:	6223      	str	r3, [r4, #32]
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <__sinit+0x2c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f5      	bne.n	80082e8 <__sinit+0xc>
 80082fc:	f7ff ffc4 	bl	8008288 <global_stdio_init.part.0>
 8008300:	e7f2      	b.n	80082e8 <__sinit+0xc>
 8008302:	bf00      	nop
 8008304:	08008249 	.word	0x08008249
 8008308:	20000670 	.word	0x20000670

0800830c <_fwalk_sglue>:
 800830c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008310:	4607      	mov	r7, r0
 8008312:	4688      	mov	r8, r1
 8008314:	4614      	mov	r4, r2
 8008316:	2600      	movs	r6, #0
 8008318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800831c:	f1b9 0901 	subs.w	r9, r9, #1
 8008320:	d505      	bpl.n	800832e <_fwalk_sglue+0x22>
 8008322:	6824      	ldr	r4, [r4, #0]
 8008324:	2c00      	cmp	r4, #0
 8008326:	d1f7      	bne.n	8008318 <_fwalk_sglue+0xc>
 8008328:	4630      	mov	r0, r6
 800832a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d907      	bls.n	8008344 <_fwalk_sglue+0x38>
 8008334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008338:	3301      	adds	r3, #1
 800833a:	d003      	beq.n	8008344 <_fwalk_sglue+0x38>
 800833c:	4629      	mov	r1, r5
 800833e:	4638      	mov	r0, r7
 8008340:	47c0      	blx	r8
 8008342:	4306      	orrs	r6, r0
 8008344:	3568      	adds	r5, #104	; 0x68
 8008346:	e7e9      	b.n	800831c <_fwalk_sglue+0x10>

08008348 <iprintf>:
 8008348:	b40f      	push	{r0, r1, r2, r3}
 800834a:	b507      	push	{r0, r1, r2, lr}
 800834c:	4906      	ldr	r1, [pc, #24]	; (8008368 <iprintf+0x20>)
 800834e:	ab04      	add	r3, sp, #16
 8008350:	6808      	ldr	r0, [r1, #0]
 8008352:	f853 2b04 	ldr.w	r2, [r3], #4
 8008356:	6881      	ldr	r1, [r0, #8]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	f001 fcdd 	bl	8009d18 <_vfiprintf_r>
 800835e:	b003      	add	sp, #12
 8008360:	f85d eb04 	ldr.w	lr, [sp], #4
 8008364:	b004      	add	sp, #16
 8008366:	4770      	bx	lr
 8008368:	20000064 	.word	0x20000064

0800836c <_puts_r>:
 800836c:	6a03      	ldr	r3, [r0, #32]
 800836e:	b570      	push	{r4, r5, r6, lr}
 8008370:	6884      	ldr	r4, [r0, #8]
 8008372:	4605      	mov	r5, r0
 8008374:	460e      	mov	r6, r1
 8008376:	b90b      	cbnz	r3, 800837c <_puts_r+0x10>
 8008378:	f7ff ffb0 	bl	80082dc <__sinit>
 800837c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800837e:	07db      	lsls	r3, r3, #31
 8008380:	d405      	bmi.n	800838e <_puts_r+0x22>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	0598      	lsls	r0, r3, #22
 8008386:	d402      	bmi.n	800838e <_puts_r+0x22>
 8008388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838a:	f000 f9a0 	bl	80086ce <__retarget_lock_acquire_recursive>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	0719      	lsls	r1, r3, #28
 8008392:	d513      	bpl.n	80083bc <_puts_r+0x50>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b18b      	cbz	r3, 80083bc <_puts_r+0x50>
 8008398:	3e01      	subs	r6, #1
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083a0:	3b01      	subs	r3, #1
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	b9e9      	cbnz	r1, 80083e2 <_puts_r+0x76>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da2e      	bge.n	8008408 <_puts_r+0x9c>
 80083aa:	4622      	mov	r2, r4
 80083ac:	210a      	movs	r1, #10
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f87b 	bl	80084aa <__swbuf_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d007      	beq.n	80083c8 <_puts_r+0x5c>
 80083b8:	250a      	movs	r5, #10
 80083ba:	e007      	b.n	80083cc <_puts_r+0x60>
 80083bc:	4621      	mov	r1, r4
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 f8b0 	bl	8008524 <__swsetup_r>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d0e7      	beq.n	8008398 <_puts_r+0x2c>
 80083c8:	f04f 35ff 	mov.w	r5, #4294967295
 80083cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ce:	07da      	lsls	r2, r3, #31
 80083d0:	d405      	bmi.n	80083de <_puts_r+0x72>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	059b      	lsls	r3, r3, #22
 80083d6:	d402      	bmi.n	80083de <_puts_r+0x72>
 80083d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083da:	f000 f979 	bl	80086d0 <__retarget_lock_release_recursive>
 80083de:	4628      	mov	r0, r5
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da04      	bge.n	80083f0 <_puts_r+0x84>
 80083e6:	69a2      	ldr	r2, [r4, #24]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	dc06      	bgt.n	80083fa <_puts_r+0x8e>
 80083ec:	290a      	cmp	r1, #10
 80083ee:	d004      	beq.n	80083fa <_puts_r+0x8e>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	7019      	strb	r1, [r3, #0]
 80083f8:	e7cf      	b.n	800839a <_puts_r+0x2e>
 80083fa:	4622      	mov	r2, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f854 	bl	80084aa <__swbuf_r>
 8008402:	3001      	adds	r0, #1
 8008404:	d1c9      	bne.n	800839a <_puts_r+0x2e>
 8008406:	e7df      	b.n	80083c8 <_puts_r+0x5c>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	250a      	movs	r5, #10
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	701d      	strb	r5, [r3, #0]
 8008412:	e7db      	b.n	80083cc <_puts_r+0x60>

08008414 <puts>:
 8008414:	4b02      	ldr	r3, [pc, #8]	; (8008420 <puts+0xc>)
 8008416:	4601      	mov	r1, r0
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f7ff bfa7 	b.w	800836c <_puts_r>
 800841e:	bf00      	nop
 8008420:	20000064 	.word	0x20000064

08008424 <__sread>:
 8008424:	b510      	push	{r4, lr}
 8008426:	460c      	mov	r4, r1
 8008428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842c:	f000 f900 	bl	8008630 <_read_r>
 8008430:	2800      	cmp	r0, #0
 8008432:	bfab      	itete	ge
 8008434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008436:	89a3      	ldrhlt	r3, [r4, #12]
 8008438:	181b      	addge	r3, r3, r0
 800843a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800843e:	bfac      	ite	ge
 8008440:	6563      	strge	r3, [r4, #84]	; 0x54
 8008442:	81a3      	strhlt	r3, [r4, #12]
 8008444:	bd10      	pop	{r4, pc}

08008446 <__swrite>:
 8008446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	461f      	mov	r7, r3
 800844c:	898b      	ldrh	r3, [r1, #12]
 800844e:	05db      	lsls	r3, r3, #23
 8008450:	4605      	mov	r5, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4616      	mov	r6, r2
 8008456:	d505      	bpl.n	8008464 <__swrite+0x1e>
 8008458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845c:	2302      	movs	r3, #2
 800845e:	2200      	movs	r2, #0
 8008460:	f000 f8d4 	bl	800860c <_lseek_r>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800846a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	4632      	mov	r2, r6
 8008472:	463b      	mov	r3, r7
 8008474:	4628      	mov	r0, r5
 8008476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800847a:	f000 b8eb 	b.w	8008654 <_write_r>

0800847e <__sseek>:
 800847e:	b510      	push	{r4, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008486:	f000 f8c1 	bl	800860c <_lseek_r>
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	bf15      	itete	ne
 8008490:	6560      	strne	r0, [r4, #84]	; 0x54
 8008492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800849a:	81a3      	strheq	r3, [r4, #12]
 800849c:	bf18      	it	ne
 800849e:	81a3      	strhne	r3, [r4, #12]
 80084a0:	bd10      	pop	{r4, pc}

080084a2 <__sclose>:
 80084a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a6:	f000 b8a1 	b.w	80085ec <_close_r>

080084aa <__swbuf_r>:
 80084aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ac:	460e      	mov	r6, r1
 80084ae:	4614      	mov	r4, r2
 80084b0:	4605      	mov	r5, r0
 80084b2:	b118      	cbz	r0, 80084bc <__swbuf_r+0x12>
 80084b4:	6a03      	ldr	r3, [r0, #32]
 80084b6:	b90b      	cbnz	r3, 80084bc <__swbuf_r+0x12>
 80084b8:	f7ff ff10 	bl	80082dc <__sinit>
 80084bc:	69a3      	ldr	r3, [r4, #24]
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	071a      	lsls	r2, r3, #28
 80084c4:	d525      	bpl.n	8008512 <__swbuf_r+0x68>
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	b31b      	cbz	r3, 8008512 <__swbuf_r+0x68>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	6922      	ldr	r2, [r4, #16]
 80084ce:	1a98      	subs	r0, r3, r2
 80084d0:	6963      	ldr	r3, [r4, #20]
 80084d2:	b2f6      	uxtb	r6, r6
 80084d4:	4283      	cmp	r3, r0
 80084d6:	4637      	mov	r7, r6
 80084d8:	dc04      	bgt.n	80084e4 <__swbuf_r+0x3a>
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f001 fdbb 	bl	800a058 <_fflush_r>
 80084e2:	b9e0      	cbnz	r0, 800851e <__swbuf_r+0x74>
 80084e4:	68a3      	ldr	r3, [r4, #8]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	60a3      	str	r3, [r4, #8]
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	701e      	strb	r6, [r3, #0]
 80084f2:	6962      	ldr	r2, [r4, #20]
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d004      	beq.n	8008504 <__swbuf_r+0x5a>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	07db      	lsls	r3, r3, #31
 80084fe:	d506      	bpl.n	800850e <__swbuf_r+0x64>
 8008500:	2e0a      	cmp	r6, #10
 8008502:	d104      	bne.n	800850e <__swbuf_r+0x64>
 8008504:	4621      	mov	r1, r4
 8008506:	4628      	mov	r0, r5
 8008508:	f001 fda6 	bl	800a058 <_fflush_r>
 800850c:	b938      	cbnz	r0, 800851e <__swbuf_r+0x74>
 800850e:	4638      	mov	r0, r7
 8008510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f805 	bl	8008524 <__swsetup_r>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0d5      	beq.n	80084ca <__swbuf_r+0x20>
 800851e:	f04f 37ff 	mov.w	r7, #4294967295
 8008522:	e7f4      	b.n	800850e <__swbuf_r+0x64>

08008524 <__swsetup_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4b2a      	ldr	r3, [pc, #168]	; (80085d0 <__swsetup_r+0xac>)
 8008528:	4605      	mov	r5, r0
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	460c      	mov	r4, r1
 800852e:	b118      	cbz	r0, 8008538 <__swsetup_r+0x14>
 8008530:	6a03      	ldr	r3, [r0, #32]
 8008532:	b90b      	cbnz	r3, 8008538 <__swsetup_r+0x14>
 8008534:	f7ff fed2 	bl	80082dc <__sinit>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800853e:	0718      	lsls	r0, r3, #28
 8008540:	d422      	bmi.n	8008588 <__swsetup_r+0x64>
 8008542:	06d9      	lsls	r1, r3, #27
 8008544:	d407      	bmi.n	8008556 <__swsetup_r+0x32>
 8008546:	2309      	movs	r3, #9
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e034      	b.n	80085c0 <__swsetup_r+0x9c>
 8008556:	0758      	lsls	r0, r3, #29
 8008558:	d512      	bpl.n	8008580 <__swsetup_r+0x5c>
 800855a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855c:	b141      	cbz	r1, 8008570 <__swsetup_r+0x4c>
 800855e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008562:	4299      	cmp	r1, r3
 8008564:	d002      	beq.n	800856c <__swsetup_r+0x48>
 8008566:	4628      	mov	r0, r5
 8008568:	f000 ff30 	bl	80093cc <_free_r>
 800856c:	2300      	movs	r3, #0
 800856e:	6363      	str	r3, [r4, #52]	; 0x34
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	2300      	movs	r3, #0
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f043 0308 	orr.w	r3, r3, #8
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	b94b      	cbnz	r3, 80085a0 <__swsetup_r+0x7c>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008596:	d003      	beq.n	80085a0 <__swsetup_r+0x7c>
 8008598:	4621      	mov	r1, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f001 fdaa 	bl	800a0f4 <__smakebuf_r>
 80085a0:	89a0      	ldrh	r0, [r4, #12]
 80085a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085a6:	f010 0301 	ands.w	r3, r0, #1
 80085aa:	d00a      	beq.n	80085c2 <__swsetup_r+0x9e>
 80085ac:	2300      	movs	r3, #0
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	6963      	ldr	r3, [r4, #20]
 80085b2:	425b      	negs	r3, r3
 80085b4:	61a3      	str	r3, [r4, #24]
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	b943      	cbnz	r3, 80085cc <__swsetup_r+0xa8>
 80085ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085be:	d1c4      	bne.n	800854a <__swsetup_r+0x26>
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	0781      	lsls	r1, r0, #30
 80085c4:	bf58      	it	pl
 80085c6:	6963      	ldrpl	r3, [r4, #20]
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	e7f4      	b.n	80085b6 <__swsetup_r+0x92>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7f7      	b.n	80085c0 <__swsetup_r+0x9c>
 80085d0:	20000064 	.word	0x20000064

080085d4 <memset>:
 80085d4:	4402      	add	r2, r0
 80085d6:	4603      	mov	r3, r0
 80085d8:	4293      	cmp	r3, r2
 80085da:	d100      	bne.n	80085de <memset+0xa>
 80085dc:	4770      	bx	lr
 80085de:	f803 1b01 	strb.w	r1, [r3], #1
 80085e2:	e7f9      	b.n	80085d8 <memset+0x4>

080085e4 <_localeconv_r>:
 80085e4:	4800      	ldr	r0, [pc, #0]	; (80085e8 <_localeconv_r+0x4>)
 80085e6:	4770      	bx	lr
 80085e8:	20000158 	.word	0x20000158

080085ec <_close_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	; (8008608 <_close_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7fa faa5 	bl	8002b46 <_close>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_close_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_close_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20000674 	.word	0x20000674

0800860c <_lseek_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d07      	ldr	r5, [pc, #28]	; (800862c <_lseek_r+0x20>)
 8008610:	4604      	mov	r4, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	602a      	str	r2, [r5, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7fa faba 	bl	8002b94 <_lseek>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_lseek_r+0x1e>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_lseek_r+0x1e>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000674 	.word	0x20000674

08008630 <_read_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	; (8008650 <_read_r+0x20>)
 8008634:	4604      	mov	r4, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7fa fa64 	bl	8002b0c <_read>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_read_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_read_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20000674 	.word	0x20000674

08008654 <_write_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	; (8008674 <_write_r+0x20>)
 8008658:	4604      	mov	r4, r0
 800865a:	4608      	mov	r0, r1
 800865c:	4611      	mov	r1, r2
 800865e:	2200      	movs	r2, #0
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f7f9 fe48 	bl	80022f8 <_write>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_write_r+0x1e>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_write_r+0x1e>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20000674 	.word	0x20000674

08008678 <__errno>:
 8008678:	4b01      	ldr	r3, [pc, #4]	; (8008680 <__errno+0x8>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20000064 	.word	0x20000064

08008684 <__libc_init_array>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4d0d      	ldr	r5, [pc, #52]	; (80086bc <__libc_init_array+0x38>)
 8008688:	4c0d      	ldr	r4, [pc, #52]	; (80086c0 <__libc_init_array+0x3c>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	2600      	movs	r6, #0
 8008690:	42a6      	cmp	r6, r4
 8008692:	d109      	bne.n	80086a8 <__libc_init_array+0x24>
 8008694:	4d0b      	ldr	r5, [pc, #44]	; (80086c4 <__libc_init_array+0x40>)
 8008696:	4c0c      	ldr	r4, [pc, #48]	; (80086c8 <__libc_init_array+0x44>)
 8008698:	f001 fe5a 	bl	800a350 <_init>
 800869c:	1b64      	subs	r4, r4, r5
 800869e:	10a4      	asrs	r4, r4, #2
 80086a0:	2600      	movs	r6, #0
 80086a2:	42a6      	cmp	r6, r4
 80086a4:	d105      	bne.n	80086b2 <__libc_init_array+0x2e>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ac:	4798      	blx	r3
 80086ae:	3601      	adds	r6, #1
 80086b0:	e7ee      	b.n	8008690 <__libc_init_array+0xc>
 80086b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b6:	4798      	blx	r3
 80086b8:	3601      	adds	r6, #1
 80086ba:	e7f2      	b.n	80086a2 <__libc_init_array+0x1e>
 80086bc:	0800a8f4 	.word	0x0800a8f4
 80086c0:	0800a8f4 	.word	0x0800a8f4
 80086c4:	0800a8f4 	.word	0x0800a8f4
 80086c8:	0800a8f8 	.word	0x0800a8f8

080086cc <__retarget_lock_init_recursive>:
 80086cc:	4770      	bx	lr

080086ce <__retarget_lock_acquire_recursive>:
 80086ce:	4770      	bx	lr

080086d0 <__retarget_lock_release_recursive>:
 80086d0:	4770      	bx	lr

080086d2 <quorem>:
 80086d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	6903      	ldr	r3, [r0, #16]
 80086d8:	690c      	ldr	r4, [r1, #16]
 80086da:	42a3      	cmp	r3, r4
 80086dc:	4607      	mov	r7, r0
 80086de:	db7e      	blt.n	80087de <quorem+0x10c>
 80086e0:	3c01      	subs	r4, #1
 80086e2:	f101 0814 	add.w	r8, r1, #20
 80086e6:	f100 0514 	add.w	r5, r0, #20
 80086ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086f8:	3301      	adds	r3, #1
 80086fa:	429a      	cmp	r2, r3
 80086fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008704:	fbb2 f6f3 	udiv	r6, r2, r3
 8008708:	d331      	bcc.n	800876e <quorem+0x9c>
 800870a:	f04f 0e00 	mov.w	lr, #0
 800870e:	4640      	mov	r0, r8
 8008710:	46ac      	mov	ip, r5
 8008712:	46f2      	mov	sl, lr
 8008714:	f850 2b04 	ldr.w	r2, [r0], #4
 8008718:	b293      	uxth	r3, r2
 800871a:	fb06 e303 	mla	r3, r6, r3, lr
 800871e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008722:	0c1a      	lsrs	r2, r3, #16
 8008724:	b29b      	uxth	r3, r3
 8008726:	ebaa 0303 	sub.w	r3, sl, r3
 800872a:	f8dc a000 	ldr.w	sl, [ip]
 800872e:	fa13 f38a 	uxtah	r3, r3, sl
 8008732:	fb06 220e 	mla	r2, r6, lr, r2
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800873e:	b292      	uxth	r2, r2
 8008740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008748:	f8bd 3000 	ldrh.w	r3, [sp]
 800874c:	4581      	cmp	r9, r0
 800874e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008752:	f84c 3b04 	str.w	r3, [ip], #4
 8008756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800875a:	d2db      	bcs.n	8008714 <quorem+0x42>
 800875c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008760:	b92b      	cbnz	r3, 800876e <quorem+0x9c>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	3b04      	subs	r3, #4
 8008766:	429d      	cmp	r5, r3
 8008768:	461a      	mov	r2, r3
 800876a:	d32c      	bcc.n	80087c6 <quorem+0xf4>
 800876c:	613c      	str	r4, [r7, #16]
 800876e:	4638      	mov	r0, r7
 8008770:	f001 f9a8 	bl	8009ac4 <__mcmp>
 8008774:	2800      	cmp	r0, #0
 8008776:	db22      	blt.n	80087be <quorem+0xec>
 8008778:	3601      	adds	r6, #1
 800877a:	4629      	mov	r1, r5
 800877c:	2000      	movs	r0, #0
 800877e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008782:	f8d1 c000 	ldr.w	ip, [r1]
 8008786:	b293      	uxth	r3, r2
 8008788:	1ac3      	subs	r3, r0, r3
 800878a:	0c12      	lsrs	r2, r2, #16
 800878c:	fa13 f38c 	uxtah	r3, r3, ip
 8008790:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879e:	45c1      	cmp	r9, r8
 80087a0:	f841 3b04 	str.w	r3, [r1], #4
 80087a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087a8:	d2e9      	bcs.n	800877e <quorem+0xac>
 80087aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b2:	b922      	cbnz	r2, 80087be <quorem+0xec>
 80087b4:	3b04      	subs	r3, #4
 80087b6:	429d      	cmp	r5, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	d30a      	bcc.n	80087d2 <quorem+0x100>
 80087bc:	613c      	str	r4, [r7, #16]
 80087be:	4630      	mov	r0, r6
 80087c0:	b003      	add	sp, #12
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	3b04      	subs	r3, #4
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d1ce      	bne.n	800876c <quorem+0x9a>
 80087ce:	3c01      	subs	r4, #1
 80087d0:	e7c9      	b.n	8008766 <quorem+0x94>
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d1f0      	bne.n	80087bc <quorem+0xea>
 80087da:	3c01      	subs	r4, #1
 80087dc:	e7eb      	b.n	80087b6 <quorem+0xe4>
 80087de:	2000      	movs	r0, #0
 80087e0:	e7ee      	b.n	80087c0 <quorem+0xee>
 80087e2:	0000      	movs	r0, r0
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	ed2d 8b04 	vpush	{d8-d9}
 80087f0:	69c5      	ldr	r5, [r0, #28]
 80087f2:	b093      	sub	sp, #76	; 0x4c
 80087f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087f8:	ec57 6b10 	vmov	r6, r7, d0
 80087fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008800:	9107      	str	r1, [sp, #28]
 8008802:	4604      	mov	r4, r0
 8008804:	920a      	str	r2, [sp, #40]	; 0x28
 8008806:	930d      	str	r3, [sp, #52]	; 0x34
 8008808:	b975      	cbnz	r5, 8008828 <_dtoa_r+0x40>
 800880a:	2010      	movs	r0, #16
 800880c:	f000 fe2a 	bl	8009464 <malloc>
 8008810:	4602      	mov	r2, r0
 8008812:	61e0      	str	r0, [r4, #28]
 8008814:	b920      	cbnz	r0, 8008820 <_dtoa_r+0x38>
 8008816:	4bae      	ldr	r3, [pc, #696]	; (8008ad0 <_dtoa_r+0x2e8>)
 8008818:	21ef      	movs	r1, #239	; 0xef
 800881a:	48ae      	ldr	r0, [pc, #696]	; (8008ad4 <_dtoa_r+0x2ec>)
 800881c:	f001 fce6 	bl	800a1ec <__assert_func>
 8008820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008824:	6005      	str	r5, [r0, #0]
 8008826:	60c5      	str	r5, [r0, #12]
 8008828:	69e3      	ldr	r3, [r4, #28]
 800882a:	6819      	ldr	r1, [r3, #0]
 800882c:	b151      	cbz	r1, 8008844 <_dtoa_r+0x5c>
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	604a      	str	r2, [r1, #4]
 8008832:	2301      	movs	r3, #1
 8008834:	4093      	lsls	r3, r2
 8008836:	608b      	str	r3, [r1, #8]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 ff07 	bl	800964c <_Bfree>
 800883e:	69e3      	ldr	r3, [r4, #28]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	1e3b      	subs	r3, r7, #0
 8008846:	bfbb      	ittet	lt
 8008848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800884c:	9303      	strlt	r3, [sp, #12]
 800884e:	2300      	movge	r3, #0
 8008850:	2201      	movlt	r2, #1
 8008852:	bfac      	ite	ge
 8008854:	f8c8 3000 	strge.w	r3, [r8]
 8008858:	f8c8 2000 	strlt.w	r2, [r8]
 800885c:	4b9e      	ldr	r3, [pc, #632]	; (8008ad8 <_dtoa_r+0x2f0>)
 800885e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008862:	ea33 0308 	bics.w	r3, r3, r8
 8008866:	d11b      	bne.n	80088a0 <_dtoa_r+0xb8>
 8008868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800886a:	f242 730f 	movw	r3, #9999	; 0x270f
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008874:	4333      	orrs	r3, r6
 8008876:	f000 8593 	beq.w	80093a0 <_dtoa_r+0xbb8>
 800887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800887c:	b963      	cbnz	r3, 8008898 <_dtoa_r+0xb0>
 800887e:	4b97      	ldr	r3, [pc, #604]	; (8008adc <_dtoa_r+0x2f4>)
 8008880:	e027      	b.n	80088d2 <_dtoa_r+0xea>
 8008882:	4b97      	ldr	r3, [pc, #604]	; (8008ae0 <_dtoa_r+0x2f8>)
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	3308      	adds	r3, #8
 8008888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	9800      	ldr	r0, [sp, #0]
 800888e:	b013      	add	sp, #76	; 0x4c
 8008890:	ecbd 8b04 	vpop	{d8-d9}
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	4b90      	ldr	r3, [pc, #576]	; (8008adc <_dtoa_r+0x2f4>)
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	3303      	adds	r3, #3
 800889e:	e7f3      	b.n	8008888 <_dtoa_r+0xa0>
 80088a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	ec51 0b17 	vmov	r0, r1, d7
 80088aa:	eeb0 8a47 	vmov.f32	s16, s14
 80088ae:	eef0 8a67 	vmov.f32	s17, s15
 80088b2:	2300      	movs	r3, #0
 80088b4:	f7f8 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b8:	4681      	mov	r9, r0
 80088ba:	b160      	cbz	r0, 80088d6 <_dtoa_r+0xee>
 80088bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088be:	2301      	movs	r3, #1
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8568 	beq.w	800939a <_dtoa_r+0xbb2>
 80088ca:	4b86      	ldr	r3, [pc, #536]	; (8008ae4 <_dtoa_r+0x2fc>)
 80088cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	e7da      	b.n	800888c <_dtoa_r+0xa4>
 80088d6:	aa10      	add	r2, sp, #64	; 0x40
 80088d8:	a911      	add	r1, sp, #68	; 0x44
 80088da:	4620      	mov	r0, r4
 80088dc:	eeb0 0a48 	vmov.f32	s0, s16
 80088e0:	eef0 0a68 	vmov.f32	s1, s17
 80088e4:	f001 f994 	bl	8009c10 <__d2b>
 80088e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088ec:	4682      	mov	sl, r0
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d07f      	beq.n	80089f2 <_dtoa_r+0x20a>
 80088f2:	ee18 3a90 	vmov	r3, s17
 80088f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80088fe:	ec51 0b18 	vmov	r0, r1, d8
 8008902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800890a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800890e:	4619      	mov	r1, r3
 8008910:	2200      	movs	r2, #0
 8008912:	4b75      	ldr	r3, [pc, #468]	; (8008ae8 <_dtoa_r+0x300>)
 8008914:	f7f7 fcb8 	bl	8000288 <__aeabi_dsub>
 8008918:	a367      	add	r3, pc, #412	; (adr r3, 8008ab8 <_dtoa_r+0x2d0>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	a367      	add	r3, pc, #412	; (adr r3, 8008ac0 <_dtoa_r+0x2d8>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fcb0 	bl	800028c <__adddf3>
 800892c:	4606      	mov	r6, r0
 800892e:	4628      	mov	r0, r5
 8008930:	460f      	mov	r7, r1
 8008932:	f7f7 fdf7 	bl	8000524 <__aeabi_i2d>
 8008936:	a364      	add	r3, pc, #400	; (adr r3, 8008ac8 <_dtoa_r+0x2e0>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f7 fca0 	bl	800028c <__adddf3>
 800894c:	4606      	mov	r6, r0
 800894e:	460f      	mov	r7, r1
 8008950:	f7f8 f902 	bl	8000b58 <__aeabi_d2iz>
 8008954:	2200      	movs	r2, #0
 8008956:	4683      	mov	fp, r0
 8008958:	2300      	movs	r3, #0
 800895a:	4630      	mov	r0, r6
 800895c:	4639      	mov	r1, r7
 800895e:	f7f8 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8008962:	b148      	cbz	r0, 8008978 <_dtoa_r+0x190>
 8008964:	4658      	mov	r0, fp
 8008966:	f7f7 fddd 	bl	8000524 <__aeabi_i2d>
 800896a:	4632      	mov	r2, r6
 800896c:	463b      	mov	r3, r7
 800896e:	f7f8 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008972:	b908      	cbnz	r0, 8008978 <_dtoa_r+0x190>
 8008974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008978:	f1bb 0f16 	cmp.w	fp, #22
 800897c:	d857      	bhi.n	8008a2e <_dtoa_r+0x246>
 800897e:	4b5b      	ldr	r3, [pc, #364]	; (8008aec <_dtoa_r+0x304>)
 8008980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	ec51 0b18 	vmov	r0, r1, d8
 800898c:	f7f8 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8008990:	2800      	cmp	r0, #0
 8008992:	d04e      	beq.n	8008a32 <_dtoa_r+0x24a>
 8008994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008998:	2300      	movs	r3, #0
 800899a:	930c      	str	r3, [sp, #48]	; 0x30
 800899c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800899e:	1b5b      	subs	r3, r3, r5
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	bf45      	ittet	mi
 80089a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80089a8:	9305      	strmi	r3, [sp, #20]
 80089aa:	2300      	movpl	r3, #0
 80089ac:	2300      	movmi	r3, #0
 80089ae:	9206      	str	r2, [sp, #24]
 80089b0:	bf54      	ite	pl
 80089b2:	9305      	strpl	r3, [sp, #20]
 80089b4:	9306      	strmi	r3, [sp, #24]
 80089b6:	f1bb 0f00 	cmp.w	fp, #0
 80089ba:	db3c      	blt.n	8008a36 <_dtoa_r+0x24e>
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089c2:	445b      	add	r3, fp
 80089c4:	9306      	str	r3, [sp, #24]
 80089c6:	2300      	movs	r3, #0
 80089c8:	9308      	str	r3, [sp, #32]
 80089ca:	9b07      	ldr	r3, [sp, #28]
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d868      	bhi.n	8008aa2 <_dtoa_r+0x2ba>
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	bfc4      	itt	gt
 80089d4:	3b04      	subgt	r3, #4
 80089d6:	9307      	strgt	r3, [sp, #28]
 80089d8:	9b07      	ldr	r3, [sp, #28]
 80089da:	f1a3 0302 	sub.w	r3, r3, #2
 80089de:	bfcc      	ite	gt
 80089e0:	2500      	movgt	r5, #0
 80089e2:	2501      	movle	r5, #1
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	f200 8085 	bhi.w	8008af4 <_dtoa_r+0x30c>
 80089ea:	e8df f003 	tbb	[pc, r3]
 80089ee:	3b2e      	.short	0x3b2e
 80089f0:	5839      	.short	0x5839
 80089f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80089f6:	441d      	add	r5, r3
 80089f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	bfc1      	itttt	gt
 8008a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a04:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008a0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008a10:	bfd6      	itet	le
 8008a12:	f1c3 0320 	rsble	r3, r3, #32
 8008a16:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a1a:	fa06 f003 	lslle.w	r0, r6, r3
 8008a1e:	f7f7 fd71 	bl	8000504 <__aeabi_ui2d>
 8008a22:	2201      	movs	r2, #1
 8008a24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a28:	3d01      	subs	r5, #1
 8008a2a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a2c:	e76f      	b.n	800890e <_dtoa_r+0x126>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7b3      	b.n	800899a <_dtoa_r+0x1b2>
 8008a32:	900c      	str	r0, [sp, #48]	; 0x30
 8008a34:	e7b2      	b.n	800899c <_dtoa_r+0x1b4>
 8008a36:	9b05      	ldr	r3, [sp, #20]
 8008a38:	eba3 030b 	sub.w	r3, r3, fp
 8008a3c:	9305      	str	r3, [sp, #20]
 8008a3e:	f1cb 0300 	rsb	r3, fp, #0
 8008a42:	9308      	str	r3, [sp, #32]
 8008a44:	2300      	movs	r3, #0
 8008a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a48:	e7bf      	b.n	80089ca <_dtoa_r+0x1e2>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	dc52      	bgt.n	8008afa <_dtoa_r+0x312>
 8008a54:	2301      	movs	r3, #1
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a5e:	e00b      	b.n	8008a78 <_dtoa_r+0x290>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e7f3      	b.n	8008a4c <_dtoa_r+0x264>
 8008a64:	2300      	movs	r3, #0
 8008a66:	9309      	str	r3, [sp, #36]	; 0x24
 8008a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6a:	445b      	add	r3, fp
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	bfb8      	it	lt
 8008a76:	2301      	movlt	r3, #1
 8008a78:	69e0      	ldr	r0, [r4, #28]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	f102 0614 	add.w	r6, r2, #20
 8008a82:	429e      	cmp	r6, r3
 8008a84:	d93d      	bls.n	8008b02 <_dtoa_r+0x31a>
 8008a86:	6041      	str	r1, [r0, #4]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fd9f 	bl	80095cc <_Balloc>
 8008a8e:	9000      	str	r0, [sp, #0]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d139      	bne.n	8008b08 <_dtoa_r+0x320>
 8008a94:	4b16      	ldr	r3, [pc, #88]	; (8008af0 <_dtoa_r+0x308>)
 8008a96:	4602      	mov	r2, r0
 8008a98:	f240 11af 	movw	r1, #431	; 0x1af
 8008a9c:	e6bd      	b.n	800881a <_dtoa_r+0x32>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e7e1      	b.n	8008a66 <_dtoa_r+0x27e>
 8008aa2:	2501      	movs	r5, #1
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	9509      	str	r5, [sp, #36]	; 0x24
 8008aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2312      	movs	r3, #18
 8008ab6:	e7d1      	b.n	8008a5c <_dtoa_r+0x274>
 8008ab8:	636f4361 	.word	0x636f4361
 8008abc:	3fd287a7 	.word	0x3fd287a7
 8008ac0:	8b60c8b3 	.word	0x8b60c8b3
 8008ac4:	3fc68a28 	.word	0x3fc68a28
 8008ac8:	509f79fb 	.word	0x509f79fb
 8008acc:	3fd34413 	.word	0x3fd34413
 8008ad0:	0800a5b9 	.word	0x0800a5b9
 8008ad4:	0800a5d0 	.word	0x0800a5d0
 8008ad8:	7ff00000 	.word	0x7ff00000
 8008adc:	0800a5b5 	.word	0x0800a5b5
 8008ae0:	0800a5ac 	.word	0x0800a5ac
 8008ae4:	0800a589 	.word	0x0800a589
 8008ae8:	3ff80000 	.word	0x3ff80000
 8008aec:	0800a6c0 	.word	0x0800a6c0
 8008af0:	0800a628 	.word	0x0800a628
 8008af4:	2301      	movs	r3, #1
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
 8008af8:	e7d7      	b.n	8008aaa <_dtoa_r+0x2c2>
 8008afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	e7ba      	b.n	8008a78 <_dtoa_r+0x290>
 8008b02:	3101      	adds	r1, #1
 8008b04:	0052      	lsls	r2, r2, #1
 8008b06:	e7ba      	b.n	8008a7e <_dtoa_r+0x296>
 8008b08:	69e3      	ldr	r3, [r4, #28]
 8008b0a:	9a00      	ldr	r2, [sp, #0]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	2b0e      	cmp	r3, #14
 8008b12:	f200 80a8 	bhi.w	8008c66 <_dtoa_r+0x47e>
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	f000 80a5 	beq.w	8008c66 <_dtoa_r+0x47e>
 8008b1c:	f1bb 0f00 	cmp.w	fp, #0
 8008b20:	dd38      	ble.n	8008b94 <_dtoa_r+0x3ac>
 8008b22:	4bc0      	ldr	r3, [pc, #768]	; (8008e24 <_dtoa_r+0x63c>)
 8008b24:	f00b 020f 	and.w	r2, fp, #15
 8008b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b38:	d019      	beq.n	8008b6e <_dtoa_r+0x386>
 8008b3a:	4bbb      	ldr	r3, [pc, #748]	; (8008e28 <_dtoa_r+0x640>)
 8008b3c:	ec51 0b18 	vmov	r0, r1, d8
 8008b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b44:	f7f7 fe82 	bl	800084c <__aeabi_ddiv>
 8008b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4c:	f008 080f 	and.w	r8, r8, #15
 8008b50:	2503      	movs	r5, #3
 8008b52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e28 <_dtoa_r+0x640>
 8008b56:	f1b8 0f00 	cmp.w	r8, #0
 8008b5a:	d10a      	bne.n	8008b72 <_dtoa_r+0x38a>
 8008b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b60:	4632      	mov	r2, r6
 8008b62:	463b      	mov	r3, r7
 8008b64:	f7f7 fe72 	bl	800084c <__aeabi_ddiv>
 8008b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6c:	e02b      	b.n	8008bc6 <_dtoa_r+0x3de>
 8008b6e:	2502      	movs	r5, #2
 8008b70:	e7ef      	b.n	8008b52 <_dtoa_r+0x36a>
 8008b72:	f018 0f01 	tst.w	r8, #1
 8008b76:	d008      	beq.n	8008b8a <_dtoa_r+0x3a2>
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b80:	f7f7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8008b84:	3501      	adds	r5, #1
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b8e:	f109 0908 	add.w	r9, r9, #8
 8008b92:	e7e0      	b.n	8008b56 <_dtoa_r+0x36e>
 8008b94:	f000 809f 	beq.w	8008cd6 <_dtoa_r+0x4ee>
 8008b98:	f1cb 0600 	rsb	r6, fp, #0
 8008b9c:	4ba1      	ldr	r3, [pc, #644]	; (8008e24 <_dtoa_r+0x63c>)
 8008b9e:	4fa2      	ldr	r7, [pc, #648]	; (8008e28 <_dtoa_r+0x640>)
 8008ba0:	f006 020f 	and.w	r2, r6, #15
 8008ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	ec51 0b18 	vmov	r0, r1, d8
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bb8:	1136      	asrs	r6, r6, #4
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2502      	movs	r5, #2
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	d17e      	bne.n	8008cc0 <_dtoa_r+0x4d8>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1d0      	bne.n	8008b68 <_dtoa_r+0x380>
 8008bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8084 	beq.w	8008cda <_dtoa_r+0x4f2>
 8008bd2:	4b96      	ldr	r3, [pc, #600]	; (8008e2c <_dtoa_r+0x644>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d07b      	beq.n	8008cda <_dtoa_r+0x4f2>
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d078      	beq.n	8008cda <_dtoa_r+0x4f2>
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dd39      	ble.n	8008c62 <_dtoa_r+0x47a>
 8008bee:	4b90      	ldr	r3, [pc, #576]	; (8008e30 <_dtoa_r+0x648>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	f7f7 fcff 	bl	80005f8 <__aeabi_dmul>
 8008bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfe:	9e01      	ldr	r6, [sp, #4]
 8008c00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c04:	3501      	adds	r5, #1
 8008c06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f7f7 fc8a 	bl	8000524 <__aeabi_i2d>
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4b86      	ldr	r3, [pc, #536]	; (8008e34 <_dtoa_r+0x64c>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f7f7 fb36 	bl	800028c <__adddf3>
 8008c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d158      	bne.n	8008ce0 <_dtoa_r+0x4f8>
 8008c2e:	4b82      	ldr	r3, [pc, #520]	; (8008e38 <_dtoa_r+0x650>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	f7f7 ff69 	bl	8000b18 <__aeabi_dcmpgt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f040 8296 	bne.w	8009178 <_dtoa_r+0x990>
 8008c4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c50:	4640      	mov	r0, r8
 8008c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c56:	4649      	mov	r1, r9
 8008c58:	f7f7 ff40 	bl	8000adc <__aeabi_dcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f040 8289 	bne.w	8009174 <_dtoa_r+0x98c>
 8008c62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f2c0 814e 	blt.w	8008f0a <_dtoa_r+0x722>
 8008c6e:	f1bb 0f0e 	cmp.w	fp, #14
 8008c72:	f300 814a 	bgt.w	8008f0a <_dtoa_r+0x722>
 8008c76:	4b6b      	ldr	r3, [pc, #428]	; (8008e24 <_dtoa_r+0x63c>)
 8008c78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f280 80dc 	bge.w	8008e40 <_dtoa_r+0x658>
 8008c88:	9b04      	ldr	r3, [sp, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f300 80d8 	bgt.w	8008e40 <_dtoa_r+0x658>
 8008c90:	f040 826f 	bne.w	8009172 <_dtoa_r+0x98a>
 8008c94:	4b68      	ldr	r3, [pc, #416]	; (8008e38 <_dtoa_r+0x650>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	4640      	mov	r0, r8
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	f7f7 fcac 	bl	80005f8 <__aeabi_dmul>
 8008ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ca4:	f7f7 ff2e 	bl	8000b04 <__aeabi_dcmpge>
 8008ca8:	9e04      	ldr	r6, [sp, #16]
 8008caa:	4637      	mov	r7, r6
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 8245 	bne.w	800913c <_dtoa_r+0x954>
 8008cb2:	9d00      	ldr	r5, [sp, #0]
 8008cb4:	2331      	movs	r3, #49	; 0x31
 8008cb6:	f805 3b01 	strb.w	r3, [r5], #1
 8008cba:	f10b 0b01 	add.w	fp, fp, #1
 8008cbe:	e241      	b.n	8009144 <_dtoa_r+0x95c>
 8008cc0:	07f2      	lsls	r2, r6, #31
 8008cc2:	d505      	bpl.n	8008cd0 <_dtoa_r+0x4e8>
 8008cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc8:	f7f7 fc96 	bl	80005f8 <__aeabi_dmul>
 8008ccc:	3501      	adds	r5, #1
 8008cce:	2301      	movs	r3, #1
 8008cd0:	1076      	asrs	r6, r6, #1
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	e773      	b.n	8008bbe <_dtoa_r+0x3d6>
 8008cd6:	2502      	movs	r5, #2
 8008cd8:	e775      	b.n	8008bc6 <_dtoa_r+0x3de>
 8008cda:	9e04      	ldr	r6, [sp, #16]
 8008cdc:	465f      	mov	r7, fp
 8008cde:	e792      	b.n	8008c06 <_dtoa_r+0x41e>
 8008ce0:	9900      	ldr	r1, [sp, #0]
 8008ce2:	4b50      	ldr	r3, [pc, #320]	; (8008e24 <_dtoa_r+0x63c>)
 8008ce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ce8:	4431      	add	r1, r6
 8008cea:	9102      	str	r1, [sp, #8]
 8008cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cee:	eeb0 9a47 	vmov.f32	s18, s14
 8008cf2:	eef0 9a67 	vmov.f32	s19, s15
 8008cf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d044      	beq.n	8008d8c <_dtoa_r+0x5a4>
 8008d02:	494e      	ldr	r1, [pc, #312]	; (8008e3c <_dtoa_r+0x654>)
 8008d04:	2000      	movs	r0, #0
 8008d06:	f7f7 fda1 	bl	800084c <__aeabi_ddiv>
 8008d0a:	ec53 2b19 	vmov	r2, r3, d9
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	9d00      	ldr	r5, [sp, #0]
 8008d14:	ec41 0b19 	vmov	d9, r0, r1
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7f7 ff1c 	bl	8000b58 <__aeabi_d2iz>
 8008d20:	4606      	mov	r6, r0
 8008d22:	f7f7 fbff 	bl	8000524 <__aeabi_i2d>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 faab 	bl	8000288 <__aeabi_dsub>
 8008d32:	3630      	adds	r6, #48	; 0x30
 8008d34:	f805 6b01 	strb.w	r6, [r5], #1
 8008d38:	ec53 2b19 	vmov	r2, r3, d9
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	f7f7 fecc 	bl	8000adc <__aeabi_dcmplt>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d164      	bne.n	8008e12 <_dtoa_r+0x62a>
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	4937      	ldr	r1, [pc, #220]	; (8008e2c <_dtoa_r+0x644>)
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	ec53 2b19 	vmov	r2, r3, d9
 8008d58:	f7f7 fec0 	bl	8000adc <__aeabi_dcmplt>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f040 80b6 	bne.w	8008ece <_dtoa_r+0x6e6>
 8008d62:	9b02      	ldr	r3, [sp, #8]
 8008d64:	429d      	cmp	r5, r3
 8008d66:	f43f af7c 	beq.w	8008c62 <_dtoa_r+0x47a>
 8008d6a:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <_dtoa_r+0x648>)
 8008d6c:	ec51 0b19 	vmov	r0, r1, d9
 8008d70:	2200      	movs	r2, #0
 8008d72:	f7f7 fc41 	bl	80005f8 <__aeabi_dmul>
 8008d76:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <_dtoa_r+0x648>)
 8008d78:	ec41 0b19 	vmov	d9, r0, r1
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fc39 	bl	80005f8 <__aeabi_dmul>
 8008d86:	4680      	mov	r8, r0
 8008d88:	4689      	mov	r9, r1
 8008d8a:	e7c5      	b.n	8008d18 <_dtoa_r+0x530>
 8008d8c:	ec51 0b17 	vmov	r0, r1, d7
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	9d00      	ldr	r5, [sp, #0]
 8008d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d9a:	ec41 0b19 	vmov	d9, r0, r1
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4640      	mov	r0, r8
 8008da2:	f7f7 fed9 	bl	8000b58 <__aeabi_d2iz>
 8008da6:	4606      	mov	r6, r0
 8008da8:	f7f7 fbbc 	bl	8000524 <__aeabi_i2d>
 8008dac:	3630      	adds	r6, #48	; 0x30
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fa67 	bl	8000288 <__aeabi_dsub>
 8008dba:	f805 6b01 	strb.w	r6, [r5], #1
 8008dbe:	9b02      	ldr	r3, [sp, #8]
 8008dc0:	429d      	cmp	r5, r3
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	4689      	mov	r9, r1
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	d124      	bne.n	8008e16 <_dtoa_r+0x62e>
 8008dcc:	4b1b      	ldr	r3, [pc, #108]	; (8008e3c <_dtoa_r+0x654>)
 8008dce:	ec51 0b19 	vmov	r0, r1, d9
 8008dd2:	f7f7 fa5b 	bl	800028c <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d173      	bne.n	8008ece <_dtoa_r+0x6e6>
 8008de6:	ec53 2b19 	vmov	r2, r3, d9
 8008dea:	4914      	ldr	r1, [pc, #80]	; (8008e3c <_dtoa_r+0x654>)
 8008dec:	2000      	movs	r0, #0
 8008dee:	f7f7 fa4b 	bl	8000288 <__aeabi_dsub>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	f7f7 fe6f 	bl	8000adc <__aeabi_dcmplt>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f43f af2f 	beq.w	8008c62 <_dtoa_r+0x47a>
 8008e04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e06:	1e6b      	subs	r3, r5, #1
 8008e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e0e:	2b30      	cmp	r3, #48	; 0x30
 8008e10:	d0f8      	beq.n	8008e04 <_dtoa_r+0x61c>
 8008e12:	46bb      	mov	fp, r7
 8008e14:	e04a      	b.n	8008eac <_dtoa_r+0x6c4>
 8008e16:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <_dtoa_r+0x648>)
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	4689      	mov	r9, r1
 8008e20:	e7bd      	b.n	8008d9e <_dtoa_r+0x5b6>
 8008e22:	bf00      	nop
 8008e24:	0800a6c0 	.word	0x0800a6c0
 8008e28:	0800a698 	.word	0x0800a698
 8008e2c:	3ff00000 	.word	0x3ff00000
 8008e30:	40240000 	.word	0x40240000
 8008e34:	401c0000 	.word	0x401c0000
 8008e38:	40140000 	.word	0x40140000
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e44:	9d00      	ldr	r5, [sp, #0]
 8008e46:	4642      	mov	r2, r8
 8008e48:	464b      	mov	r3, r9
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 fcfd 	bl	800084c <__aeabi_ddiv>
 8008e52:	f7f7 fe81 	bl	8000b58 <__aeabi_d2iz>
 8008e56:	9001      	str	r0, [sp, #4]
 8008e58:	f7f7 fb64 	bl	8000524 <__aeabi_i2d>
 8008e5c:	4642      	mov	r2, r8
 8008e5e:	464b      	mov	r3, r9
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4630      	mov	r0, r6
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f7f7 fa0c 	bl	8000288 <__aeabi_dsub>
 8008e70:	9e01      	ldr	r6, [sp, #4]
 8008e72:	9f04      	ldr	r7, [sp, #16]
 8008e74:	3630      	adds	r6, #48	; 0x30
 8008e76:	f805 6b01 	strb.w	r6, [r5], #1
 8008e7a:	9e00      	ldr	r6, [sp, #0]
 8008e7c:	1bae      	subs	r6, r5, r6
 8008e7e:	42b7      	cmp	r7, r6
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	d134      	bne.n	8008ef0 <_dtoa_r+0x708>
 8008e86:	f7f7 fa01 	bl	800028c <__adddf3>
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f7f7 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8008e96:	b9c8      	cbnz	r0, 8008ecc <_dtoa_r+0x6e4>
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ea4:	b110      	cbz	r0, 8008eac <_dtoa_r+0x6c4>
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	07db      	lsls	r3, r3, #31
 8008eaa:	d40f      	bmi.n	8008ecc <_dtoa_r+0x6e4>
 8008eac:	4651      	mov	r1, sl
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fbcc 	bl	800964c <_Bfree>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eb8:	702b      	strb	r3, [r5, #0]
 8008eba:	f10b 0301 	add.w	r3, fp, #1
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f43f ace2 	beq.w	800888c <_dtoa_r+0xa4>
 8008ec8:	601d      	str	r5, [r3, #0]
 8008eca:	e4df      	b.n	800888c <_dtoa_r+0xa4>
 8008ecc:	465f      	mov	r7, fp
 8008ece:	462b      	mov	r3, r5
 8008ed0:	461d      	mov	r5, r3
 8008ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed6:	2a39      	cmp	r2, #57	; 0x39
 8008ed8:	d106      	bne.n	8008ee8 <_dtoa_r+0x700>
 8008eda:	9a00      	ldr	r2, [sp, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d1f7      	bne.n	8008ed0 <_dtoa_r+0x6e8>
 8008ee0:	9900      	ldr	r1, [sp, #0]
 8008ee2:	2230      	movs	r2, #48	; 0x30
 8008ee4:	3701      	adds	r7, #1
 8008ee6:	700a      	strb	r2, [r1, #0]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	3201      	adds	r2, #1
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e790      	b.n	8008e12 <_dtoa_r+0x62a>
 8008ef0:	4ba3      	ldr	r3, [pc, #652]	; (8009180 <_dtoa_r+0x998>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2300      	movs	r3, #0
 8008efc:	4606      	mov	r6, r0
 8008efe:	460f      	mov	r7, r1
 8008f00:	f7f7 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d09e      	beq.n	8008e46 <_dtoa_r+0x65e>
 8008f08:	e7d0      	b.n	8008eac <_dtoa_r+0x6c4>
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	f000 80ca 	beq.w	80090a6 <_dtoa_r+0x8be>
 8008f12:	9a07      	ldr	r2, [sp, #28]
 8008f14:	2a01      	cmp	r2, #1
 8008f16:	f300 80ad 	bgt.w	8009074 <_dtoa_r+0x88c>
 8008f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	f000 80a5 	beq.w	800906c <_dtoa_r+0x884>
 8008f22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f26:	9e08      	ldr	r6, [sp, #32]
 8008f28:	9d05      	ldr	r5, [sp, #20]
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	441a      	add	r2, r3
 8008f2e:	9205      	str	r2, [sp, #20]
 8008f30:	9a06      	ldr	r2, [sp, #24]
 8008f32:	2101      	movs	r1, #1
 8008f34:	441a      	add	r2, r3
 8008f36:	4620      	mov	r0, r4
 8008f38:	9206      	str	r2, [sp, #24]
 8008f3a:	f000 fc3d 	bl	80097b8 <__i2b>
 8008f3e:	4607      	mov	r7, r0
 8008f40:	b165      	cbz	r5, 8008f5c <_dtoa_r+0x774>
 8008f42:	9b06      	ldr	r3, [sp, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd09      	ble.n	8008f5c <_dtoa_r+0x774>
 8008f48:	42ab      	cmp	r3, r5
 8008f4a:	9a05      	ldr	r2, [sp, #20]
 8008f4c:	bfa8      	it	ge
 8008f4e:	462b      	movge	r3, r5
 8008f50:	1ad2      	subs	r2, r2, r3
 8008f52:	9205      	str	r2, [sp, #20]
 8008f54:	9a06      	ldr	r2, [sp, #24]
 8008f56:	1aed      	subs	r5, r5, r3
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	9306      	str	r3, [sp, #24]
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	b1f3      	cbz	r3, 8008f9e <_dtoa_r+0x7b6>
 8008f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80a3 	beq.w	80090ae <_dtoa_r+0x8c6>
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	dd10      	ble.n	8008f8e <_dtoa_r+0x7a6>
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4632      	mov	r2, r6
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fce1 	bl	8009938 <__pow5mult>
 8008f76:	4652      	mov	r2, sl
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fc31 	bl	80097e4 <__multiply>
 8008f82:	4651      	mov	r1, sl
 8008f84:	4680      	mov	r8, r0
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fb60 	bl	800964c <_Bfree>
 8008f8c:	46c2      	mov	sl, r8
 8008f8e:	9b08      	ldr	r3, [sp, #32]
 8008f90:	1b9a      	subs	r2, r3, r6
 8008f92:	d004      	beq.n	8008f9e <_dtoa_r+0x7b6>
 8008f94:	4651      	mov	r1, sl
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 fcce 	bl	8009938 <__pow5mult>
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fc09 	bl	80097b8 <__i2b>
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	4606      	mov	r6, r0
 8008fac:	f340 8081 	ble.w	80090b2 <_dtoa_r+0x8ca>
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fcbf 	bl	8009938 <__pow5mult>
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	dd7a      	ble.n	80090b8 <_dtoa_r+0x8d0>
 8008fc2:	f04f 0800 	mov.w	r8, #0
 8008fc6:	6933      	ldr	r3, [r6, #16]
 8008fc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fcc:	6918      	ldr	r0, [r3, #16]
 8008fce:	f000 fba5 	bl	800971c <__hi0bits>
 8008fd2:	f1c0 0020 	rsb	r0, r0, #32
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	4418      	add	r0, r3
 8008fda:	f010 001f 	ands.w	r0, r0, #31
 8008fde:	f000 8094 	beq.w	800910a <_dtoa_r+0x922>
 8008fe2:	f1c0 0320 	rsb	r3, r0, #32
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	f340 8085 	ble.w	80090f6 <_dtoa_r+0x90e>
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	f1c0 001c 	rsb	r0, r0, #28
 8008ff2:	4403      	add	r3, r0
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	4403      	add	r3, r0
 8008ffa:	4405      	add	r5, r0
 8008ffc:	9306      	str	r3, [sp, #24]
 8008ffe:	9b05      	ldr	r3, [sp, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dd05      	ble.n	8009010 <_dtoa_r+0x828>
 8009004:	4651      	mov	r1, sl
 8009006:	461a      	mov	r2, r3
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fcef 	bl	80099ec <__lshift>
 800900e:	4682      	mov	sl, r0
 8009010:	9b06      	ldr	r3, [sp, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dd05      	ble.n	8009022 <_dtoa_r+0x83a>
 8009016:	4631      	mov	r1, r6
 8009018:	461a      	mov	r2, r3
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fce6 	bl	80099ec <__lshift>
 8009020:	4606      	mov	r6, r0
 8009022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009024:	2b00      	cmp	r3, #0
 8009026:	d072      	beq.n	800910e <_dtoa_r+0x926>
 8009028:	4631      	mov	r1, r6
 800902a:	4650      	mov	r0, sl
 800902c:	f000 fd4a 	bl	8009ac4 <__mcmp>
 8009030:	2800      	cmp	r0, #0
 8009032:	da6c      	bge.n	800910e <_dtoa_r+0x926>
 8009034:	2300      	movs	r3, #0
 8009036:	4651      	mov	r1, sl
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fb28 	bl	8009690 <__multadd>
 8009040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009046:	4682      	mov	sl, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 81b0 	beq.w	80093ae <_dtoa_r+0xbc6>
 800904e:	2300      	movs	r3, #0
 8009050:	4639      	mov	r1, r7
 8009052:	220a      	movs	r2, #10
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fb1b 	bl	8009690 <__multadd>
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	4607      	mov	r7, r0
 8009060:	f300 8096 	bgt.w	8009190 <_dtoa_r+0x9a8>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	2b02      	cmp	r3, #2
 8009068:	dc59      	bgt.n	800911e <_dtoa_r+0x936>
 800906a:	e091      	b.n	8009190 <_dtoa_r+0x9a8>
 800906c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800906e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009072:	e758      	b.n	8008f26 <_dtoa_r+0x73e>
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	1e5e      	subs	r6, r3, #1
 8009078:	9b08      	ldr	r3, [sp, #32]
 800907a:	42b3      	cmp	r3, r6
 800907c:	bfbf      	itttt	lt
 800907e:	9b08      	ldrlt	r3, [sp, #32]
 8009080:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009082:	9608      	strlt	r6, [sp, #32]
 8009084:	1af3      	sublt	r3, r6, r3
 8009086:	bfb4      	ite	lt
 8009088:	18d2      	addlt	r2, r2, r3
 800908a:	1b9e      	subge	r6, r3, r6
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	bfbc      	itt	lt
 8009090:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009092:	2600      	movlt	r6, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfb7      	itett	lt
 8009098:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800909c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80090a0:	1a9d      	sublt	r5, r3, r2
 80090a2:	2300      	movlt	r3, #0
 80090a4:	e741      	b.n	8008f2a <_dtoa_r+0x742>
 80090a6:	9e08      	ldr	r6, [sp, #32]
 80090a8:	9d05      	ldr	r5, [sp, #20]
 80090aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090ac:	e748      	b.n	8008f40 <_dtoa_r+0x758>
 80090ae:	9a08      	ldr	r2, [sp, #32]
 80090b0:	e770      	b.n	8008f94 <_dtoa_r+0x7ac>
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	dc19      	bgt.n	80090ec <_dtoa_r+0x904>
 80090b8:	9b02      	ldr	r3, [sp, #8]
 80090ba:	b9bb      	cbnz	r3, 80090ec <_dtoa_r+0x904>
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c2:	b99b      	cbnz	r3, 80090ec <_dtoa_r+0x904>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	0d1b      	lsrs	r3, r3, #20
 80090cc:	051b      	lsls	r3, r3, #20
 80090ce:	b183      	cbz	r3, 80090f2 <_dtoa_r+0x90a>
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	3301      	adds	r3, #1
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	3301      	adds	r3, #1
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	f04f 0801 	mov.w	r8, #1
 80090e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f47f af6f 	bne.w	8008fc6 <_dtoa_r+0x7de>
 80090e8:	2001      	movs	r0, #1
 80090ea:	e774      	b.n	8008fd6 <_dtoa_r+0x7ee>
 80090ec:	f04f 0800 	mov.w	r8, #0
 80090f0:	e7f6      	b.n	80090e0 <_dtoa_r+0x8f8>
 80090f2:	4698      	mov	r8, r3
 80090f4:	e7f4      	b.n	80090e0 <_dtoa_r+0x8f8>
 80090f6:	d082      	beq.n	8008ffe <_dtoa_r+0x816>
 80090f8:	9a05      	ldr	r2, [sp, #20]
 80090fa:	331c      	adds	r3, #28
 80090fc:	441a      	add	r2, r3
 80090fe:	9205      	str	r2, [sp, #20]
 8009100:	9a06      	ldr	r2, [sp, #24]
 8009102:	441a      	add	r2, r3
 8009104:	441d      	add	r5, r3
 8009106:	9206      	str	r2, [sp, #24]
 8009108:	e779      	b.n	8008ffe <_dtoa_r+0x816>
 800910a:	4603      	mov	r3, r0
 800910c:	e7f4      	b.n	80090f8 <_dtoa_r+0x910>
 800910e:	9b04      	ldr	r3, [sp, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc37      	bgt.n	8009184 <_dtoa_r+0x99c>
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	2b02      	cmp	r3, #2
 8009118:	dd34      	ble.n	8009184 <_dtoa_r+0x99c>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	b963      	cbnz	r3, 800913c <_dtoa_r+0x954>
 8009122:	4631      	mov	r1, r6
 8009124:	2205      	movs	r2, #5
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fab2 	bl	8009690 <__multadd>
 800912c:	4601      	mov	r1, r0
 800912e:	4606      	mov	r6, r0
 8009130:	4650      	mov	r0, sl
 8009132:	f000 fcc7 	bl	8009ac4 <__mcmp>
 8009136:	2800      	cmp	r0, #0
 8009138:	f73f adbb 	bgt.w	8008cb2 <_dtoa_r+0x4ca>
 800913c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800913e:	9d00      	ldr	r5, [sp, #0]
 8009140:	ea6f 0b03 	mvn.w	fp, r3
 8009144:	f04f 0800 	mov.w	r8, #0
 8009148:	4631      	mov	r1, r6
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fa7e 	bl	800964c <_Bfree>
 8009150:	2f00      	cmp	r7, #0
 8009152:	f43f aeab 	beq.w	8008eac <_dtoa_r+0x6c4>
 8009156:	f1b8 0f00 	cmp.w	r8, #0
 800915a:	d005      	beq.n	8009168 <_dtoa_r+0x980>
 800915c:	45b8      	cmp	r8, r7
 800915e:	d003      	beq.n	8009168 <_dtoa_r+0x980>
 8009160:	4641      	mov	r1, r8
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fa72 	bl	800964c <_Bfree>
 8009168:	4639      	mov	r1, r7
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fa6e 	bl	800964c <_Bfree>
 8009170:	e69c      	b.n	8008eac <_dtoa_r+0x6c4>
 8009172:	2600      	movs	r6, #0
 8009174:	4637      	mov	r7, r6
 8009176:	e7e1      	b.n	800913c <_dtoa_r+0x954>
 8009178:	46bb      	mov	fp, r7
 800917a:	4637      	mov	r7, r6
 800917c:	e599      	b.n	8008cb2 <_dtoa_r+0x4ca>
 800917e:	bf00      	nop
 8009180:	40240000 	.word	0x40240000
 8009184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80c8 	beq.w	800931c <_dtoa_r+0xb34>
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	2d00      	cmp	r5, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x9b8>
 8009194:	4639      	mov	r1, r7
 8009196:	462a      	mov	r2, r5
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fc27 	bl	80099ec <__lshift>
 800919e:	4607      	mov	r7, r0
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	d05b      	beq.n	800925e <_dtoa_r+0xa76>
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fa0f 	bl	80095cc <_Balloc>
 80091ae:	4605      	mov	r5, r0
 80091b0:	b928      	cbnz	r0, 80091be <_dtoa_r+0x9d6>
 80091b2:	4b83      	ldr	r3, [pc, #524]	; (80093c0 <_dtoa_r+0xbd8>)
 80091b4:	4602      	mov	r2, r0
 80091b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80091ba:	f7ff bb2e 	b.w	800881a <_dtoa_r+0x32>
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	3202      	adds	r2, #2
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	f107 010c 	add.w	r1, r7, #12
 80091c8:	300c      	adds	r0, #12
 80091ca:	f001 f801 	bl	800a1d0 <memcpy>
 80091ce:	2201      	movs	r2, #1
 80091d0:	4629      	mov	r1, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fc0a 	bl	80099ec <__lshift>
 80091d8:	9b00      	ldr	r3, [sp, #0]
 80091da:	3301      	adds	r3, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e2:	4413      	add	r3, r2
 80091e4:	9308      	str	r3, [sp, #32]
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	46b8      	mov	r8, r7
 80091ee:	9306      	str	r3, [sp, #24]
 80091f0:	4607      	mov	r7, r0
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	4631      	mov	r1, r6
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4650      	mov	r0, sl
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	f7ff fa69 	bl	80086d2 <quorem>
 8009200:	4641      	mov	r1, r8
 8009202:	9002      	str	r0, [sp, #8]
 8009204:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009208:	4650      	mov	r0, sl
 800920a:	f000 fc5b 	bl	8009ac4 <__mcmp>
 800920e:	463a      	mov	r2, r7
 8009210:	9005      	str	r0, [sp, #20]
 8009212:	4631      	mov	r1, r6
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fc71 	bl	8009afc <__mdiff>
 800921a:	68c2      	ldr	r2, [r0, #12]
 800921c:	4605      	mov	r5, r0
 800921e:	bb02      	cbnz	r2, 8009262 <_dtoa_r+0xa7a>
 8009220:	4601      	mov	r1, r0
 8009222:	4650      	mov	r0, sl
 8009224:	f000 fc4e 	bl	8009ac4 <__mcmp>
 8009228:	4602      	mov	r2, r0
 800922a:	4629      	mov	r1, r5
 800922c:	4620      	mov	r0, r4
 800922e:	9209      	str	r2, [sp, #36]	; 0x24
 8009230:	f000 fa0c 	bl	800964c <_Bfree>
 8009234:	9b07      	ldr	r3, [sp, #28]
 8009236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009238:	9d04      	ldr	r5, [sp, #16]
 800923a:	ea43 0102 	orr.w	r1, r3, r2
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	4319      	orrs	r1, r3
 8009242:	d110      	bne.n	8009266 <_dtoa_r+0xa7e>
 8009244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009248:	d029      	beq.n	800929e <_dtoa_r+0xab6>
 800924a:	9b05      	ldr	r3, [sp, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd02      	ble.n	8009256 <_dtoa_r+0xa6e>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	f883 9000 	strb.w	r9, [r3]
 800925c:	e774      	b.n	8009148 <_dtoa_r+0x960>
 800925e:	4638      	mov	r0, r7
 8009260:	e7ba      	b.n	80091d8 <_dtoa_r+0x9f0>
 8009262:	2201      	movs	r2, #1
 8009264:	e7e1      	b.n	800922a <_dtoa_r+0xa42>
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	db04      	blt.n	8009276 <_dtoa_r+0xa8e>
 800926c:	9907      	ldr	r1, [sp, #28]
 800926e:	430b      	orrs	r3, r1
 8009270:	9906      	ldr	r1, [sp, #24]
 8009272:	430b      	orrs	r3, r1
 8009274:	d120      	bne.n	80092b8 <_dtoa_r+0xad0>
 8009276:	2a00      	cmp	r2, #0
 8009278:	dded      	ble.n	8009256 <_dtoa_r+0xa6e>
 800927a:	4651      	mov	r1, sl
 800927c:	2201      	movs	r2, #1
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fbb4 	bl	80099ec <__lshift>
 8009284:	4631      	mov	r1, r6
 8009286:	4682      	mov	sl, r0
 8009288:	f000 fc1c 	bl	8009ac4 <__mcmp>
 800928c:	2800      	cmp	r0, #0
 800928e:	dc03      	bgt.n	8009298 <_dtoa_r+0xab0>
 8009290:	d1e1      	bne.n	8009256 <_dtoa_r+0xa6e>
 8009292:	f019 0f01 	tst.w	r9, #1
 8009296:	d0de      	beq.n	8009256 <_dtoa_r+0xa6e>
 8009298:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800929c:	d1d8      	bne.n	8009250 <_dtoa_r+0xa68>
 800929e:	9a01      	ldr	r2, [sp, #4]
 80092a0:	2339      	movs	r3, #57	; 0x39
 80092a2:	7013      	strb	r3, [r2, #0]
 80092a4:	462b      	mov	r3, r5
 80092a6:	461d      	mov	r5, r3
 80092a8:	3b01      	subs	r3, #1
 80092aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092ae:	2a39      	cmp	r2, #57	; 0x39
 80092b0:	d06c      	beq.n	800938c <_dtoa_r+0xba4>
 80092b2:	3201      	adds	r2, #1
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	e747      	b.n	8009148 <_dtoa_r+0x960>
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	dd07      	ble.n	80092cc <_dtoa_r+0xae4>
 80092bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092c0:	d0ed      	beq.n	800929e <_dtoa_r+0xab6>
 80092c2:	9a01      	ldr	r2, [sp, #4]
 80092c4:	f109 0301 	add.w	r3, r9, #1
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	e73d      	b.n	8009148 <_dtoa_r+0x960>
 80092cc:	9b04      	ldr	r3, [sp, #16]
 80092ce:	9a08      	ldr	r2, [sp, #32]
 80092d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d043      	beq.n	8009360 <_dtoa_r+0xb78>
 80092d8:	4651      	mov	r1, sl
 80092da:	2300      	movs	r3, #0
 80092dc:	220a      	movs	r2, #10
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f9d6 	bl	8009690 <__multadd>
 80092e4:	45b8      	cmp	r8, r7
 80092e6:	4682      	mov	sl, r0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	f04f 020a 	mov.w	r2, #10
 80092f0:	4641      	mov	r1, r8
 80092f2:	4620      	mov	r0, r4
 80092f4:	d107      	bne.n	8009306 <_dtoa_r+0xb1e>
 80092f6:	f000 f9cb 	bl	8009690 <__multadd>
 80092fa:	4680      	mov	r8, r0
 80092fc:	4607      	mov	r7, r0
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	3301      	adds	r3, #1
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	e775      	b.n	80091f2 <_dtoa_r+0xa0a>
 8009306:	f000 f9c3 	bl	8009690 <__multadd>
 800930a:	4639      	mov	r1, r7
 800930c:	4680      	mov	r8, r0
 800930e:	2300      	movs	r3, #0
 8009310:	220a      	movs	r2, #10
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f9bc 	bl	8009690 <__multadd>
 8009318:	4607      	mov	r7, r0
 800931a:	e7f0      	b.n	80092fe <_dtoa_r+0xb16>
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	9d00      	ldr	r5, [sp, #0]
 8009322:	4631      	mov	r1, r6
 8009324:	4650      	mov	r0, sl
 8009326:	f7ff f9d4 	bl	80086d2 <quorem>
 800932a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	f805 9b01 	strb.w	r9, [r5], #1
 8009334:	1aea      	subs	r2, r5, r3
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	4293      	cmp	r3, r2
 800933a:	dd07      	ble.n	800934c <_dtoa_r+0xb64>
 800933c:	4651      	mov	r1, sl
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 f9a4 	bl	8009690 <__multadd>
 8009348:	4682      	mov	sl, r0
 800934a:	e7ea      	b.n	8009322 <_dtoa_r+0xb3a>
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfc8      	it	gt
 8009352:	461d      	movgt	r5, r3
 8009354:	9b00      	ldr	r3, [sp, #0]
 8009356:	bfd8      	it	le
 8009358:	2501      	movle	r5, #1
 800935a:	441d      	add	r5, r3
 800935c:	f04f 0800 	mov.w	r8, #0
 8009360:	4651      	mov	r1, sl
 8009362:	2201      	movs	r2, #1
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fb41 	bl	80099ec <__lshift>
 800936a:	4631      	mov	r1, r6
 800936c:	4682      	mov	sl, r0
 800936e:	f000 fba9 	bl	8009ac4 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	dc96      	bgt.n	80092a4 <_dtoa_r+0xabc>
 8009376:	d102      	bne.n	800937e <_dtoa_r+0xb96>
 8009378:	f019 0f01 	tst.w	r9, #1
 800937c:	d192      	bne.n	80092a4 <_dtoa_r+0xabc>
 800937e:	462b      	mov	r3, r5
 8009380:	461d      	mov	r5, r3
 8009382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009386:	2a30      	cmp	r2, #48	; 0x30
 8009388:	d0fa      	beq.n	8009380 <_dtoa_r+0xb98>
 800938a:	e6dd      	b.n	8009148 <_dtoa_r+0x960>
 800938c:	9a00      	ldr	r2, [sp, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d189      	bne.n	80092a6 <_dtoa_r+0xabe>
 8009392:	f10b 0b01 	add.w	fp, fp, #1
 8009396:	2331      	movs	r3, #49	; 0x31
 8009398:	e796      	b.n	80092c8 <_dtoa_r+0xae0>
 800939a:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <_dtoa_r+0xbdc>)
 800939c:	f7ff ba99 	b.w	80088d2 <_dtoa_r+0xea>
 80093a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f aa6d 	bne.w	8008882 <_dtoa_r+0x9a>
 80093a8:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <_dtoa_r+0xbe0>)
 80093aa:	f7ff ba92 	b.w	80088d2 <_dtoa_r+0xea>
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dcb5      	bgt.n	8009320 <_dtoa_r+0xb38>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	f73f aeb1 	bgt.w	800911e <_dtoa_r+0x936>
 80093bc:	e7b0      	b.n	8009320 <_dtoa_r+0xb38>
 80093be:	bf00      	nop
 80093c0:	0800a628 	.word	0x0800a628
 80093c4:	0800a588 	.word	0x0800a588
 80093c8:	0800a5ac 	.word	0x0800a5ac

080093cc <_free_r>:
 80093cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d044      	beq.n	800945c <_free_r+0x90>
 80093d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d6:	9001      	str	r0, [sp, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f1a1 0404 	sub.w	r4, r1, #4
 80093de:	bfb8      	it	lt
 80093e0:	18e4      	addlt	r4, r4, r3
 80093e2:	f000 f8e7 	bl	80095b4 <__malloc_lock>
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <_free_r+0x94>)
 80093e8:	9801      	ldr	r0, [sp, #4]
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	b933      	cbnz	r3, 80093fc <_free_r+0x30>
 80093ee:	6063      	str	r3, [r4, #4]
 80093f0:	6014      	str	r4, [r2, #0]
 80093f2:	b003      	add	sp, #12
 80093f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f8:	f000 b8e2 	b.w	80095c0 <__malloc_unlock>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d908      	bls.n	8009412 <_free_r+0x46>
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1961      	adds	r1, r4, r5
 8009404:	428b      	cmp	r3, r1
 8009406:	bf01      	itttt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	1949      	addeq	r1, r1, r5
 800940e:	6021      	streq	r1, [r4, #0]
 8009410:	e7ed      	b.n	80093ee <_free_r+0x22>
 8009412:	461a      	mov	r2, r3
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b10b      	cbz	r3, 800941c <_free_r+0x50>
 8009418:	42a3      	cmp	r3, r4
 800941a:	d9fa      	bls.n	8009412 <_free_r+0x46>
 800941c:	6811      	ldr	r1, [r2, #0]
 800941e:	1855      	adds	r5, r2, r1
 8009420:	42a5      	cmp	r5, r4
 8009422:	d10b      	bne.n	800943c <_free_r+0x70>
 8009424:	6824      	ldr	r4, [r4, #0]
 8009426:	4421      	add	r1, r4
 8009428:	1854      	adds	r4, r2, r1
 800942a:	42a3      	cmp	r3, r4
 800942c:	6011      	str	r1, [r2, #0]
 800942e:	d1e0      	bne.n	80093f2 <_free_r+0x26>
 8009430:	681c      	ldr	r4, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	6053      	str	r3, [r2, #4]
 8009436:	440c      	add	r4, r1
 8009438:	6014      	str	r4, [r2, #0]
 800943a:	e7da      	b.n	80093f2 <_free_r+0x26>
 800943c:	d902      	bls.n	8009444 <_free_r+0x78>
 800943e:	230c      	movs	r3, #12
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	e7d6      	b.n	80093f2 <_free_r+0x26>
 8009444:	6825      	ldr	r5, [r4, #0]
 8009446:	1961      	adds	r1, r4, r5
 8009448:	428b      	cmp	r3, r1
 800944a:	bf04      	itt	eq
 800944c:	6819      	ldreq	r1, [r3, #0]
 800944e:	685b      	ldreq	r3, [r3, #4]
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	bf04      	itt	eq
 8009454:	1949      	addeq	r1, r1, r5
 8009456:	6021      	streq	r1, [r4, #0]
 8009458:	6054      	str	r4, [r2, #4]
 800945a:	e7ca      	b.n	80093f2 <_free_r+0x26>
 800945c:	b003      	add	sp, #12
 800945e:	bd30      	pop	{r4, r5, pc}
 8009460:	2000067c 	.word	0x2000067c

08009464 <malloc>:
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <malloc+0xc>)
 8009466:	4601      	mov	r1, r0
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f000 b823 	b.w	80094b4 <_malloc_r>
 800946e:	bf00      	nop
 8009470:	20000064 	.word	0x20000064

08009474 <sbrk_aligned>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0e      	ldr	r6, [pc, #56]	; (80094b0 <sbrk_aligned+0x3c>)
 8009478:	460c      	mov	r4, r1
 800947a:	6831      	ldr	r1, [r6, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	b911      	cbnz	r1, 8009486 <sbrk_aligned+0x12>
 8009480:	f000 fe96 	bl	800a1b0 <_sbrk_r>
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 fe91 	bl	800a1b0 <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d00a      	beq.n	80094a8 <sbrk_aligned+0x34>
 8009492:	1cc4      	adds	r4, r0, #3
 8009494:	f024 0403 	bic.w	r4, r4, #3
 8009498:	42a0      	cmp	r0, r4
 800949a:	d007      	beq.n	80094ac <sbrk_aligned+0x38>
 800949c:	1a21      	subs	r1, r4, r0
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 fe86 	bl	800a1b0 <_sbrk_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d101      	bne.n	80094ac <sbrk_aligned+0x38>
 80094a8:	f04f 34ff 	mov.w	r4, #4294967295
 80094ac:	4620      	mov	r0, r4
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	20000680 	.word	0x20000680

080094b4 <_malloc_r>:
 80094b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b8:	1ccd      	adds	r5, r1, #3
 80094ba:	f025 0503 	bic.w	r5, r5, #3
 80094be:	3508      	adds	r5, #8
 80094c0:	2d0c      	cmp	r5, #12
 80094c2:	bf38      	it	cc
 80094c4:	250c      	movcc	r5, #12
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	4607      	mov	r7, r0
 80094ca:	db01      	blt.n	80094d0 <_malloc_r+0x1c>
 80094cc:	42a9      	cmp	r1, r5
 80094ce:	d905      	bls.n	80094dc <_malloc_r+0x28>
 80094d0:	230c      	movs	r3, #12
 80094d2:	603b      	str	r3, [r7, #0]
 80094d4:	2600      	movs	r6, #0
 80094d6:	4630      	mov	r0, r6
 80094d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095b0 <_malloc_r+0xfc>
 80094e0:	f000 f868 	bl	80095b4 <__malloc_lock>
 80094e4:	f8d8 3000 	ldr.w	r3, [r8]
 80094e8:	461c      	mov	r4, r3
 80094ea:	bb5c      	cbnz	r4, 8009544 <_malloc_r+0x90>
 80094ec:	4629      	mov	r1, r5
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff ffc0 	bl	8009474 <sbrk_aligned>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	4604      	mov	r4, r0
 80094f8:	d155      	bne.n	80095a6 <_malloc_r+0xf2>
 80094fa:	f8d8 4000 	ldr.w	r4, [r8]
 80094fe:	4626      	mov	r6, r4
 8009500:	2e00      	cmp	r6, #0
 8009502:	d145      	bne.n	8009590 <_malloc_r+0xdc>
 8009504:	2c00      	cmp	r4, #0
 8009506:	d048      	beq.n	800959a <_malloc_r+0xe6>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	4631      	mov	r1, r6
 800950c:	4638      	mov	r0, r7
 800950e:	eb04 0903 	add.w	r9, r4, r3
 8009512:	f000 fe4d 	bl	800a1b0 <_sbrk_r>
 8009516:	4581      	cmp	r9, r0
 8009518:	d13f      	bne.n	800959a <_malloc_r+0xe6>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	1a6d      	subs	r5, r5, r1
 800951e:	4629      	mov	r1, r5
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff ffa7 	bl	8009474 <sbrk_aligned>
 8009526:	3001      	adds	r0, #1
 8009528:	d037      	beq.n	800959a <_malloc_r+0xe6>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	442b      	add	r3, r5
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	f8d8 3000 	ldr.w	r3, [r8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d038      	beq.n	80095aa <_malloc_r+0xf6>
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	42a2      	cmp	r2, r4
 800953c:	d12b      	bne.n	8009596 <_malloc_r+0xe2>
 800953e:	2200      	movs	r2, #0
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e00f      	b.n	8009564 <_malloc_r+0xb0>
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	1b52      	subs	r2, r2, r5
 8009548:	d41f      	bmi.n	800958a <_malloc_r+0xd6>
 800954a:	2a0b      	cmp	r2, #11
 800954c:	d917      	bls.n	800957e <_malloc_r+0xca>
 800954e:	1961      	adds	r1, r4, r5
 8009550:	42a3      	cmp	r3, r4
 8009552:	6025      	str	r5, [r4, #0]
 8009554:	bf18      	it	ne
 8009556:	6059      	strne	r1, [r3, #4]
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	bf08      	it	eq
 800955c:	f8c8 1000 	streq.w	r1, [r8]
 8009560:	5162      	str	r2, [r4, r5]
 8009562:	604b      	str	r3, [r1, #4]
 8009564:	4638      	mov	r0, r7
 8009566:	f104 060b 	add.w	r6, r4, #11
 800956a:	f000 f829 	bl	80095c0 <__malloc_unlock>
 800956e:	f026 0607 	bic.w	r6, r6, #7
 8009572:	1d23      	adds	r3, r4, #4
 8009574:	1af2      	subs	r2, r6, r3
 8009576:	d0ae      	beq.n	80094d6 <_malloc_r+0x22>
 8009578:	1b9b      	subs	r3, r3, r6
 800957a:	50a3      	str	r3, [r4, r2]
 800957c:	e7ab      	b.n	80094d6 <_malloc_r+0x22>
 800957e:	42a3      	cmp	r3, r4
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	d1dd      	bne.n	8009540 <_malloc_r+0x8c>
 8009584:	f8c8 2000 	str.w	r2, [r8]
 8009588:	e7ec      	b.n	8009564 <_malloc_r+0xb0>
 800958a:	4623      	mov	r3, r4
 800958c:	6864      	ldr	r4, [r4, #4]
 800958e:	e7ac      	b.n	80094ea <_malloc_r+0x36>
 8009590:	4634      	mov	r4, r6
 8009592:	6876      	ldr	r6, [r6, #4]
 8009594:	e7b4      	b.n	8009500 <_malloc_r+0x4c>
 8009596:	4613      	mov	r3, r2
 8009598:	e7cc      	b.n	8009534 <_malloc_r+0x80>
 800959a:	230c      	movs	r3, #12
 800959c:	603b      	str	r3, [r7, #0]
 800959e:	4638      	mov	r0, r7
 80095a0:	f000 f80e 	bl	80095c0 <__malloc_unlock>
 80095a4:	e797      	b.n	80094d6 <_malloc_r+0x22>
 80095a6:	6025      	str	r5, [r4, #0]
 80095a8:	e7dc      	b.n	8009564 <_malloc_r+0xb0>
 80095aa:	605b      	str	r3, [r3, #4]
 80095ac:	deff      	udf	#255	; 0xff
 80095ae:	bf00      	nop
 80095b0:	2000067c 	.word	0x2000067c

080095b4 <__malloc_lock>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__malloc_lock+0x8>)
 80095b6:	f7ff b88a 	b.w	80086ce <__retarget_lock_acquire_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000678 	.word	0x20000678

080095c0 <__malloc_unlock>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__malloc_unlock+0x8>)
 80095c2:	f7ff b885 	b.w	80086d0 <__retarget_lock_release_recursive>
 80095c6:	bf00      	nop
 80095c8:	20000678 	.word	0x20000678

080095cc <_Balloc>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	69c6      	ldr	r6, [r0, #28]
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	b976      	cbnz	r6, 80095f4 <_Balloc+0x28>
 80095d6:	2010      	movs	r0, #16
 80095d8:	f7ff ff44 	bl	8009464 <malloc>
 80095dc:	4602      	mov	r2, r0
 80095de:	61e0      	str	r0, [r4, #28]
 80095e0:	b920      	cbnz	r0, 80095ec <_Balloc+0x20>
 80095e2:	4b18      	ldr	r3, [pc, #96]	; (8009644 <_Balloc+0x78>)
 80095e4:	4818      	ldr	r0, [pc, #96]	; (8009648 <_Balloc+0x7c>)
 80095e6:	216b      	movs	r1, #107	; 0x6b
 80095e8:	f000 fe00 	bl	800a1ec <__assert_func>
 80095ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f0:	6006      	str	r6, [r0, #0]
 80095f2:	60c6      	str	r6, [r0, #12]
 80095f4:	69e6      	ldr	r6, [r4, #28]
 80095f6:	68f3      	ldr	r3, [r6, #12]
 80095f8:	b183      	cbz	r3, 800961c <_Balloc+0x50>
 80095fa:	69e3      	ldr	r3, [r4, #28]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009602:	b9b8      	cbnz	r0, 8009634 <_Balloc+0x68>
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f605 	lsl.w	r6, r1, r5
 800960a:	1d72      	adds	r2, r6, #5
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	4620      	mov	r0, r4
 8009610:	f000 fe0a 	bl	800a228 <_calloc_r>
 8009614:	b160      	cbz	r0, 8009630 <_Balloc+0x64>
 8009616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800961a:	e00e      	b.n	800963a <_Balloc+0x6e>
 800961c:	2221      	movs	r2, #33	; 0x21
 800961e:	2104      	movs	r1, #4
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fe01 	bl	800a228 <_calloc_r>
 8009626:	69e3      	ldr	r3, [r4, #28]
 8009628:	60f0      	str	r0, [r6, #12]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e4      	bne.n	80095fa <_Balloc+0x2e>
 8009630:	2000      	movs	r0, #0
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	6802      	ldr	r2, [r0, #0]
 8009636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800963a:	2300      	movs	r3, #0
 800963c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009640:	e7f7      	b.n	8009632 <_Balloc+0x66>
 8009642:	bf00      	nop
 8009644:	0800a5b9 	.word	0x0800a5b9
 8009648:	0800a639 	.word	0x0800a639

0800964c <_Bfree>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	69c6      	ldr	r6, [r0, #28]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b976      	cbnz	r6, 8009674 <_Bfree+0x28>
 8009656:	2010      	movs	r0, #16
 8009658:	f7ff ff04 	bl	8009464 <malloc>
 800965c:	4602      	mov	r2, r0
 800965e:	61e8      	str	r0, [r5, #28]
 8009660:	b920      	cbnz	r0, 800966c <_Bfree+0x20>
 8009662:	4b09      	ldr	r3, [pc, #36]	; (8009688 <_Bfree+0x3c>)
 8009664:	4809      	ldr	r0, [pc, #36]	; (800968c <_Bfree+0x40>)
 8009666:	218f      	movs	r1, #143	; 0x8f
 8009668:	f000 fdc0 	bl	800a1ec <__assert_func>
 800966c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009670:	6006      	str	r6, [r0, #0]
 8009672:	60c6      	str	r6, [r0, #12]
 8009674:	b13c      	cbz	r4, 8009686 <_Bfree+0x3a>
 8009676:	69eb      	ldr	r3, [r5, #28]
 8009678:	6862      	ldr	r2, [r4, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009680:	6021      	str	r1, [r4, #0]
 8009682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	0800a5b9 	.word	0x0800a5b9
 800968c:	0800a639 	.word	0x0800a639

08009690 <__multadd>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	690d      	ldr	r5, [r1, #16]
 8009696:	4607      	mov	r7, r0
 8009698:	460c      	mov	r4, r1
 800969a:	461e      	mov	r6, r3
 800969c:	f101 0c14 	add.w	ip, r1, #20
 80096a0:	2000      	movs	r0, #0
 80096a2:	f8dc 3000 	ldr.w	r3, [ip]
 80096a6:	b299      	uxth	r1, r3
 80096a8:	fb02 6101 	mla	r1, r2, r1, r6
 80096ac:	0c1e      	lsrs	r6, r3, #16
 80096ae:	0c0b      	lsrs	r3, r1, #16
 80096b0:	fb02 3306 	mla	r3, r2, r6, r3
 80096b4:	b289      	uxth	r1, r1
 80096b6:	3001      	adds	r0, #1
 80096b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096bc:	4285      	cmp	r5, r0
 80096be:	f84c 1b04 	str.w	r1, [ip], #4
 80096c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096c6:	dcec      	bgt.n	80096a2 <__multadd+0x12>
 80096c8:	b30e      	cbz	r6, 800970e <__multadd+0x7e>
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc19      	bgt.n	8009704 <__multadd+0x74>
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	4638      	mov	r0, r7
 80096d4:	3101      	adds	r1, #1
 80096d6:	f7ff ff79 	bl	80095cc <_Balloc>
 80096da:	4680      	mov	r8, r0
 80096dc:	b928      	cbnz	r0, 80096ea <__multadd+0x5a>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <__multadd+0x84>)
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <__multadd+0x88>)
 80096e4:	21ba      	movs	r1, #186	; 0xba
 80096e6:	f000 fd81 	bl	800a1ec <__assert_func>
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	3202      	adds	r2, #2
 80096ee:	f104 010c 	add.w	r1, r4, #12
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	300c      	adds	r0, #12
 80096f6:	f000 fd6b 	bl	800a1d0 <memcpy>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff ffa5 	bl	800964c <_Bfree>
 8009702:	4644      	mov	r4, r8
 8009704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009708:	3501      	adds	r5, #1
 800970a:	615e      	str	r6, [r3, #20]
 800970c:	6125      	str	r5, [r4, #16]
 800970e:	4620      	mov	r0, r4
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	0800a628 	.word	0x0800a628
 8009718:	0800a639 	.word	0x0800a639

0800971c <__hi0bits>:
 800971c:	0c03      	lsrs	r3, r0, #16
 800971e:	041b      	lsls	r3, r3, #16
 8009720:	b9d3      	cbnz	r3, 8009758 <__hi0bits+0x3c>
 8009722:	0400      	lsls	r0, r0, #16
 8009724:	2310      	movs	r3, #16
 8009726:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800972a:	bf04      	itt	eq
 800972c:	0200      	lsleq	r0, r0, #8
 800972e:	3308      	addeq	r3, #8
 8009730:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009734:	bf04      	itt	eq
 8009736:	0100      	lsleq	r0, r0, #4
 8009738:	3304      	addeq	r3, #4
 800973a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800973e:	bf04      	itt	eq
 8009740:	0080      	lsleq	r0, r0, #2
 8009742:	3302      	addeq	r3, #2
 8009744:	2800      	cmp	r0, #0
 8009746:	db05      	blt.n	8009754 <__hi0bits+0x38>
 8009748:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800974c:	f103 0301 	add.w	r3, r3, #1
 8009750:	bf08      	it	eq
 8009752:	2320      	moveq	r3, #32
 8009754:	4618      	mov	r0, r3
 8009756:	4770      	bx	lr
 8009758:	2300      	movs	r3, #0
 800975a:	e7e4      	b.n	8009726 <__hi0bits+0xa>

0800975c <__lo0bits>:
 800975c:	6803      	ldr	r3, [r0, #0]
 800975e:	f013 0207 	ands.w	r2, r3, #7
 8009762:	d00c      	beq.n	800977e <__lo0bits+0x22>
 8009764:	07d9      	lsls	r1, r3, #31
 8009766:	d422      	bmi.n	80097ae <__lo0bits+0x52>
 8009768:	079a      	lsls	r2, r3, #30
 800976a:	bf49      	itett	mi
 800976c:	085b      	lsrmi	r3, r3, #1
 800976e:	089b      	lsrpl	r3, r3, #2
 8009770:	6003      	strmi	r3, [r0, #0]
 8009772:	2201      	movmi	r2, #1
 8009774:	bf5c      	itt	pl
 8009776:	6003      	strpl	r3, [r0, #0]
 8009778:	2202      	movpl	r2, #2
 800977a:	4610      	mov	r0, r2
 800977c:	4770      	bx	lr
 800977e:	b299      	uxth	r1, r3
 8009780:	b909      	cbnz	r1, 8009786 <__lo0bits+0x2a>
 8009782:	0c1b      	lsrs	r3, r3, #16
 8009784:	2210      	movs	r2, #16
 8009786:	b2d9      	uxtb	r1, r3
 8009788:	b909      	cbnz	r1, 800978e <__lo0bits+0x32>
 800978a:	3208      	adds	r2, #8
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	0719      	lsls	r1, r3, #28
 8009790:	bf04      	itt	eq
 8009792:	091b      	lsreq	r3, r3, #4
 8009794:	3204      	addeq	r2, #4
 8009796:	0799      	lsls	r1, r3, #30
 8009798:	bf04      	itt	eq
 800979a:	089b      	lsreq	r3, r3, #2
 800979c:	3202      	addeq	r2, #2
 800979e:	07d9      	lsls	r1, r3, #31
 80097a0:	d403      	bmi.n	80097aa <__lo0bits+0x4e>
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	f102 0201 	add.w	r2, r2, #1
 80097a8:	d003      	beq.n	80097b2 <__lo0bits+0x56>
 80097aa:	6003      	str	r3, [r0, #0]
 80097ac:	e7e5      	b.n	800977a <__lo0bits+0x1e>
 80097ae:	2200      	movs	r2, #0
 80097b0:	e7e3      	b.n	800977a <__lo0bits+0x1e>
 80097b2:	2220      	movs	r2, #32
 80097b4:	e7e1      	b.n	800977a <__lo0bits+0x1e>
	...

080097b8 <__i2b>:
 80097b8:	b510      	push	{r4, lr}
 80097ba:	460c      	mov	r4, r1
 80097bc:	2101      	movs	r1, #1
 80097be:	f7ff ff05 	bl	80095cc <_Balloc>
 80097c2:	4602      	mov	r2, r0
 80097c4:	b928      	cbnz	r0, 80097d2 <__i2b+0x1a>
 80097c6:	4b05      	ldr	r3, [pc, #20]	; (80097dc <__i2b+0x24>)
 80097c8:	4805      	ldr	r0, [pc, #20]	; (80097e0 <__i2b+0x28>)
 80097ca:	f240 1145 	movw	r1, #325	; 0x145
 80097ce:	f000 fd0d 	bl	800a1ec <__assert_func>
 80097d2:	2301      	movs	r3, #1
 80097d4:	6144      	str	r4, [r0, #20]
 80097d6:	6103      	str	r3, [r0, #16]
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	bf00      	nop
 80097dc:	0800a628 	.word	0x0800a628
 80097e0:	0800a639 	.word	0x0800a639

080097e4 <__multiply>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	4691      	mov	r9, r2
 80097ea:	690a      	ldr	r2, [r1, #16]
 80097ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bfb8      	it	lt
 80097f4:	460b      	movlt	r3, r1
 80097f6:	460c      	mov	r4, r1
 80097f8:	bfbc      	itt	lt
 80097fa:	464c      	movlt	r4, r9
 80097fc:	4699      	movlt	r9, r3
 80097fe:	6927      	ldr	r7, [r4, #16]
 8009800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	6861      	ldr	r1, [r4, #4]
 8009808:	eb07 060a 	add.w	r6, r7, sl
 800980c:	42b3      	cmp	r3, r6
 800980e:	b085      	sub	sp, #20
 8009810:	bfb8      	it	lt
 8009812:	3101      	addlt	r1, #1
 8009814:	f7ff feda 	bl	80095cc <_Balloc>
 8009818:	b930      	cbnz	r0, 8009828 <__multiply+0x44>
 800981a:	4602      	mov	r2, r0
 800981c:	4b44      	ldr	r3, [pc, #272]	; (8009930 <__multiply+0x14c>)
 800981e:	4845      	ldr	r0, [pc, #276]	; (8009934 <__multiply+0x150>)
 8009820:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009824:	f000 fce2 	bl	800a1ec <__assert_func>
 8009828:	f100 0514 	add.w	r5, r0, #20
 800982c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009830:	462b      	mov	r3, r5
 8009832:	2200      	movs	r2, #0
 8009834:	4543      	cmp	r3, r8
 8009836:	d321      	bcc.n	800987c <__multiply+0x98>
 8009838:	f104 0314 	add.w	r3, r4, #20
 800983c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009840:	f109 0314 	add.w	r3, r9, #20
 8009844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009848:	9202      	str	r2, [sp, #8]
 800984a:	1b3a      	subs	r2, r7, r4
 800984c:	3a15      	subs	r2, #21
 800984e:	f022 0203 	bic.w	r2, r2, #3
 8009852:	3204      	adds	r2, #4
 8009854:	f104 0115 	add.w	r1, r4, #21
 8009858:	428f      	cmp	r7, r1
 800985a:	bf38      	it	cc
 800985c:	2204      	movcc	r2, #4
 800985e:	9201      	str	r2, [sp, #4]
 8009860:	9a02      	ldr	r2, [sp, #8]
 8009862:	9303      	str	r3, [sp, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d80c      	bhi.n	8009882 <__multiply+0x9e>
 8009868:	2e00      	cmp	r6, #0
 800986a:	dd03      	ble.n	8009874 <__multiply+0x90>
 800986c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009870:	2b00      	cmp	r3, #0
 8009872:	d05b      	beq.n	800992c <__multiply+0x148>
 8009874:	6106      	str	r6, [r0, #16]
 8009876:	b005      	add	sp, #20
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	f843 2b04 	str.w	r2, [r3], #4
 8009880:	e7d8      	b.n	8009834 <__multiply+0x50>
 8009882:	f8b3 a000 	ldrh.w	sl, [r3]
 8009886:	f1ba 0f00 	cmp.w	sl, #0
 800988a:	d024      	beq.n	80098d6 <__multiply+0xf2>
 800988c:	f104 0e14 	add.w	lr, r4, #20
 8009890:	46a9      	mov	r9, r5
 8009892:	f04f 0c00 	mov.w	ip, #0
 8009896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800989a:	f8d9 1000 	ldr.w	r1, [r9]
 800989e:	fa1f fb82 	uxth.w	fp, r2
 80098a2:	b289      	uxth	r1, r1
 80098a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098ac:	f8d9 2000 	ldr.w	r2, [r9]
 80098b0:	4461      	add	r1, ip
 80098b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80098ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098be:	b289      	uxth	r1, r1
 80098c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098c4:	4577      	cmp	r7, lr
 80098c6:	f849 1b04 	str.w	r1, [r9], #4
 80098ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098ce:	d8e2      	bhi.n	8009896 <__multiply+0xb2>
 80098d0:	9a01      	ldr	r2, [sp, #4]
 80098d2:	f845 c002 	str.w	ip, [r5, r2]
 80098d6:	9a03      	ldr	r2, [sp, #12]
 80098d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098dc:	3304      	adds	r3, #4
 80098de:	f1b9 0f00 	cmp.w	r9, #0
 80098e2:	d021      	beq.n	8009928 <__multiply+0x144>
 80098e4:	6829      	ldr	r1, [r5, #0]
 80098e6:	f104 0c14 	add.w	ip, r4, #20
 80098ea:	46ae      	mov	lr, r5
 80098ec:	f04f 0a00 	mov.w	sl, #0
 80098f0:	f8bc b000 	ldrh.w	fp, [ip]
 80098f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098f8:	fb09 220b 	mla	r2, r9, fp, r2
 80098fc:	4452      	add	r2, sl
 80098fe:	b289      	uxth	r1, r1
 8009900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009904:	f84e 1b04 	str.w	r1, [lr], #4
 8009908:	f85c 1b04 	ldr.w	r1, [ip], #4
 800990c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009910:	f8be 1000 	ldrh.w	r1, [lr]
 8009914:	fb09 110a 	mla	r1, r9, sl, r1
 8009918:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800991c:	4567      	cmp	r7, ip
 800991e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009922:	d8e5      	bhi.n	80098f0 <__multiply+0x10c>
 8009924:	9a01      	ldr	r2, [sp, #4]
 8009926:	50a9      	str	r1, [r5, r2]
 8009928:	3504      	adds	r5, #4
 800992a:	e799      	b.n	8009860 <__multiply+0x7c>
 800992c:	3e01      	subs	r6, #1
 800992e:	e79b      	b.n	8009868 <__multiply+0x84>
 8009930:	0800a628 	.word	0x0800a628
 8009934:	0800a639 	.word	0x0800a639

08009938 <__pow5mult>:
 8009938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800993c:	4615      	mov	r5, r2
 800993e:	f012 0203 	ands.w	r2, r2, #3
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	d007      	beq.n	8009958 <__pow5mult+0x20>
 8009948:	4c25      	ldr	r4, [pc, #148]	; (80099e0 <__pow5mult+0xa8>)
 800994a:	3a01      	subs	r2, #1
 800994c:	2300      	movs	r3, #0
 800994e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009952:	f7ff fe9d 	bl	8009690 <__multadd>
 8009956:	4607      	mov	r7, r0
 8009958:	10ad      	asrs	r5, r5, #2
 800995a:	d03d      	beq.n	80099d8 <__pow5mult+0xa0>
 800995c:	69f4      	ldr	r4, [r6, #28]
 800995e:	b97c      	cbnz	r4, 8009980 <__pow5mult+0x48>
 8009960:	2010      	movs	r0, #16
 8009962:	f7ff fd7f 	bl	8009464 <malloc>
 8009966:	4602      	mov	r2, r0
 8009968:	61f0      	str	r0, [r6, #28]
 800996a:	b928      	cbnz	r0, 8009978 <__pow5mult+0x40>
 800996c:	4b1d      	ldr	r3, [pc, #116]	; (80099e4 <__pow5mult+0xac>)
 800996e:	481e      	ldr	r0, [pc, #120]	; (80099e8 <__pow5mult+0xb0>)
 8009970:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009974:	f000 fc3a 	bl	800a1ec <__assert_func>
 8009978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800997c:	6004      	str	r4, [r0, #0]
 800997e:	60c4      	str	r4, [r0, #12]
 8009980:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009988:	b94c      	cbnz	r4, 800999e <__pow5mult+0x66>
 800998a:	f240 2171 	movw	r1, #625	; 0x271
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff12 	bl	80097b8 <__i2b>
 8009994:	2300      	movs	r3, #0
 8009996:	f8c8 0008 	str.w	r0, [r8, #8]
 800999a:	4604      	mov	r4, r0
 800999c:	6003      	str	r3, [r0, #0]
 800999e:	f04f 0900 	mov.w	r9, #0
 80099a2:	07eb      	lsls	r3, r5, #31
 80099a4:	d50a      	bpl.n	80099bc <__pow5mult+0x84>
 80099a6:	4639      	mov	r1, r7
 80099a8:	4622      	mov	r2, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7ff ff1a 	bl	80097e4 <__multiply>
 80099b0:	4639      	mov	r1, r7
 80099b2:	4680      	mov	r8, r0
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff fe49 	bl	800964c <_Bfree>
 80099ba:	4647      	mov	r7, r8
 80099bc:	106d      	asrs	r5, r5, #1
 80099be:	d00b      	beq.n	80099d8 <__pow5mult+0xa0>
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	b938      	cbnz	r0, 80099d4 <__pow5mult+0x9c>
 80099c4:	4622      	mov	r2, r4
 80099c6:	4621      	mov	r1, r4
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff ff0b 	bl	80097e4 <__multiply>
 80099ce:	6020      	str	r0, [r4, #0]
 80099d0:	f8c0 9000 	str.w	r9, [r0]
 80099d4:	4604      	mov	r4, r0
 80099d6:	e7e4      	b.n	80099a2 <__pow5mult+0x6a>
 80099d8:	4638      	mov	r0, r7
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	bf00      	nop
 80099e0:	0800a788 	.word	0x0800a788
 80099e4:	0800a5b9 	.word	0x0800a5b9
 80099e8:	0800a639 	.word	0x0800a639

080099ec <__lshift>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	6849      	ldr	r1, [r1, #4]
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	4607      	mov	r7, r0
 80099fe:	4691      	mov	r9, r2
 8009a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a04:	f108 0601 	add.w	r6, r8, #1
 8009a08:	42b3      	cmp	r3, r6
 8009a0a:	db0b      	blt.n	8009a24 <__lshift+0x38>
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff fddd 	bl	80095cc <_Balloc>
 8009a12:	4605      	mov	r5, r0
 8009a14:	b948      	cbnz	r0, 8009a2a <__lshift+0x3e>
 8009a16:	4602      	mov	r2, r0
 8009a18:	4b28      	ldr	r3, [pc, #160]	; (8009abc <__lshift+0xd0>)
 8009a1a:	4829      	ldr	r0, [pc, #164]	; (8009ac0 <__lshift+0xd4>)
 8009a1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a20:	f000 fbe4 	bl	800a1ec <__assert_func>
 8009a24:	3101      	adds	r1, #1
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	e7ee      	b.n	8009a08 <__lshift+0x1c>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f100 0114 	add.w	r1, r0, #20
 8009a30:	f100 0210 	add.w	r2, r0, #16
 8009a34:	4618      	mov	r0, r3
 8009a36:	4553      	cmp	r3, sl
 8009a38:	db33      	blt.n	8009aa2 <__lshift+0xb6>
 8009a3a:	6920      	ldr	r0, [r4, #16]
 8009a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a40:	f104 0314 	add.w	r3, r4, #20
 8009a44:	f019 091f 	ands.w	r9, r9, #31
 8009a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a50:	d02b      	beq.n	8009aaa <__lshift+0xbe>
 8009a52:	f1c9 0e20 	rsb	lr, r9, #32
 8009a56:	468a      	mov	sl, r1
 8009a58:	2200      	movs	r2, #0
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a60:	4310      	orrs	r0, r2
 8009a62:	f84a 0b04 	str.w	r0, [sl], #4
 8009a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6a:	459c      	cmp	ip, r3
 8009a6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a70:	d8f3      	bhi.n	8009a5a <__lshift+0x6e>
 8009a72:	ebac 0304 	sub.w	r3, ip, r4
 8009a76:	3b15      	subs	r3, #21
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	f104 0015 	add.w	r0, r4, #21
 8009a82:	4584      	cmp	ip, r0
 8009a84:	bf38      	it	cc
 8009a86:	2304      	movcc	r3, #4
 8009a88:	50ca      	str	r2, [r1, r3]
 8009a8a:	b10a      	cbz	r2, 8009a90 <__lshift+0xa4>
 8009a8c:	f108 0602 	add.w	r6, r8, #2
 8009a90:	3e01      	subs	r6, #1
 8009a92:	4638      	mov	r0, r7
 8009a94:	612e      	str	r6, [r5, #16]
 8009a96:	4621      	mov	r1, r4
 8009a98:	f7ff fdd8 	bl	800964c <_Bfree>
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	e7c5      	b.n	8009a36 <__lshift+0x4a>
 8009aaa:	3904      	subs	r1, #4
 8009aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ab4:	459c      	cmp	ip, r3
 8009ab6:	d8f9      	bhi.n	8009aac <__lshift+0xc0>
 8009ab8:	e7ea      	b.n	8009a90 <__lshift+0xa4>
 8009aba:	bf00      	nop
 8009abc:	0800a628 	.word	0x0800a628
 8009ac0:	0800a639 	.word	0x0800a639

08009ac4 <__mcmp>:
 8009ac4:	b530      	push	{r4, r5, lr}
 8009ac6:	6902      	ldr	r2, [r0, #16]
 8009ac8:	690c      	ldr	r4, [r1, #16]
 8009aca:	1b12      	subs	r2, r2, r4
 8009acc:	d10e      	bne.n	8009aec <__mcmp+0x28>
 8009ace:	f100 0314 	add.w	r3, r0, #20
 8009ad2:	3114      	adds	r1, #20
 8009ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ae4:	42a5      	cmp	r5, r4
 8009ae6:	d003      	beq.n	8009af0 <__mcmp+0x2c>
 8009ae8:	d305      	bcc.n	8009af6 <__mcmp+0x32>
 8009aea:	2201      	movs	r2, #1
 8009aec:	4610      	mov	r0, r2
 8009aee:	bd30      	pop	{r4, r5, pc}
 8009af0:	4283      	cmp	r3, r0
 8009af2:	d3f3      	bcc.n	8009adc <__mcmp+0x18>
 8009af4:	e7fa      	b.n	8009aec <__mcmp+0x28>
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	e7f7      	b.n	8009aec <__mcmp+0x28>

08009afc <__mdiff>:
 8009afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	4606      	mov	r6, r0
 8009b04:	4611      	mov	r1, r2
 8009b06:	4620      	mov	r0, r4
 8009b08:	4690      	mov	r8, r2
 8009b0a:	f7ff ffdb 	bl	8009ac4 <__mcmp>
 8009b0e:	1e05      	subs	r5, r0, #0
 8009b10:	d110      	bne.n	8009b34 <__mdiff+0x38>
 8009b12:	4629      	mov	r1, r5
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff fd59 	bl	80095cc <_Balloc>
 8009b1a:	b930      	cbnz	r0, 8009b2a <__mdiff+0x2e>
 8009b1c:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <__mdiff+0x10c>)
 8009b1e:	4602      	mov	r2, r0
 8009b20:	f240 2137 	movw	r1, #567	; 0x237
 8009b24:	4839      	ldr	r0, [pc, #228]	; (8009c0c <__mdiff+0x110>)
 8009b26:	f000 fb61 	bl	800a1ec <__assert_func>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b34:	bfa4      	itt	ge
 8009b36:	4643      	movge	r3, r8
 8009b38:	46a0      	movge	r8, r4
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b40:	bfa6      	itte	ge
 8009b42:	461c      	movge	r4, r3
 8009b44:	2500      	movge	r5, #0
 8009b46:	2501      	movlt	r5, #1
 8009b48:	f7ff fd40 	bl	80095cc <_Balloc>
 8009b4c:	b920      	cbnz	r0, 8009b58 <__mdiff+0x5c>
 8009b4e:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <__mdiff+0x10c>)
 8009b50:	4602      	mov	r2, r0
 8009b52:	f240 2145 	movw	r1, #581	; 0x245
 8009b56:	e7e5      	b.n	8009b24 <__mdiff+0x28>
 8009b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b5c:	6926      	ldr	r6, [r4, #16]
 8009b5e:	60c5      	str	r5, [r0, #12]
 8009b60:	f104 0914 	add.w	r9, r4, #20
 8009b64:	f108 0514 	add.w	r5, r8, #20
 8009b68:	f100 0e14 	add.w	lr, r0, #20
 8009b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b74:	f108 0210 	add.w	r2, r8, #16
 8009b78:	46f2      	mov	sl, lr
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b84:	fa11 f88b 	uxtah	r8, r1, fp
 8009b88:	b299      	uxth	r1, r3
 8009b8a:	0c1b      	lsrs	r3, r3, #16
 8009b8c:	eba8 0801 	sub.w	r8, r8, r1
 8009b90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b98:	fa1f f888 	uxth.w	r8, r8
 8009b9c:	1419      	asrs	r1, r3, #16
 8009b9e:	454e      	cmp	r6, r9
 8009ba0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ba4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ba8:	d8e8      	bhi.n	8009b7c <__mdiff+0x80>
 8009baa:	1b33      	subs	r3, r6, r4
 8009bac:	3b15      	subs	r3, #21
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	3415      	adds	r4, #21
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	bf38      	it	cc
 8009bba:	2304      	movcc	r3, #4
 8009bbc:	441d      	add	r5, r3
 8009bbe:	4473      	add	r3, lr
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	462e      	mov	r6, r5
 8009bc4:	4566      	cmp	r6, ip
 8009bc6:	d30e      	bcc.n	8009be6 <__mdiff+0xea>
 8009bc8:	f10c 0203 	add.w	r2, ip, #3
 8009bcc:	1b52      	subs	r2, r2, r5
 8009bce:	f022 0203 	bic.w	r2, r2, #3
 8009bd2:	3d03      	subs	r5, #3
 8009bd4:	45ac      	cmp	ip, r5
 8009bd6:	bf38      	it	cc
 8009bd8:	2200      	movcc	r2, #0
 8009bda:	4413      	add	r3, r2
 8009bdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009be0:	b17a      	cbz	r2, 8009c02 <__mdiff+0x106>
 8009be2:	6107      	str	r7, [r0, #16]
 8009be4:	e7a4      	b.n	8009b30 <__mdiff+0x34>
 8009be6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bea:	fa11 f288 	uxtah	r2, r1, r8
 8009bee:	1414      	asrs	r4, r2, #16
 8009bf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bf4:	b292      	uxth	r2, r2
 8009bf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bfa:	f84e 2b04 	str.w	r2, [lr], #4
 8009bfe:	1421      	asrs	r1, r4, #16
 8009c00:	e7e0      	b.n	8009bc4 <__mdiff+0xc8>
 8009c02:	3f01      	subs	r7, #1
 8009c04:	e7ea      	b.n	8009bdc <__mdiff+0xe0>
 8009c06:	bf00      	nop
 8009c08:	0800a628 	.word	0x0800a628
 8009c0c:	0800a639 	.word	0x0800a639

08009c10 <__d2b>:
 8009c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	460f      	mov	r7, r1
 8009c16:	2101      	movs	r1, #1
 8009c18:	ec59 8b10 	vmov	r8, r9, d0
 8009c1c:	4616      	mov	r6, r2
 8009c1e:	f7ff fcd5 	bl	80095cc <_Balloc>
 8009c22:	4604      	mov	r4, r0
 8009c24:	b930      	cbnz	r0, 8009c34 <__d2b+0x24>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b24      	ldr	r3, [pc, #144]	; (8009cbc <__d2b+0xac>)
 8009c2a:	4825      	ldr	r0, [pc, #148]	; (8009cc0 <__d2b+0xb0>)
 8009c2c:	f240 310f 	movw	r1, #783	; 0x30f
 8009c30:	f000 fadc 	bl	800a1ec <__assert_func>
 8009c34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c3c:	bb2d      	cbnz	r5, 8009c8a <__d2b+0x7a>
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	f1b8 0300 	subs.w	r3, r8, #0
 8009c44:	d026      	beq.n	8009c94 <__d2b+0x84>
 8009c46:	4668      	mov	r0, sp
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	f7ff fd87 	bl	800975c <__lo0bits>
 8009c4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c52:	b1e8      	cbz	r0, 8009c90 <__d2b+0x80>
 8009c54:	f1c0 0320 	rsb	r3, r0, #32
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	40c2      	lsrs	r2, r0
 8009c60:	6163      	str	r3, [r4, #20]
 8009c62:	9201      	str	r2, [sp, #4]
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	61a3      	str	r3, [r4, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf14      	ite	ne
 8009c6c:	2202      	movne	r2, #2
 8009c6e:	2201      	moveq	r2, #1
 8009c70:	6122      	str	r2, [r4, #16]
 8009c72:	b1bd      	cbz	r5, 8009ca4 <__d2b+0x94>
 8009c74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c78:	4405      	add	r5, r0
 8009c7a:	603d      	str	r5, [r7, #0]
 8009c7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c80:	6030      	str	r0, [r6, #0]
 8009c82:	4620      	mov	r0, r4
 8009c84:	b003      	add	sp, #12
 8009c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c8e:	e7d6      	b.n	8009c3e <__d2b+0x2e>
 8009c90:	6161      	str	r1, [r4, #20]
 8009c92:	e7e7      	b.n	8009c64 <__d2b+0x54>
 8009c94:	a801      	add	r0, sp, #4
 8009c96:	f7ff fd61 	bl	800975c <__lo0bits>
 8009c9a:	9b01      	ldr	r3, [sp, #4]
 8009c9c:	6163      	str	r3, [r4, #20]
 8009c9e:	3020      	adds	r0, #32
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	e7e5      	b.n	8009c70 <__d2b+0x60>
 8009ca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cac:	6038      	str	r0, [r7, #0]
 8009cae:	6918      	ldr	r0, [r3, #16]
 8009cb0:	f7ff fd34 	bl	800971c <__hi0bits>
 8009cb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cb8:	e7e2      	b.n	8009c80 <__d2b+0x70>
 8009cba:	bf00      	nop
 8009cbc:	0800a628 	.word	0x0800a628
 8009cc0:	0800a639 	.word	0x0800a639

08009cc4 <__sfputc_r>:
 8009cc4:	6893      	ldr	r3, [r2, #8]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	b410      	push	{r4}
 8009ccc:	6093      	str	r3, [r2, #8]
 8009cce:	da08      	bge.n	8009ce2 <__sfputc_r+0x1e>
 8009cd0:	6994      	ldr	r4, [r2, #24]
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	db01      	blt.n	8009cda <__sfputc_r+0x16>
 8009cd6:	290a      	cmp	r1, #10
 8009cd8:	d103      	bne.n	8009ce2 <__sfputc_r+0x1e>
 8009cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cde:	f7fe bbe4 	b.w	80084aa <__swbuf_r>
 8009ce2:	6813      	ldr	r3, [r2, #0]
 8009ce4:	1c58      	adds	r0, r3, #1
 8009ce6:	6010      	str	r0, [r2, #0]
 8009ce8:	7019      	strb	r1, [r3, #0]
 8009cea:	4608      	mov	r0, r1
 8009cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <__sfputs_r>:
 8009cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	18d5      	adds	r5, r2, r3
 8009cfc:	42ac      	cmp	r4, r5
 8009cfe:	d101      	bne.n	8009d04 <__sfputs_r+0x12>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e007      	b.n	8009d14 <__sfputs_r+0x22>
 8009d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d08:	463a      	mov	r2, r7
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ffda 	bl	8009cc4 <__sfputc_r>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d1f3      	bne.n	8009cfc <__sfputs_r+0xa>
 8009d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d18 <_vfiprintf_r>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	b09d      	sub	sp, #116	; 0x74
 8009d20:	4614      	mov	r4, r2
 8009d22:	4698      	mov	r8, r3
 8009d24:	4606      	mov	r6, r0
 8009d26:	b118      	cbz	r0, 8009d30 <_vfiprintf_r+0x18>
 8009d28:	6a03      	ldr	r3, [r0, #32]
 8009d2a:	b90b      	cbnz	r3, 8009d30 <_vfiprintf_r+0x18>
 8009d2c:	f7fe fad6 	bl	80082dc <__sinit>
 8009d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d32:	07d9      	lsls	r1, r3, #31
 8009d34:	d405      	bmi.n	8009d42 <_vfiprintf_r+0x2a>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	059a      	lsls	r2, r3, #22
 8009d3a:	d402      	bmi.n	8009d42 <_vfiprintf_r+0x2a>
 8009d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3e:	f7fe fcc6 	bl	80086ce <__retarget_lock_acquire_recursive>
 8009d42:	89ab      	ldrh	r3, [r5, #12]
 8009d44:	071b      	lsls	r3, r3, #28
 8009d46:	d501      	bpl.n	8009d4c <_vfiprintf_r+0x34>
 8009d48:	692b      	ldr	r3, [r5, #16]
 8009d4a:	b99b      	cbnz	r3, 8009d74 <_vfiprintf_r+0x5c>
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7fe fbe8 	bl	8008524 <__swsetup_r>
 8009d54:	b170      	cbz	r0, 8009d74 <_vfiprintf_r+0x5c>
 8009d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d58:	07dc      	lsls	r4, r3, #31
 8009d5a:	d504      	bpl.n	8009d66 <_vfiprintf_r+0x4e>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	b01d      	add	sp, #116	; 0x74
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	0598      	lsls	r0, r3, #22
 8009d6a:	d4f7      	bmi.n	8009d5c <_vfiprintf_r+0x44>
 8009d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d6e:	f7fe fcaf 	bl	80086d0 <__retarget_lock_release_recursive>
 8009d72:	e7f3      	b.n	8009d5c <_vfiprintf_r+0x44>
 8009d74:	2300      	movs	r3, #0
 8009d76:	9309      	str	r3, [sp, #36]	; 0x24
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d82:	2330      	movs	r3, #48	; 0x30
 8009d84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f38 <_vfiprintf_r+0x220>
 8009d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d8c:	f04f 0901 	mov.w	r9, #1
 8009d90:	4623      	mov	r3, r4
 8009d92:	469a      	mov	sl, r3
 8009d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d98:	b10a      	cbz	r2, 8009d9e <_vfiprintf_r+0x86>
 8009d9a:	2a25      	cmp	r2, #37	; 0x25
 8009d9c:	d1f9      	bne.n	8009d92 <_vfiprintf_r+0x7a>
 8009d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8009da2:	d00b      	beq.n	8009dbc <_vfiprintf_r+0xa4>
 8009da4:	465b      	mov	r3, fp
 8009da6:	4622      	mov	r2, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	4630      	mov	r0, r6
 8009dac:	f7ff ffa1 	bl	8009cf2 <__sfputs_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	f000 80a9 	beq.w	8009f08 <_vfiprintf_r+0x1f0>
 8009db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009db8:	445a      	add	r2, fp
 8009dba:	9209      	str	r2, [sp, #36]	; 0x24
 8009dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 80a1 	beq.w	8009f08 <_vfiprintf_r+0x1f0>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd0:	f10a 0a01 	add.w	sl, sl, #1
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8009dde:	4654      	mov	r4, sl
 8009de0:	2205      	movs	r2, #5
 8009de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de6:	4854      	ldr	r0, [pc, #336]	; (8009f38 <_vfiprintf_r+0x220>)
 8009de8:	f7f6 f9f2 	bl	80001d0 <memchr>
 8009dec:	9a04      	ldr	r2, [sp, #16]
 8009dee:	b9d8      	cbnz	r0, 8009e28 <_vfiprintf_r+0x110>
 8009df0:	06d1      	lsls	r1, r2, #27
 8009df2:	bf44      	itt	mi
 8009df4:	2320      	movmi	r3, #32
 8009df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dfa:	0713      	lsls	r3, r2, #28
 8009dfc:	bf44      	itt	mi
 8009dfe:	232b      	movmi	r3, #43	; 0x2b
 8009e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e04:	f89a 3000 	ldrb.w	r3, [sl]
 8009e08:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0a:	d015      	beq.n	8009e38 <_vfiprintf_r+0x120>
 8009e0c:	9a07      	ldr	r2, [sp, #28]
 8009e0e:	4654      	mov	r4, sl
 8009e10:	2000      	movs	r0, #0
 8009e12:	f04f 0c0a 	mov.w	ip, #10
 8009e16:	4621      	mov	r1, r4
 8009e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e1c:	3b30      	subs	r3, #48	; 0x30
 8009e1e:	2b09      	cmp	r3, #9
 8009e20:	d94d      	bls.n	8009ebe <_vfiprintf_r+0x1a6>
 8009e22:	b1b0      	cbz	r0, 8009e52 <_vfiprintf_r+0x13a>
 8009e24:	9207      	str	r2, [sp, #28]
 8009e26:	e014      	b.n	8009e52 <_vfiprintf_r+0x13a>
 8009e28:	eba0 0308 	sub.w	r3, r0, r8
 8009e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e30:	4313      	orrs	r3, r2
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	46a2      	mov	sl, r4
 8009e36:	e7d2      	b.n	8009dde <_vfiprintf_r+0xc6>
 8009e38:	9b03      	ldr	r3, [sp, #12]
 8009e3a:	1d19      	adds	r1, r3, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	9103      	str	r1, [sp, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfbb      	ittet	lt
 8009e44:	425b      	neglt	r3, r3
 8009e46:	f042 0202 	orrlt.w	r2, r2, #2
 8009e4a:	9307      	strge	r3, [sp, #28]
 8009e4c:	9307      	strlt	r3, [sp, #28]
 8009e4e:	bfb8      	it	lt
 8009e50:	9204      	strlt	r2, [sp, #16]
 8009e52:	7823      	ldrb	r3, [r4, #0]
 8009e54:	2b2e      	cmp	r3, #46	; 0x2e
 8009e56:	d10c      	bne.n	8009e72 <_vfiprintf_r+0x15a>
 8009e58:	7863      	ldrb	r3, [r4, #1]
 8009e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e5c:	d134      	bne.n	8009ec8 <_vfiprintf_r+0x1b0>
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	1d1a      	adds	r2, r3, #4
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	9203      	str	r2, [sp, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bfb8      	it	lt
 8009e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e6e:	3402      	adds	r4, #2
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f48 <_vfiprintf_r+0x230>
 8009e76:	7821      	ldrb	r1, [r4, #0]
 8009e78:	2203      	movs	r2, #3
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	f7f6 f9a8 	bl	80001d0 <memchr>
 8009e80:	b138      	cbz	r0, 8009e92 <_vfiprintf_r+0x17a>
 8009e82:	9b04      	ldr	r3, [sp, #16]
 8009e84:	eba0 000a 	sub.w	r0, r0, sl
 8009e88:	2240      	movs	r2, #64	; 0x40
 8009e8a:	4082      	lsls	r2, r0
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	3401      	adds	r4, #1
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e96:	4829      	ldr	r0, [pc, #164]	; (8009f3c <_vfiprintf_r+0x224>)
 8009e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e9c:	2206      	movs	r2, #6
 8009e9e:	f7f6 f997 	bl	80001d0 <memchr>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d03f      	beq.n	8009f26 <_vfiprintf_r+0x20e>
 8009ea6:	4b26      	ldr	r3, [pc, #152]	; (8009f40 <_vfiprintf_r+0x228>)
 8009ea8:	bb1b      	cbnz	r3, 8009ef2 <_vfiprintf_r+0x1da>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	3307      	adds	r3, #7
 8009eae:	f023 0307 	bic.w	r3, r3, #7
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	9303      	str	r3, [sp, #12]
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	443b      	add	r3, r7
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	e768      	b.n	8009d90 <_vfiprintf_r+0x78>
 8009ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	e7a6      	b.n	8009e16 <_vfiprintf_r+0xfe>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	3401      	adds	r4, #1
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	f04f 0c0a 	mov.w	ip, #10
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eda:	3a30      	subs	r2, #48	; 0x30
 8009edc:	2a09      	cmp	r2, #9
 8009ede:	d903      	bls.n	8009ee8 <_vfiprintf_r+0x1d0>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0c6      	beq.n	8009e72 <_vfiprintf_r+0x15a>
 8009ee4:	9105      	str	r1, [sp, #20]
 8009ee6:	e7c4      	b.n	8009e72 <_vfiprintf_r+0x15a>
 8009ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eec:	4604      	mov	r4, r0
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e7f0      	b.n	8009ed4 <_vfiprintf_r+0x1bc>
 8009ef2:	ab03      	add	r3, sp, #12
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <_vfiprintf_r+0x22c>)
 8009efa:	a904      	add	r1, sp, #16
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7fd fd9b 	bl	8007a38 <_printf_float>
 8009f02:	4607      	mov	r7, r0
 8009f04:	1c78      	adds	r0, r7, #1
 8009f06:	d1d6      	bne.n	8009eb6 <_vfiprintf_r+0x19e>
 8009f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0a:	07d9      	lsls	r1, r3, #31
 8009f0c:	d405      	bmi.n	8009f1a <_vfiprintf_r+0x202>
 8009f0e:	89ab      	ldrh	r3, [r5, #12]
 8009f10:	059a      	lsls	r2, r3, #22
 8009f12:	d402      	bmi.n	8009f1a <_vfiprintf_r+0x202>
 8009f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f16:	f7fe fbdb 	bl	80086d0 <__retarget_lock_release_recursive>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	065b      	lsls	r3, r3, #25
 8009f1e:	f53f af1d 	bmi.w	8009d5c <_vfiprintf_r+0x44>
 8009f22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f24:	e71c      	b.n	8009d60 <_vfiprintf_r+0x48>
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <_vfiprintf_r+0x22c>)
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7fe f825 	bl	8007f80 <_printf_i>
 8009f36:	e7e4      	b.n	8009f02 <_vfiprintf_r+0x1ea>
 8009f38:	0800a794 	.word	0x0800a794
 8009f3c:	0800a79e 	.word	0x0800a79e
 8009f40:	08007a39 	.word	0x08007a39
 8009f44:	08009cf3 	.word	0x08009cf3
 8009f48:	0800a79a 	.word	0x0800a79a

08009f4c <__sflush_r>:
 8009f4c:	898a      	ldrh	r2, [r1, #12]
 8009f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f52:	4605      	mov	r5, r0
 8009f54:	0710      	lsls	r0, r2, #28
 8009f56:	460c      	mov	r4, r1
 8009f58:	d458      	bmi.n	800a00c <__sflush_r+0xc0>
 8009f5a:	684b      	ldr	r3, [r1, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dc05      	bgt.n	8009f6c <__sflush_r+0x20>
 8009f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dc02      	bgt.n	8009f6c <__sflush_r+0x20>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d0f9      	beq.n	8009f66 <__sflush_r+0x1a>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f78:	682f      	ldr	r7, [r5, #0]
 8009f7a:	6a21      	ldr	r1, [r4, #32]
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	d032      	beq.n	8009fe6 <__sflush_r+0x9a>
 8009f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	075a      	lsls	r2, r3, #29
 8009f86:	d505      	bpl.n	8009f94 <__sflush_r+0x48>
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	1ac0      	subs	r0, r0, r3
 8009f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f8e:	b10b      	cbz	r3, 8009f94 <__sflush_r+0x48>
 8009f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f92:	1ac0      	subs	r0, r0, r3
 8009f94:	2300      	movs	r3, #0
 8009f96:	4602      	mov	r2, r0
 8009f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f9a:	6a21      	ldr	r1, [r4, #32]
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b0      	blx	r6
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	d106      	bne.n	8009fb4 <__sflush_r+0x68>
 8009fa6:	6829      	ldr	r1, [r5, #0]
 8009fa8:	291d      	cmp	r1, #29
 8009faa:	d82b      	bhi.n	800a004 <__sflush_r+0xb8>
 8009fac:	4a29      	ldr	r2, [pc, #164]	; (800a054 <__sflush_r+0x108>)
 8009fae:	410a      	asrs	r2, r1
 8009fb0:	07d6      	lsls	r6, r2, #31
 8009fb2:	d427      	bmi.n	800a004 <__sflush_r+0xb8>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	6062      	str	r2, [r4, #4]
 8009fb8:	04d9      	lsls	r1, r3, #19
 8009fba:	6922      	ldr	r2, [r4, #16]
 8009fbc:	6022      	str	r2, [r4, #0]
 8009fbe:	d504      	bpl.n	8009fca <__sflush_r+0x7e>
 8009fc0:	1c42      	adds	r2, r0, #1
 8009fc2:	d101      	bne.n	8009fc8 <__sflush_r+0x7c>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b903      	cbnz	r3, 8009fca <__sflush_r+0x7e>
 8009fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8009fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fcc:	602f      	str	r7, [r5, #0]
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d0c9      	beq.n	8009f66 <__sflush_r+0x1a>
 8009fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	d002      	beq.n	8009fe0 <__sflush_r+0x94>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7ff f9f6 	bl	80093cc <_free_r>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8009fe4:	e7c0      	b.n	8009f68 <__sflush_r+0x1c>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b0      	blx	r6
 8009fec:	1c41      	adds	r1, r0, #1
 8009fee:	d1c8      	bne.n	8009f82 <__sflush_r+0x36>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0c5      	beq.n	8009f82 <__sflush_r+0x36>
 8009ff6:	2b1d      	cmp	r3, #29
 8009ff8:	d001      	beq.n	8009ffe <__sflush_r+0xb2>
 8009ffa:	2b16      	cmp	r3, #22
 8009ffc:	d101      	bne.n	800a002 <__sflush_r+0xb6>
 8009ffe:	602f      	str	r7, [r5, #0]
 800a000:	e7b1      	b.n	8009f66 <__sflush_r+0x1a>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	e7ad      	b.n	8009f68 <__sflush_r+0x1c>
 800a00c:	690f      	ldr	r7, [r1, #16]
 800a00e:	2f00      	cmp	r7, #0
 800a010:	d0a9      	beq.n	8009f66 <__sflush_r+0x1a>
 800a012:	0793      	lsls	r3, r2, #30
 800a014:	680e      	ldr	r6, [r1, #0]
 800a016:	bf08      	it	eq
 800a018:	694b      	ldreq	r3, [r1, #20]
 800a01a:	600f      	str	r7, [r1, #0]
 800a01c:	bf18      	it	ne
 800a01e:	2300      	movne	r3, #0
 800a020:	eba6 0807 	sub.w	r8, r6, r7
 800a024:	608b      	str	r3, [r1, #8]
 800a026:	f1b8 0f00 	cmp.w	r8, #0
 800a02a:	dd9c      	ble.n	8009f66 <__sflush_r+0x1a>
 800a02c:	6a21      	ldr	r1, [r4, #32]
 800a02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a030:	4643      	mov	r3, r8
 800a032:	463a      	mov	r2, r7
 800a034:	4628      	mov	r0, r5
 800a036:	47b0      	blx	r6
 800a038:	2800      	cmp	r0, #0
 800a03a:	dc06      	bgt.n	800a04a <__sflush_r+0xfe>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	e78e      	b.n	8009f68 <__sflush_r+0x1c>
 800a04a:	4407      	add	r7, r0
 800a04c:	eba8 0800 	sub.w	r8, r8, r0
 800a050:	e7e9      	b.n	800a026 <__sflush_r+0xda>
 800a052:	bf00      	nop
 800a054:	dfbffffe 	.word	0xdfbffffe

0800a058 <_fflush_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	690b      	ldr	r3, [r1, #16]
 800a05c:	4605      	mov	r5, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	b913      	cbnz	r3, 800a068 <_fflush_r+0x10>
 800a062:	2500      	movs	r5, #0
 800a064:	4628      	mov	r0, r5
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	b118      	cbz	r0, 800a072 <_fflush_r+0x1a>
 800a06a:	6a03      	ldr	r3, [r0, #32]
 800a06c:	b90b      	cbnz	r3, 800a072 <_fflush_r+0x1a>
 800a06e:	f7fe f935 	bl	80082dc <__sinit>
 800a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0f3      	beq.n	800a062 <_fflush_r+0xa>
 800a07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a07c:	07d0      	lsls	r0, r2, #31
 800a07e:	d404      	bmi.n	800a08a <_fflush_r+0x32>
 800a080:	0599      	lsls	r1, r3, #22
 800a082:	d402      	bmi.n	800a08a <_fflush_r+0x32>
 800a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a086:	f7fe fb22 	bl	80086ce <__retarget_lock_acquire_recursive>
 800a08a:	4628      	mov	r0, r5
 800a08c:	4621      	mov	r1, r4
 800a08e:	f7ff ff5d 	bl	8009f4c <__sflush_r>
 800a092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a094:	07da      	lsls	r2, r3, #31
 800a096:	4605      	mov	r5, r0
 800a098:	d4e4      	bmi.n	800a064 <_fflush_r+0xc>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	059b      	lsls	r3, r3, #22
 800a09e:	d4e1      	bmi.n	800a064 <_fflush_r+0xc>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a2:	f7fe fb15 	bl	80086d0 <__retarget_lock_release_recursive>
 800a0a6:	e7dd      	b.n	800a064 <_fflush_r+0xc>

0800a0a8 <__swhatbuf_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	b096      	sub	sp, #88	; 0x58
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	461e      	mov	r6, r3
 800a0b8:	da0d      	bge.n	800a0d6 <__swhatbuf_r+0x2e>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0c0:	f04f 0100 	mov.w	r1, #0
 800a0c4:	bf0c      	ite	eq
 800a0c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0ca:	2340      	movne	r3, #64	; 0x40
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	6031      	str	r1, [r6, #0]
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	b016      	add	sp, #88	; 0x58
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
 800a0d6:	466a      	mov	r2, sp
 800a0d8:	f000 f848 	bl	800a16c <_fstat_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	dbec      	blt.n	800a0ba <__swhatbuf_r+0x12>
 800a0e0:	9901      	ldr	r1, [sp, #4]
 800a0e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a0e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a0ea:	4259      	negs	r1, r3
 800a0ec:	4159      	adcs	r1, r3
 800a0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f2:	e7eb      	b.n	800a0cc <__swhatbuf_r+0x24>

0800a0f4 <__smakebuf_r>:
 800a0f4:	898b      	ldrh	r3, [r1, #12]
 800a0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0f8:	079d      	lsls	r5, r3, #30
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	d507      	bpl.n	800a110 <__smakebuf_r+0x1c>
 800a100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	6123      	str	r3, [r4, #16]
 800a108:	2301      	movs	r3, #1
 800a10a:	6163      	str	r3, [r4, #20]
 800a10c:	b002      	add	sp, #8
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	ab01      	add	r3, sp, #4
 800a112:	466a      	mov	r2, sp
 800a114:	f7ff ffc8 	bl	800a0a8 <__swhatbuf_r>
 800a118:	9900      	ldr	r1, [sp, #0]
 800a11a:	4605      	mov	r5, r0
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff f9c9 	bl	80094b4 <_malloc_r>
 800a122:	b948      	cbnz	r0, 800a138 <__smakebuf_r+0x44>
 800a124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a128:	059a      	lsls	r2, r3, #22
 800a12a:	d4ef      	bmi.n	800a10c <__smakebuf_r+0x18>
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	e7e3      	b.n	800a100 <__smakebuf_r+0xc>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	6020      	str	r0, [r4, #0]
 800a13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	9b00      	ldr	r3, [sp, #0]
 800a144:	6163      	str	r3, [r4, #20]
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	6120      	str	r0, [r4, #16]
 800a14a:	b15b      	cbz	r3, 800a164 <__smakebuf_r+0x70>
 800a14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f81d 	bl	800a190 <_isatty_r>
 800a156:	b128      	cbz	r0, 800a164 <__smakebuf_r+0x70>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f023 0303 	bic.w	r3, r3, #3
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	431d      	orrs	r5, r3
 800a168:	81a5      	strh	r5, [r4, #12]
 800a16a:	e7cf      	b.n	800a10c <__smakebuf_r+0x18>

0800a16c <_fstat_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_fstat_r+0x20>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	4611      	mov	r1, r2
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f7f8 fcf0 	bl	8002b5e <_fstat>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d102      	bne.n	800a188 <_fstat_r+0x1c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	b103      	cbz	r3, 800a188 <_fstat_r+0x1c>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	bd38      	pop	{r3, r4, r5, pc}
 800a18a:	bf00      	nop
 800a18c:	20000674 	.word	0x20000674

0800a190 <_isatty_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	; (800a1ac <_isatty_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7f8 fcef 	bl	8002b7e <_isatty>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_isatty_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_isatty_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20000674 	.word	0x20000674

0800a1b0 <_sbrk_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d06      	ldr	r5, [pc, #24]	; (800a1cc <_sbrk_r+0x1c>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	f7f8 fcf8 	bl	8002bb0 <_sbrk>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_sbrk_r+0x1a>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_sbrk_r+0x1a>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20000674 	.word	0x20000674

0800a1d0 <memcpy>:
 800a1d0:	440a      	add	r2, r1
 800a1d2:	4291      	cmp	r1, r2
 800a1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d8:	d100      	bne.n	800a1dc <memcpy+0xc>
 800a1da:	4770      	bx	lr
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	d1f9      	bne.n	800a1de <memcpy+0xe>
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <__assert_func>:
 800a1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <__assert_func+0x2c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	68d8      	ldr	r0, [r3, #12]
 800a1fa:	b14c      	cbz	r4, 800a210 <__assert_func+0x24>
 800a1fc:	4b07      	ldr	r3, [pc, #28]	; (800a21c <__assert_func+0x30>)
 800a1fe:	9100      	str	r1, [sp, #0]
 800a200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a204:	4906      	ldr	r1, [pc, #24]	; (800a220 <__assert_func+0x34>)
 800a206:	462b      	mov	r3, r5
 800a208:	f000 f844 	bl	800a294 <fiprintf>
 800a20c:	f000 f854 	bl	800a2b8 <abort>
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <__assert_func+0x38>)
 800a212:	461c      	mov	r4, r3
 800a214:	e7f3      	b.n	800a1fe <__assert_func+0x12>
 800a216:	bf00      	nop
 800a218:	20000064 	.word	0x20000064
 800a21c:	0800a7af 	.word	0x0800a7af
 800a220:	0800a7bc 	.word	0x0800a7bc
 800a224:	0800a7ea 	.word	0x0800a7ea

0800a228 <_calloc_r>:
 800a228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a22a:	fba1 2402 	umull	r2, r4, r1, r2
 800a22e:	b94c      	cbnz	r4, 800a244 <_calloc_r+0x1c>
 800a230:	4611      	mov	r1, r2
 800a232:	9201      	str	r2, [sp, #4]
 800a234:	f7ff f93e 	bl	80094b4 <_malloc_r>
 800a238:	9a01      	ldr	r2, [sp, #4]
 800a23a:	4605      	mov	r5, r0
 800a23c:	b930      	cbnz	r0, 800a24c <_calloc_r+0x24>
 800a23e:	4628      	mov	r0, r5
 800a240:	b003      	add	sp, #12
 800a242:	bd30      	pop	{r4, r5, pc}
 800a244:	220c      	movs	r2, #12
 800a246:	6002      	str	r2, [r0, #0]
 800a248:	2500      	movs	r5, #0
 800a24a:	e7f8      	b.n	800a23e <_calloc_r+0x16>
 800a24c:	4621      	mov	r1, r4
 800a24e:	f7fe f9c1 	bl	80085d4 <memset>
 800a252:	e7f4      	b.n	800a23e <_calloc_r+0x16>

0800a254 <__ascii_mbtowc>:
 800a254:	b082      	sub	sp, #8
 800a256:	b901      	cbnz	r1, 800a25a <__ascii_mbtowc+0x6>
 800a258:	a901      	add	r1, sp, #4
 800a25a:	b142      	cbz	r2, 800a26e <__ascii_mbtowc+0x1a>
 800a25c:	b14b      	cbz	r3, 800a272 <__ascii_mbtowc+0x1e>
 800a25e:	7813      	ldrb	r3, [r2, #0]
 800a260:	600b      	str	r3, [r1, #0]
 800a262:	7812      	ldrb	r2, [r2, #0]
 800a264:	1e10      	subs	r0, r2, #0
 800a266:	bf18      	it	ne
 800a268:	2001      	movne	r0, #1
 800a26a:	b002      	add	sp, #8
 800a26c:	4770      	bx	lr
 800a26e:	4610      	mov	r0, r2
 800a270:	e7fb      	b.n	800a26a <__ascii_mbtowc+0x16>
 800a272:	f06f 0001 	mvn.w	r0, #1
 800a276:	e7f8      	b.n	800a26a <__ascii_mbtowc+0x16>

0800a278 <__ascii_wctomb>:
 800a278:	b149      	cbz	r1, 800a28e <__ascii_wctomb+0x16>
 800a27a:	2aff      	cmp	r2, #255	; 0xff
 800a27c:	bf85      	ittet	hi
 800a27e:	238a      	movhi	r3, #138	; 0x8a
 800a280:	6003      	strhi	r3, [r0, #0]
 800a282:	700a      	strbls	r2, [r1, #0]
 800a284:	f04f 30ff 	movhi.w	r0, #4294967295
 800a288:	bf98      	it	ls
 800a28a:	2001      	movls	r0, #1
 800a28c:	4770      	bx	lr
 800a28e:	4608      	mov	r0, r1
 800a290:	4770      	bx	lr
	...

0800a294 <fiprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b503      	push	{r0, r1, lr}
 800a298:	4601      	mov	r1, r0
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <fiprintf+0x20>)
 800a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	f7ff fd37 	bl	8009d18 <_vfiprintf_r>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b0:	b003      	add	sp, #12
 800a2b2:	4770      	bx	lr
 800a2b4:	20000064 	.word	0x20000064

0800a2b8 <abort>:
 800a2b8:	b508      	push	{r3, lr}
 800a2ba:	2006      	movs	r0, #6
 800a2bc:	f000 f82c 	bl	800a318 <raise>
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f7f8 fc19 	bl	8002af8 <_exit>

0800a2c6 <_raise_r>:
 800a2c6:	291f      	cmp	r1, #31
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	d904      	bls.n	800a2da <_raise_r+0x14>
 800a2d0:	2316      	movs	r3, #22
 800a2d2:	6003      	str	r3, [r0, #0]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	bd38      	pop	{r3, r4, r5, pc}
 800a2da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a2dc:	b112      	cbz	r2, 800a2e4 <_raise_r+0x1e>
 800a2de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e2:	b94b      	cbnz	r3, 800a2f8 <_raise_r+0x32>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 f831 	bl	800a34c <_getpid_r>
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f4:	f000 b818 	b.w	800a328 <_kill_r>
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d00a      	beq.n	800a312 <_raise_r+0x4c>
 800a2fc:	1c59      	adds	r1, r3, #1
 800a2fe:	d103      	bne.n	800a308 <_raise_r+0x42>
 800a300:	2316      	movs	r3, #22
 800a302:	6003      	str	r3, [r0, #0]
 800a304:	2001      	movs	r0, #1
 800a306:	e7e7      	b.n	800a2d8 <_raise_r+0x12>
 800a308:	2400      	movs	r4, #0
 800a30a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a30e:	4628      	mov	r0, r5
 800a310:	4798      	blx	r3
 800a312:	2000      	movs	r0, #0
 800a314:	e7e0      	b.n	800a2d8 <_raise_r+0x12>
	...

0800a318 <raise>:
 800a318:	4b02      	ldr	r3, [pc, #8]	; (800a324 <raise+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f7ff bfd2 	b.w	800a2c6 <_raise_r>
 800a322:	bf00      	nop
 800a324:	20000064 	.word	0x20000064

0800a328 <_kill_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	; (800a348 <_kill_r+0x20>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f8 fbcf 	bl	8002ad8 <_kill>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_kill_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_kill_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	20000674 	.word	0x20000674

0800a34c <_getpid_r>:
 800a34c:	f7f8 bbbc 	b.w	8002ac8 <_getpid>

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
